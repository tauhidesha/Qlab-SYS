
// src/ai/flows/visualize-repaint.ts
'use server';
/**
 * @fileOverview Visualizes a vehicle with a new paint color using generative AI.
 *
 * - visualizeRepaint - A function that handles the vehicle repaint visualization process.
 * - VisualizeRepaintInput - The input type for the visualizeRepaint function.
 * - VisualizeRepaintOutput - The return type for the visualizeRepaint function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VisualizeRepaintInputSchema = z.object({
  vehiclePhotoDataUri: z
    .string()
    .describe(
      "A photo of the vehicle to be repainted, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  repaintColor: z.string().describe('The desired repaint color for the vehicle.'),
});
export type VisualizeRepaintInput = z.infer<typeof VisualizeRepaintInputSchema>;

const VisualizeRepaintOutputSchema = z.object({
  transformedVehiclePhotoDataUri: z
    .string()
    .describe('A photo of the vehicle with the new paint color applied, as a data URI.'),
});
export type VisualizeRepaintOutput = z.infer<typeof VisualizeRepaintOutputSchema>;

export async function visualizeRepaint(input: VisualizeRepaintInput): Promise<VisualizeRepaintOutput> {
  return visualizeRepaintFlow(input);
}

const visualizeRepaintPrompt = ai.definePrompt({
  name: 'visualizeRepaintPrompt',
  model: 'googleai/gemini-2.0-flash-exp', // Specify the image model
  input: {schema: VisualizeRepaintInputSchema},
  // Output schema removed from prompt as we primarily care about media() output for images.
  // The flow's outputSchema will ensure the final return type.
  prompt: `Consider the following image: {{media url=vehiclePhotoDataUri}}.
Your task is to repaint the primary vehicle in this image with the color '{{repaintColor}}'.
Important:
1. Only change the color of the vehicle.
2. All other elements in the image (background, other objects, reflections, shadows, lighting conditions) must remain exactly the same as the original image.
3. The shape, model, and details of the vehicle (wheels, lights, windows, etc.) must also remain unchanged, only its paint color should be modified.
Generate the repainted image.`,
  config: {
    responseModalities: ['TEXT', 'IMAGE'] // Must provide both TEXT and IMAGE for this model
  }
});

const visualizeRepaintFlow = ai.defineFlow(
  {
    name: 'visualizeRepaintFlow',
    inputSchema: VisualizeRepaintInputSchema,
    outputSchema: VisualizeRepaintOutputSchema,
  },
  async (input: VisualizeRepaintInput): Promise<VisualizeRepaintOutput> => {
    const response = await visualizeRepaintPrompt(input); // This call invokes the model
    const mediaData = response.media(); // Genkit v1.x syntax

    if (!mediaData?.url) {
      throw new Error('No image generated by the AI model.');
    }
    return {transformedVehiclePhotoDataUri: mediaData.url};
  }
);

