{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-2.0-flash-exp', // Set model default ke Gemini 2.0 Flash Experimental\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n"],"names":[],"mappings":";;;AACA;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore, connectFirestoreEmulator } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApp();\n}\n\ndb = getFirestore(app);\n\n// Kondisi untuk menggunakan emulator hanya saat development dan jika variabel env diset\n// Ini relevan jika kamu menjalankan Next.js secara LOKAL (yarn dev)\n// Untuk Firebase Studio, Studio akan menangani koneksi ke layanan cloud atau emulatornya sendiri.\nconst useEmulator = process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_USE_FIREBASE_EMULATOR === 'true';\n\nif (useEmulator) {\n  console.log(\"Firebase.ts: NODE_ENV is development and NEXT_PUBLIC_USE_FIREBASE_EMULATOR is true. Attempting to connect to Firestore Emulator.\");\n  try {\n    connectFirestoreEmulator(db, 'localhost', 8080);\n    console.log(\"ðŸ”¥ Firebase.ts: SUCCESSFULLY connected to Firestore Emulator at localhost:8080\");\n  } catch (error) {\n    console.error(\" Firebase.ts: FAILED to connect to Firestore Emulator. Make sure emulator is running.\", error);\n  }\n} else {\n  console.log(\"Firebase.ts: Connecting to CLOUD Firestore. (NODE_ENV:\", process.env.NODE_ENV, \", NEXT_PUBLIC_USE_FIREBASE_EMULATOR:\", process.env.NEXT_PUBLIC_USE_FIREBASE_EMULATOR,\")\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;AAElB,wFAAwF;AACxF,oEAAoE;AACpE,kGAAkG;AAClG,MAAM,cAAc,oDAAyB,iBAAiB,QAAQ,GAAG,CAAC,iCAAiC,KAAK;AAEhH,IAAI,aAAa;IACf,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,CAAA,GAAA,iKAAA,CAAA,2BAAwB,AAAD,EAAE,IAAI,aAAa;QAC1C,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yFAAyF;IACzG;AACF,OAAO;IACL,QAAQ,GAAG,CAAC,2GAAgF,wCAAwC,QAAQ,GAAG,CAAC,iCAAiC,EAAC;AACpL","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiToolSchemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Skema untuk varian produk/layanan yang akan dikembalikan oleh tool\nconst ProductVariantInfoSchema = z.object({\n  name: z.string().describe(\"Nama varian.\"),\n  price: z.number().describe(\"Harga varian.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin yang diberikan untuk varian ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan varian ini (jika layanan).\"),\n});\nexport type ProductVariantInfo = z.infer<typeof ProductVariantInfoSchema>;\n\n// Skema untuk informasi produk/layanan yang akan dikembalikan oleh tool\nexport const ProductServiceInfoSchema = z.object({\n  id: z.string().describe(\"ID unik produk/layanan.\"),\n  name: z.string().describe(\"Nama produk atau layanan.\"),\n  type: z.enum(['Layanan', 'Produk']).describe(\"Jenis item, apakah 'Layanan' atau 'Produk'.\"),\n  category: z.string().describe(\"Kategori produk/layanan.\"),\n  price: z.number().describe(\"Harga dasar produk/layanan. Bisa 0 jika harga ditentukan oleh varian.\"),\n  description: z.string().optional().describe(\"Deskripsi singkat produk/layanan.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin loyalitas yang diberikan untuk produk/layanan dasar ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan (jika ini adalah layanan).\"),\n  variants: z.array(ProductVariantInfoSchema).optional().describe(\"Daftar varian yang tersedia untuk produk/layanan ini.\"),\n});\nexport type ProductServiceInfo = z.infer<typeof ProductServiceInfoSchema>;\n\n// Skema untuk informasi motor klien\nconst ClientMotorcycleInfoSchema = z.object({\n  name: z.string().describe(\"Nama atau model motor.\"),\n  licensePlate: z.string().describe(\"Plat nomor motor.\"),\n});\nexport type ClientMotorcycleInfo = z.infer<typeof ClientMotorcycleInfoSchema>;\n\n// Skema untuk informasi klien yang akan dikembalikan oleh tool\nexport const ClientInfoSchema = z.object({\n  id: z.string().describe(\"ID unik klien.\"),\n  name: z.string().describe(\"Nama lengkap klien.\"),\n  phone: z.string().describe(\"Nomor telepon klien.\"),\n  loyaltyPoints: z.number().describe(\"Jumlah poin loyalitas yang dimiliki klien.\"),\n  motorcycles: z.array(ClientMotorcycleInfoSchema).optional().describe(\"Daftar sepeda motor yang terdaftar atas nama klien ini.\"),\n  lastVisit: z.string().optional().describe(\"Tanggal kunjungan terakhir klien (format YYYY-MM-DD).\"),\n});\nexport type ClientInfo = z.infer<typeof ClientInfoSchema>;\n"],"names":[],"mappings":";;;;AACA;;AAEA,qEAAqE;AACrE,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ,CAAC;IAC7C,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,UAAU,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,GAAG,QAAQ,CAAC;AAClE;AAGA,oCAAoC;AACpC,MAAM,6BAA6B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIO,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,4BAA4B,QAAQ,GAAG,QAAQ,CAAC;IACrE,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/productLookupTool.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit tool for looking up product or service details from Firestore.\n */\nimport {ai}from '@/ai/genkit';\nimport {z}from 'genkit';\nimport { collection, query, where, getDocs, limit } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ServiceProduct, ServiceProductVariant } from '@/app/(app)/services/page';\nimport { ProductServiceInfoSchema, type ProductServiceInfo } from '@/types/aiToolSchemas';\n\nconst ProductLookupInputSchema = z.object({\n  productName: z.string().describe(\"Nama produk atau layanan yang ingin dicari detailnya. Harus spesifik.\"),\n});\n\nexport const getProductServiceDetailsByNameTool = ai.defineTool(\n  {\n    name: 'getProductServiceDetailsByNameTool',\n    description: 'Mencari dan mengembalikan detail spesifik dari sebuah produk atau layanan berdasarkan namanya. Berguna untuk menjawab pertanyaan pelanggan tentang harga, durasi, ketersediaan, atau deskripsi item tertentu.',\n    inputSchema: ProductLookupInputSchema,\n    outputSchema: z.union([ProductServiceInfoSchema, z.null()]).describe(\"Objek berisi detail produk/layanan, atau null jika tidak ditemukan.\"),\n  },\n  async (input) => {\n    if (!input.productName || input.productName.trim() === '') {\n      console.log(\"ProductLookupTool: Nama produk kosong.\");\n      return null;\n    }\n    console.log(`ProductLookupTool: Mencari produk/layanan dengan nama: \"${input.productName}\"`);\n    try {\n      const servicesRef = collection(db, 'services');\n      const q = query(servicesRef);\n      const querySnapshot = await getDocs(q);\n\n      let foundItem: ServiceProduct | null = null;\n      const searchTermLower = input.productName.toLowerCase();\n\n      let bestMatchCandidate: ServiceProduct | null = null;\n      let bestMatchIsVariant = false;\n\n      for (const doc of querySnapshot.docs) {\n        const item = { id: doc.id, ...doc.data() } as ServiceProduct;\n\n        if (Array.isArray(item.variants)) { // Safely check if variants is an array\n            for (const variant of item.variants) {\n                const fullVariantName = `${item.name} - ${variant.name}`;\n                if (fullVariantName.toLowerCase().includes(searchTermLower)) {\n                    const currentCandidateIsBetter = !bestMatchCandidate ||\n                                                     (fullVariantName.toLowerCase() === searchTermLower && (!bestMatchIsVariant || (bestMatchCandidate.name && bestMatchCandidate.name.toLowerCase() !== searchTermLower))) ||\n                                                     (!bestMatchIsVariant && searchTermLower.length > (bestMatchCandidate.name?.length || 0) );\n\n                    if (currentCandidateIsBetter) {\n                        bestMatchCandidate = {\n                            ...item, // Spread base item properties\n                            name: fullVariantName, // Override name with full variant name\n                            price: variant.price, // Override price with variant price\n                            pointsAwarded: variant.pointsAwarded ?? item.pointsAwarded, // Variant points or base points\n                            estimatedDuration: variant.estimatedDuration ?? item.estimatedDuration, // Variant duration or base duration\n                            // Variants array from base item should not be included here\n                        };\n                        delete bestMatchCandidate.variants; // Ensure variants array from base item is removed\n                        bestMatchIsVariant = true;\n                        if (fullVariantName.toLowerCase() === searchTermLower) { // Exact match, break all\n                            foundItem = bestMatchCandidate;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (foundItem) break; // Exact variant match found\n\n        // Check base item name if no exact variant match yet\n        if (item.name.toLowerCase().includes(searchTermLower)) {\n            if (!bestMatchCandidate || // No candidate yet\n                (!bestMatchIsVariant && item.name.toLowerCase() === searchTermLower && bestMatchCandidate.name && bestMatchCandidate.name.toLowerCase() !== searchTermLower) || // Exact base name match is better than previous partial base\n                (!bestMatchIsVariant && item.name.length < (bestMatchCandidate.name?.length || Infinity)) // Shorter base name that includes term (less specific but could be what user meant)\n            ) {\n                bestMatchCandidate = item;\n                bestMatchIsVariant = false; // Mark that this candidate is a base item\n            }\n        }\n      }\n\n      foundItem = bestMatchCandidate || foundItem; // Ensure foundItem gets the candidate if no exact variant break\n\n      if (foundItem) {\n        console.log(`ProductLookupTool: Ditemukan item: ${foundItem.name}`);\n\n        let mappedVariants: ProductServiceInfo['variants'] = undefined;\n        // If the found item IS a base item (not a pre-selected variant) AND it has variants, map them.\n        if (!bestMatchIsVariant && Array.isArray(foundItem.variants)) {\n            mappedVariants = foundItem.variants.map(v => ({\n                name: v.name,\n                price: v.price,\n                pointsAwarded: v.pointsAwarded || undefined,\n                estimatedDuration: v.estimatedDuration || undefined,\n            }));\n        }\n\n\n        const result: ProductServiceInfo = {\n          id: foundItem.id,\n          name: foundItem.name, // This will be the full variant name if a variant was the best match\n          type: foundItem.type,\n          category: foundItem.category,\n          price: foundItem.price, // This will be the variant price if a variant was the best match\n          description: foundItem.description || undefined,\n          pointsAwarded: foundItem.pointsAwarded || undefined,\n          estimatedDuration: foundItem.estimatedDuration || undefined,\n          variants: mappedVariants, // Only include variants if the foundItem itself is a base item with variants\n        };\n\n        try {\n            ProductServiceInfoSchema.parse(result);\n            return result;\n        } catch (zodError: any) {\n            console.error(\"ProductLookupTool: Zod validation error for found item:\", zodError.errors);\n            // console.error(\"ProductLookupTool: Data causing error:\", JSON.stringify(result, null, 2));\n            return null;\n        }\n      } else {\n        console.log(`ProductLookupTool: Tidak ada produk/layanan yang cocok dengan nama \"${input.productName}\".`);\n        return null;\n      }\n    } catch (error) {\n      console.error('ProductLookupTool: Error saat mengambil data dari Firestore:', error);\n      return null;\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/clientLookupTool.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit tool for looking up client details from Firestore.\n */\nimport {ai}from '@/ai/genkit';\nimport {z}from 'genkit';\nimport { collection, query, where, getDocs, limit } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { Client, Motorcycle } from '@/types/client'; // Motorcycle type might be needed\nimport { ClientInfoSchema, type ClientInfo } from '@/types/aiToolSchemas';\n\nconst ClientLookupInputSchema = z.object({\n  searchQuery: z.string().describe(\"Nama atau nomor telepon klien yang ingin dicari. Jika nomor telepon, harus angka saja atau dengan +62. Jika nama, bisa nama lengkap atau sebagian.\"),\n});\n\nexport const getClientDetailsTool = ai.defineTool(\n  {\n    name: 'getClientDetailsTool',\n    description: 'Mencari dan mengembalikan detail klien berdasarkan nama atau nomor telepon. Berguna untuk menjawab pertanyaan pelanggan tentang data mereka seperti poin loyalitas, motor terdaftar, atau histori layanan (jika ada).',\n    inputSchema: ClientLookupInputSchema,\n    outputSchema: z.union([ClientInfoSchema, z.null()]).describe(\"Objek berisi detail klien, atau null jika tidak ditemukan.\"),\n  },\n  async (input) => {\n    if (!input.searchQuery || input.searchQuery.trim() === '') {\n      console.log(\"ClientLookupTool: Query pencarian klien kosong.\");\n      return null;\n    }\n    const searchTerm = input.searchQuery.trim();\n    console.log(`ClientLookupTool: Mencari klien dengan query: \"${searchTerm}\"`);\n\n    try {\n      const clientsRef = collection(db, 'clients');\n      let q;\n      let foundClientData: Client | null = null; // Use a more specific type if available, e.g., your Client type\n\n      // Basic check if it's a phone number (contains mostly digits)\n      if (/^\\+?[0-9\\s-]{7,}$/.test(searchTerm)) {\n        // Try to match phone number\n        const phoneQuery = query(clientsRef, where(\"phone\", \"==\", searchTerm), limit(1));\n        const phoneSnapshot = await getDocs(phoneQuery);\n        if (!phoneSnapshot.empty) {\n          // Explicitly cast to Client type if you have one, or ensure data structure matches\n          foundClientData = { id: phoneSnapshot.docs[0].id, ...phoneSnapshot.docs[0].data() } as Client;\n        }\n      }\n\n      // If not found by phone or if it wasn't a phone-like query, try by name\n      if (!foundClientData) {\n        const nameQuery = query(clientsRef); // Fetch all and filter for demo purposes\n        const nameSnapshot = await getDocs(nameQuery);\n        const searchTermLower = searchTerm.toLowerCase();\n        for (const doc of nameSnapshot.docs) {\n            // Explicitly cast to Client type\n            const clientData = { id: doc.id, ...doc.data() } as Client;\n            if (clientData.name && clientData.name.toLowerCase().includes(searchTermLower)) {\n                foundClientData = clientData;\n                break; // Take the first match\n            }\n        }\n      }\n\n      if (foundClientData) {\n        console.log(`ClientLookupTool: Ditemukan klien: ${foundClientData.name}`);\n\n        let mappedMotorcycles: ClientInfo['motorcycles'] = undefined;\n        // Ensure motorcycles is an array before mapping\n        if (Array.isArray(foundClientData.motorcycles)) {\n            mappedMotorcycles = foundClientData.motorcycles.map(m => ({ name: m.name, licensePlate: m.licensePlate }));\n        } else if (foundClientData.motorcycles) {\n            console.warn(`ClientLookupTool: motorcycles field for client ${foundClientData.id} is not an array, skipping.`);\n        }\n\n\n        const result: ClientInfo = {\n          id: foundClientData.id,\n          name: foundClientData.name,\n          phone: foundClientData.phone,\n          loyaltyPoints: foundClientData.loyaltyPoints || 0,\n          motorcycles: mappedMotorcycles, // Use the safely mapped motorcycles\n          lastVisit: foundClientData.lastVisit || undefined,\n        };\n\n        // Validate with Zod before returning\n        try {\n            ClientInfoSchema.parse(result);\n            return result;\n        } catch (zodError: any) { // Catch any error from Zod\n            console.error(\"ClientLookupTool: Zod validation error for found client:\", zodError);\n            return null; // Or handle error appropriately\n        }\n      } else {\n        console.log(`ClientLookupTool: Tidak ada klien yang cocok dengan query \"${searchTerm}\".`);\n        return null;\n      }\n    } catch (error) {\n      console.error('ClientLookupTool: Error saat mengambil data klien dari Firestore:', error);\n      return null;\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/knowledgeLookupTool.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit tool for retrieving specific knowledge base information\n * from Firestore. This acts as a dynamic RAG retriever.\n */\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { collection, getDocs, query as firestoreQuery, orderBy, where } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { KnowledgeBaseEntry as KnowledgeBaseEntryType } from '@/types/knowledgeBase'; // Menggunakan tipe dari file baru\n\nconst KnowledgeChunkSchema = z.object({\n  topic: z.string().describe(\"The topic queried.\"),\n  information: z.string().describe(\"The retrieved information relevant to the topic. Could be a paragraph or a few bullet points.\"),\n  found: z.boolean().describe(\"Whether relevant information was found for the topic.\")\n});\nexport type KnowledgeChunk = z.infer<typeof KnowledgeChunkSchema>;\n\nconst KnowledgeLookupInputSchema = z.object({\n  query: z.string().describe(\"The user's question or topic to search for in the knowledge base. e.g., 'harga coating motor beat', 'jam buka bengkel', 'kebijakan garansi'\"),\n});\n\nexport const getKnowledgeBaseInfoTool = ai.defineTool(\n  {\n    name: 'getKnowledgeBaseInfoTool',\n    description: 'Mengambil informasi spesifik dari knowledge base (basis data pengetahuan) berdasarkan topik atau pertanyaan pengguna. Gunakan ini untuk mendapatkan detail tentang layanan (deskripsi umum, proses), kebijakan, jam operasional, atau informasi umum lainnya SEBELUM mencoba menjawab pertanyaan pengguna jika relevan. Hasil dari tool ini akan menjadi sumber informasi utama. JANGAN gunakan tool ini untuk mencari harga atau durasi spesifik, gunakan getProductServiceDetailsByNameTool untuk itu.',\n    inputSchema: KnowledgeLookupInputSchema,\n    outputSchema: KnowledgeChunkSchema,\n  },\n  async (input) => {\n    const queryLower = input.query.toLowerCase().trim();\n    let foundEntryData: KnowledgeBaseEntryType | null = null;\n    let highestMatchScore = 0;\n    let matchedTopicDisplay = input.query;\n\n    try {\n      const kbCollectionRef = collection(db, 'knowledge_base_entries');\n      const q = firestoreQuery(kbCollectionRef, where(\"isActive\", \"==\", true), orderBy('topic'));\n      const snapshot = await getDocs(q);\n      \n      if (snapshot.empty) {\n        console.log(\"KnowledgeLookupTool: No active entries found in 'knowledge_base_entries' collection.\");\n        return { topic: input.query, information: \"Maaf, sumber pengetahuan kami saat ini belum terisi atau tidak ada entri yang aktif.\", found: false };\n      }\n\n      const allEntries: KnowledgeBaseEntryType[] = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      } as KnowledgeBaseEntryType));\n\n      for (const entry of allEntries) {\n        if (!entry.isActive) continue; // Lewati entri yang tidak aktif\n\n        const entryTopicLower = entry.topic.toLowerCase();\n        const entryKeywordsLower = entry.keywords?.map(kw => kw.toLowerCase()) || [];\n        \n        let currentScore = 0;\n        \n        // Skor berdasarkan kecocokan topik\n        if (entryTopicLower === queryLower) { // Cocok persis dengan topik\n          currentScore = entryTopicLower.length * 3; // Skor tinggi untuk cocok persis topik\n        } else if (queryLower.includes(entryTopicLower)) { // Query mengandung nama topik\n          currentScore = entryTopicLower.length * 1.5;\n        } else if (entryTopicLower.includes(queryLower)) { // Nama topik mengandung query\n          currentScore = queryLower.length * 1.2;\n        }\n        \n        // Skor berdasarkan kecocokan kata kunci\n        entryKeywordsLower.forEach(keyword => {\n          if (queryLower.includes(keyword)) {\n            currentScore += keyword.length * 2; // Skor lebih tinggi untuk kata kunci\n          }\n        });\n        \n        // Skor berdasarkan kata-kata dalam query yang ada di topik atau keywords\n        const queryWords = queryLower.split(/\\s+/).filter(w => w.length > 2);\n        queryWords.forEach(word => {\n          if (entryTopicLower.includes(word)) {\n            currentScore += word.length * 0.5;\n          }\n          if (entryKeywordsLower.some(kw => kw.includes(word))) {\n            currentScore += word.length * 0.8;\n          }\n        });\n\n        if (currentScore > highestMatchScore) {\n          foundEntryData = entry;\n          matchedTopicDisplay = entry.topic;\n          highestMatchScore = currentScore;\n        }\n      }\n      \n      if (foundEntryData) {\n        console.log(`KnowledgeLookupTool: Info found for query \"${input.query}\" (matched topic: \"${matchedTopicDisplay}\") from Firestore. Score: ${highestMatchScore}`);\n        return { topic: matchedTopicDisplay, information: foundEntryData.content, found: true };\n      } else {\n        console.log(`KnowledgeLookupTool: No relevant active info found for query \"${input.query}\" in Firestore.`);\n        return { topic: input.query, information: \"Maaf, informasi detail mengenai topik tersebut tidak ditemukan saat ini di knowledge base kami.\", found: false };\n      }\n\n    } catch (error) {\n      console.error(\"KnowledgeLookupTool: Error fetching from Firestore:\", error);\n      return { topic: input.query, information: \"Maaf, terjadi kesalahan saat mengakses sumber pengetahuan kami.\", found: false };\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/ai/cs-whatsapp-reply.ts"],"sourcesContent":["\nimport { z } from 'genkit';\n\nexport const ChatMessageSchema = z.object({\n  role: z.enum(['user', 'model']), // 'user' for customer/CS agent, 'model' for AI's previous replies\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchema>;\n\nexport const WhatsAppReplyInputSchema = z.object({\n  customerMessage: z.string().describe('Pesan yang diterima dari pelanggan melalui WhatsApp, atau pertanyaan dari staf CS.'),\n  chatHistory: z.array(ChatMessageSchema).optional().describe('Riwayat percakapan sebelumnya antara pelanggan dan AI/staf CS.'),\n  agentBehavior: z.string().optional().describe('Perilaku agen AI yang diinginkan, mis. \"Ramah & Membantu\".'),\n  knowledgeBase: z.string().optional().describe('Panduan tingkat tinggi untuk AI. Detail pengetahuan spesifik akan diambil melalui tools.'),\n});\nexport type WhatsAppReplyInput = z.infer<typeof WhatsAppReplyInputSchema>;\n\nexport const WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>;\n"],"names":[],"mappings":";;;;;AACA;AAAA;;AAEO,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAGO,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,mBAAmB,QAAQ,GAAG,QAAQ,CAAC;IAC5D,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAChD;AAGO,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC","debugId":null}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiSettings.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const AI_AGENT_BEHAVIORS = [\n  \"Ramah & Membantu\",\n  \"Profesional & To-the-point\",\n  \"Humoris & Santai\",\n  \"Empatik & Sabar\",\n] as const;\nexport type AiAgentBehavior = typeof AI_AGENT_BEHAVIORS[number];\n\nexport const AI_TRANSFER_CONDITIONS = [\n  \"Pelanggan Meminta Secara Eksplisit\",\n  \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\",\n  \"Terdeteksi Emosi Negatif dari Pelanggan\",\n  \"Disebut Kata Kunci Eskalasi (mis. 'manajer', 'komplain')\",\n  \"Setelah 5 Pertanyaan Tanpa Solusi\",\n] as const;\nexport type AiTransferCondition = typeof AI_TRANSFER_CONDITIONS[number];\n\nconst FollowUpDelaysSchema = z.object({\n  firstAttemptHours: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Jam harus angka.\"}).min(1, \"Minimal 1 jam.\").max(168, \"Maksimal 168 jam (7 hari).\").optional()\n  ),\n  secondAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  thirdAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  fourthAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(90, \"Maksimal 90 hari.\").optional()\n  ),\n});\n\nexport const AiSettingsFormSchema = z.object({\n  agentBehavior: z.enum(AI_AGENT_BEHAVIORS, {\n    required_error: \"Perilaku agen AI harus dipilih.\",\n  }),\n  welcomeMessage: z.string().min(10, \"Pesan selamat datang minimal 10 karakter.\").max(300, \"Pesan selamat datang maksimal 300 karakter.\"),\n  transferConditions: z.array(z.enum(AI_TRANSFER_CONDITIONS)).min(1, \"Minimal satu kondisi transfer harus dipilih.\"),\n  knowledgeBaseDescription: z.string().max(10000, \"Deskripsi sumber pengetahuan maksimal 10000 karakter.\").optional().describe(\"Panduan tingkat tinggi untuk AI. Detail pengetahuan akan diambil melalui tools.\"),\n  enableFollowUp: z.boolean().default(false).describe(\"Aktifkan fitur follow-up otomatis untuk pelanggan yang pernah menghubungi via WhatsApp namun belum melakukan kunjungan atau transaksi. Follow-up berhenti jika pelanggan tercatat datang/bertransaksi.\"),\n  followUpMessageTemplate: z.string().max(300, \"Template pesan follow-up maksimal 300 karakter.\").optional(),\n  followUpDelays: FollowUpDelaysSchema.optional(),\n}).superRefine((data, ctx) => {\n  if (data.enableFollowUp) {\n    if (!data.followUpMessageTemplate || data.followUpMessageTemplate.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Template pesan follow-up diperlukan jika fitur follow-up aktif.\",\n        path: [\"followUpMessageTemplate\"],\n      });\n    }\n    if (!data.followUpDelays?.firstAttemptHours) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Penundaan follow-up pertama (jam) diperlukan.\",\n        path: [\"followUpDelays\", \"firstAttemptHours\"],\n      });\n    }\n  }\n});\n\nexport type AiSettingsFormValues = z.infer<typeof AiSettingsFormSchema>;\nexport type FollowUpDelaysValues = z.infer<typeof FollowUpDelaysSchema>;\n\n\nexport const DEFAULT_AI_SETTINGS: AiSettingsFormValues = {\n  agentBehavior: \"Humoris & Santai\",\n  welcomeMessage: \"Selamat datang di QLAB Auto Detailing! Ada yang bisa saya bantu hari ini?\",\n  transferConditions: [\"Pelanggan Meminta Secara Eksplisit\", \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\"],\n  knowledgeBaseDescription: `Anda adalah asisten AI untuk QLAB Auto Detailing. Tugas utama Anda adalah membantu pelanggan dan staf. Gunakan tools yang tersedia untuk mencari informasi produk, layanan, klien, atau detail dari knowledge base. Prioritaskan penggunaan 'getKnowledgeBaseInfoTool' untuk pertanyaan umum atau detail kebijakan, dan 'getProductServiceDetailsByNameTool' untuk harga/durasi spesifik.`,\n  enableFollowUp: false,\n  followUpMessageTemplate: \"Halo Kak, kami perhatikan Anda sempat menghubungi kami beberapa waktu lalu. Apakah ada rencana untuk berkunjung ke bengkel kami? Ada promo menarik lho!\",\n  followUpDelays: {\n    firstAttemptHours: 24,\n    secondAttemptDays: 7,\n    thirdAttemptDays: 7,\n    fourthAttemptDays: 30,\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 835, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Flow AI untuk membantu membuat balasan pesan WhatsApp customer service.\n * Dilengkapi dengan kemampuan untuk mencari informasi produk/layanan dan data klien,\n * serta menggunakan pengaturan agen AI dinamis dari Firestore dan riwayat percakapan.\n * Menggunakan pendekatan RAG sederhana untuk informasi dari knowledge base.\n *\n * - generateWhatsAppReply - Fungsi yang menghasilkan draf balasan.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { getProductServiceDetailsByNameTool } from '@/ai/tools/productLookupTool';\nimport { getClientDetailsTool } from '@/ai/tools/clientLookupTool';\nimport { getKnowledgeBaseInfoTool } from '@/ai/tools/knowledgeLookupTool'; // Tool RAG baru\nimport type { WhatsAppReplyInput, WhatsAppReplyOutput, ChatMessage } from '@/types/ai/cs-whatsapp-reply';\nimport { WhatsAppReplyInputSchema, WhatsAppReplyOutputSchema } from '@/types/ai/cs-whatsapp-reply';\nimport { z } from 'genkit';\n\nimport { db } from '@/lib/firebase';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { AiSettingsFormSchema, DEFAULT_AI_SETTINGS, type AiSettingsFormValues } from '@/types/aiSettings';\n\n\nexport async function generateWhatsAppReply({ customerMessage, chatHistory }: { customerMessage: string; chatHistory?: ChatMessage[] }): Promise<WhatsAppReplyOutput> {\n  let agentSettings = { ...DEFAULT_AI_SETTINGS };\n\n  try {\n    const settingsDocRef = doc(db, 'appSettings', 'aiAgentConfig');\n    const docSnap = await getDoc(settingsDocRef);\n    if (docSnap.exists()) {\n      const rawSettingsData = docSnap.data();\n      const parsedSettings = AiSettingsFormSchema.safeParse(rawSettingsData);\n      if (parsedSettings.success) {\n        agentSettings = { ...DEFAULT_AI_SETTINGS, ...parsedSettings.data };\n        console.log(\"AI Settings loaded and validated from Firestore:\", agentSettings);\n      } else {\n        console.warn(\"AI Settings in Firestore are invalid, using defaults. Validation errors:\", parsedSettings.error.format());\n      }\n    } else {\n      console.log(\"AI Settings not found in Firestore, using defaults.\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching AI settings from Firestore, using defaults:\", error);\n  }\n\n  const flowInput: WhatsAppReplyInput = {\n    customerMessage: customerMessage,\n    chatHistory: chatHistory || [], // Pastikan chatHistory selalu array\n    agentBehavior: agentSettings.agentBehavior || '', // Fallback ke string kosong\n    knowledgeBase: agentSettings.knowledgeBaseDescription || '', // Fallback ke string kosong\n  };\n\n  return whatsAppReplyFlow(flowInput);\n}\n\nconst replyPrompt = ai.definePrompt({\n  name: 'whatsAppReplyPrompt',\n  input: { schema: WhatsAppReplyInputSchema },\n  output: { schema: WhatsAppReplyOutputSchema },\n  tools: [getKnowledgeBaseInfoTool, getProductServiceDetailsByNameTool, getClientDetailsTool], // Tambahkan tool RAG\n  prompt: `Anda adalah seorang Customer Service Assistant AI untuk QLAB Auto Detailing, sebuah bengkel perawatan dan detailing motor.\nPerilaku Anda harus: {{{agentBehavior}}}.\nPanduan umum untuk Anda: {{{knowledgeBase}}}\n\n{{#each chatHistory}}\n  {{#if @first}}\nBerikut adalah riwayat percakapan sebelumnya:\n  (JANGAN mengulang sapaan \"Halo\" jika sudah ada riwayat):\n  {{/if}}\n  {{this.role}}: {{{this.content}}}\n{{/each}}\n\nPesan BARU dari Pelanggan (atau pertanyaan dari Staf CS yang perlu Anda bantu jawab):\n{{{customerMessage}}}\n\nAlur Kerja Utama Anda:\n1.  **Analisa Pesan Pelanggan:** Pahami apa yang dibutuhkan pelanggan.\n2.  **Ambil Informasi dari Knowledge Base (JIKA PERLU):**\n    *   Jika pelanggan bertanya tentang informasi umum layanan (bukan harga/durasi spesifik), kebijakan, jam buka, alamat, atau topik umum lainnya, PERTAMA-TAMA gunakan tool \\`getKnowledgeBaseInfoTool\\` untuk mencari informasi relevan.\n    *   Parameter 'query' untuk tool ini bisa berupa inti pertanyaan pelanggan atau topik spesifik yang Anda identifikasi (mis. \"coating motor\", \"jam buka\", \"garansi\").\n3.  **Ambil Detail Produk/Layanan (JIKA PERLU untuk HARGA/DURASI):**\n    *   Jika pelanggan bertanya tentang HARGA atau DURASI layanan spesifik, ATAU jika informasi dari \\`getKnowledgeBaseInfoTool\\` menyarankan perlunya detail lebih lanjut (misalnya, \"untuk harga Coating, tanyakan jenis motor\"), gunakan tool \\`getProductServiceDetailsByNameTool\\`.\n    *   Sebelum memanggil tool ini, pastikan Anda memiliki informasi yang cukup (seperti jenis motor atau jenis cat jika diperlukan, sesuai instruksi dari \\`getKnowledgeBaseInfoTool\\` atau logika umum). Jika belum, TANYAKAN dulu ke pelanggan.\n4.  **Ambil Data Klien (JIKA PERLU):**\n    *   Jika pesan pelanggan berkaitan dengan data pribadi mereka (poin, motor terdaftar, dll.), gunakan tool \\`getClientDetailsTool\\`.\n5.  **Sintesis Jawaban:**\n    *   Gunakan informasi yang Anda dapatkan dari semua tool yang dipanggil (jika ada) dan riwayat percakapan untuk menyusun balasan yang informatif dan membantu.\n    *   Jika tool tidak menemukan informasi yang dibutuhkan, sampaikan dengan sopan. JANGAN menebak-nebak.\n\nAturan Tambahan:\n*   **Sapaan Awal dari Pelanggan**:\n    *   Jika pesan pelanggan adalah sapaan umum (misalnya \"Halo\", \"Siang\", \"Pagi\", \"Info dong\", \"Bro\") dan TIDAK mengandung pertanyaan spesifik:\n        *   Sapa balik dengan ramah sesuai {{{agentBehavior}}}.\n        *   Tanyakan secara umum apa yang bisa dibantu atau layanan apa yang mereka cari.\n        *   CONTOH BALASAN SAPAAN UMUM: \"Halo Kak! Ada yang bisa saya bantu untuk motornya hari ini? Lagi cari info cuci, detailing, coating, atau yang lain?\"\n        *   PENTING: JANGAN menggunakan tool APAPUN (termasuk \\`getKnowledgeBaseInfoTool\\`) pada tahap ini jika hanya sapaan umum.\n*   **Menanyakan Informasi Tambahan (Jenis Motor/Cat):**\n    *   Jika hasil dari \\`getKnowledgeBaseInfoTool\\` (misalnya tentang \"coating\") atau logika umum Anda menunjukkan bahwa jenis motor atau jenis cat diperlukan untuk menjawab pertanyaan layanan (misalnya, untuk harga coating atau poles), TANYAKAN informasi tersebut DULU SEBELUM memanggil \\`getProductServiceDetailsByNameTool\\` atau memberikan harga.\n    *   CONTOH TANYA JENIS MOTOR: \"Oke Kak. Untuk motor apa ya kira-kira? Biar saya bisa kasih info yang pas.\"\n    *   CONTOH TANYA JENIS CAT (untuk COATING): \"Siap! Untuk coatingnya, motor Kakak catnya doff (matte) atau glossy (mengkilap) ya?\"\n*   **Menyebutkan Harga/Durasi (dari \\`getProductServiceDetailsByNameTool\\`):**\n    *   HANYA setelah semua informasi yang diperlukan lengkap (misal jenis motor/cat sudah tahu) DAN \\`getProductServiceDetailsByNameTool\\` berhasil mengembalikan data:\n        *   Sebutkan NAMA LAYANAN LENGKAP.\n        *   Jelaskan secara ringkas APA SAJA YANG TERMASUK (berdasarkan field \\`description\\` dari tool produk/layanan, JANGAN dari \\`getKnowledgeBaseInfoTool\\` jika sudah memanggil tool produk).\n        *   Sebutkan ESTIMASI DURASI (field \\`estimatedDuration\\` dari tool produk/layanan).\n        *   LANGSUNG SEBUTKAN HARGA (field \\`price\\` dari tool produk/layanan), format sebagai Rupiah (Rp).\n    *   Jika \\`getProductServiceDetailsByNameTool\\` gagal dan tidak ada harga/durasi spesifik: Informasikan dengan sopan. JANGAN menebak harga.\n*   **Jika Tool Gagal**: Jika tool \\`getKnowledgeBaseInfoTool\\` atau \\`getProductServiceDetailsByNameTool\\` mengembalikan bahwa informasi tidak ditemukan, sampaikan itu ke pelanggan. Jangan mencoba memanggil tool yang sama lagi untuk query yang mirip dalam giliran yang sama.\n\nUmum:\n*   Gunakan bahasa Indonesia yang baku, ramah, dan sesuai {{{agentBehavior}}}.\n*   Buat balasan ringkas, jika banyak info, gunakan poin-poin.\n*   Selalu akhiri dengan sapaan yang sopan atau kalimat penutup yang positif, KECUALI jika Anda sedang melanjutkan percakapan yang sudah berjalan.\n\nHasilkan hanya teks balasannya saja. Jangan menyebutkan nama tool yang Anda gunakan dalam balasan ke pelanggan.\nPastikan balasan Anda tetap ramah dan profesional.\n`,\n});\n\nconst whatsAppReplyFlow = ai.defineFlow(\n  {\n    name: 'whatsAppReplyFlow',\n    inputSchema: WhatsAppReplyInputSchema,\n    outputSchema: WhatsAppReplyOutputSchema,\n  },\n  async (input: WhatsAppReplyInput) => {\n    console.log(\"WhatsAppReplyFlow input received by flow:\", JSON.stringify(input, null, 2));\n\n    const {output} = await replyPrompt(input);\n\n    if (!output) {\n      throw new Error('Gagal mendapatkan saran balasan dari AI.');\n    }\n    console.log(\"WhatsAppReplyFlow output:\", output);\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AACA;AACA,iPAA2E,gBAAgB;AAE3F;AAGA;AACA;AAAA;AACA;;;;;;;;;;;;AAGO,eAAe,sBAAsB,EAAE,eAAe,EAAE,WAAW,EAA4D;IACpI,IAAI,gBAAgB;QAAE,GAAG,0HAAA,CAAA,sBAAmB;IAAC;IAE7C,IAAI;QACF,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,KAAE,EAAE,eAAe;QAC9C,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QAC7B,IAAI,QAAQ,MAAM,IAAI;YACpB,MAAM,kBAAkB,QAAQ,IAAI;YACpC,MAAM,iBAAiB,0HAAA,CAAA,uBAAoB,CAAC,SAAS,CAAC;YACtD,IAAI,eAAe,OAAO,EAAE;gBAC1B,gBAAgB;oBAAE,GAAG,0HAAA,CAAA,sBAAmB;oBAAE,GAAG,eAAe,IAAI;gBAAC;gBACjE,QAAQ,GAAG,CAAC,oDAAoD;YAClE,OAAO;gBACL,QAAQ,IAAI,CAAC,4EAA4E,eAAe,KAAK,CAAC,MAAM;YACtH;QACF,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8DAA8D;IAC9E;IAEA,MAAM,YAAgC;QACpC,iBAAiB;QACjB,aAAa,eAAe,EAAE;QAC9B,eAAe,cAAc,aAAa,IAAI;QAC9C,eAAe,cAAc,wBAAwB,IAAI;IAC3D;IAEA,OAAO,kBAAkB;AAC3B;AAEA,MAAM,cAAc,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClC,MAAM;IACN,OAAO;QAAE,QAAQ,6IAAA,CAAA,2BAAwB;IAAC;IAC1C,QAAQ;QAAE,QAAQ,6IAAA,CAAA,4BAAyB;IAAC;IAC5C,OAAO;QAAC,yIAAA,CAAA,2BAAwB;QAAE,uIAAA,CAAA,qCAAkC;QAAE,sIAAA,CAAA,uBAAoB;KAAC;IAC3F,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDX,CAAC;AACD;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa,6IAAA,CAAA,2BAAwB;IACrC,cAAc,6IAAA,CAAA,4BAAyB;AACzC,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,6CAA6C,KAAK,SAAS,CAAC,OAAO,MAAM;IAErF,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,YAAY;IAEnC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,QAAQ,GAAG,CAAC,6BAA6B;IACzC,OAAO;AACT;;;IAhHoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 995, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4042c47ea0c74421e840a6780974a2d92d185bfc6a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1053, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1081, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}