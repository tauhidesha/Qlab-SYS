{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase client...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  const errorMessage = \"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING. Check .env file.\";\n  console.error(errorMessage);\n  // Throwing an error is better than letting the app run in a broken state,\n  // but in a server component context, this might just crash the render.\n  // So, we log it aggressively.\n}\n\n// Simplified and more robust initialization\nconst app: FirebaseApp = getApps().length ? getApp() : initializeApp(firebaseConfig);\nconst db: Firestore = getFirestore(app);\n\nconsole.log(`[firebase.ts] Firebase client connected to project: ${app.options.projectId || 'UNKNOWN'}`);\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC;AACd,0EAA0E;AAC1E,uEAAuE;AACvE,8BAA8B;AAChC;AAEA,4CAA4C;AAC5C,MAAM,MAAmB,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACrE,MAAM,KAAgB,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;AAEnC,QAAQ,GAAG,CAAC,CAAC,oDAAoD,EAAE,IAAI,OAAO,CAAC,SAAS,IAAI,WAAW","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\n// The manual 'dotenv' call is removed to rely on Next.js's native .env handling, preventing potential conflicts.\n\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nif (!process.env.GOOGLE_API_KEY) {\n  const errorMessage = \"Kesalahan Konfigurasi: GOOGLE_API_KEY tidak ditemukan di environment variables. Ini dibutuhkan oleh plugin Google AI. Pastikan sudah di-set di file .env Anda.\";\n  console.error(`\\n\\nðŸ›‘ ${errorMessage}\\n\\n`);\n  throw new Error(errorMessage);\n}\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({ apiKey: process.env.GOOGLE_API_KEY }), // Explicitly provide the API key\n  ],\n  model: 'googleai/gemini-1.5-flash-latest',\n  // Telemetry options are no longer configured here in Genkit v1.x\n});\n"],"names":[],"mappings":"AACA,iHAAiH;;;;AAEjH,8MAAyB,uCAAuC;AAChE;AAAA;AACA;AAAA;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAE,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAC;KAC/C;IACD,OAAO;AAET","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/embed-text-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A simple flow to generate text embeddings.\n */\n\nimport { ai } from '@/ai/genkit';\n\n/**\n * Generates an embedding vector for a given piece of text.\n * @param text The text to embed.\n * @returns A promise that resolves to an array of numbers representing the embedding.\n */\nexport async function embedText(text: string): Promise<number[]> {\n  try {\n    const { embedding } = await ai.embed({\n      model: 'googleai/text-embedding-004',\n      content: text,\n    });\n    return embedding;\n  } catch (error) {\n    console.error(\"Error generating text embedding:\", error);\n    // Return an empty array or throw an error, depending on desired handling\n    throw new Error(\"Failed to generate text embedding.\");\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;CAEC,GAED;;;;;AAOO,eAAe,UAAU,IAAY;IAC1C,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,KAAK,CAAC;YACnC,OAAO;YACP,SAAS;QACX;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,yEAAyE;QACzE,MAAM,IAAI,MAAM;IAClB;AACF;;;IAZsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/services/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {embedText as '40fb659f9b18e8a5d14b6373a67023c25e58627d25'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/services/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/services/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/services/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/services/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/services/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/services/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}