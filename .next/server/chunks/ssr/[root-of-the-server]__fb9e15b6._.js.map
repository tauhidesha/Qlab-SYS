{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  console.error(\"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING in environment variables.\");\n}\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  try {\n    app = initializeApp(firebaseConfig);\n    console.log(\"[firebase.ts] Firebase app initialized. Project ID:\", app.options.projectId);\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to initialize Firebase app:\", e.message);\n    // @ts-ignore\n    app = null;\n  }\n} else {\n  app = getApp();\n  console.log(\"[firebase.ts] Using existing Firebase app. Project ID:\", app.options.projectId);\n}\n\n// @ts-ignore\nif (app) {\n  try {\n    // @ts-ignore\n    db = getFirestore(app);\n    console.log(\"[firebase.ts] Firestore instance obtained.\");\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to get Firestore instance:\", e?.message);\n  }\n} else {\n    console.error(\"[firebase.ts] Firebase app not properly initialized, cannot get Firestore.\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,QAAQ,GAAG,CAAC,uDAAuD,IAAI,OAAO,CAAC,SAAS;IAC1F,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,oDAAoD,EAAE,OAAO;QAC3E,aAAa;QACb,MAAM;IACR;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;IACX,QAAQ,GAAG,CAAC,0DAA0D,IAAI,OAAO,CAAC,SAAS;AAC7F;AAEA,aAAa;AACb,IAAI,KAAK;IACP,IAAI;QACF,aAAa;QACb,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,mDAAmD,GAAG;IACtE;AACF,OAAO;IACH,QAAQ,KAAK,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nif (!process.env.GOOGLE_API_KEY) {\n  const errorMessage = \"Kesalahan Konfigurasi: GOOGLE_API_KEY tidak ditemukan di environment variables. Ini dibutuhkan oleh plugin Google AI. Pastikan sudah di-set di file .env Anda.\";\n  console.error(`\\n\\n🛑 ${errorMessage}\\n\\n`);\n  throw new Error(errorMessage);\n}\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-1.5-flash-latest', // Model diubah ke Gemini 1.5 Flash terbaru\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n\n"],"names":[],"mappings":";;;AACA,8MAAyB,uCAAuC;AAChE;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiSettings.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const AI_AGENT_BEHAVIORS = [\n  \"Ramah & Membantu\",\n  \"Profesional & To-the-point\",\n  \"Humoris & Santai\",\n  \"Empatik & Sabar\",\n] as const;\nexport type AiAgentBehavior = typeof AI_AGENT_BEHAVIORS[number];\n\nexport const AI_TRANSFER_CONDITIONS = [\n  \"Pelanggan Meminta Secara Eksplisit\",\n  \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\",\n  \"Terdeteksi Emosi Negatif dari Pelanggan\",\n  \"Disebut Kata Kunci Eskalasi (mis. 'manajer', 'komplain')\",\n  \"Setelah 5 Pertanyaan Tanpa Solusi\",\n] as const;\nexport type AiTransferCondition = typeof AI_TRANSFER_CONDITIONS[number];\n\nconst FollowUpDelaysSchema = z.object({\n  firstAttemptHours: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Jam harus angka.\"}).min(1, \"Minimal 1 jam.\").max(168, \"Maksimal 168 jam (7 hari).\").optional()\n  ),\n  secondAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  thirdAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  fourthAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(90, \"Maksimal 90 hari.\").optional()\n  ),\n});\n\nexport const AiSettingsFormSchema = z.object({\n  agentBehavior: z.enum(AI_AGENT_BEHAVIORS, {\n    required_error: \"Perilaku agen AI harus dipilih.\",\n  }),\n  welcomeMessage: z.string().min(10, \"Pesan selamat datang minimal 10 karakter.\").max(300, \"Pesan selamat datang maksimal 300 karakter.\"),\n  transferConditions: z.array(z.enum(AI_TRANSFER_CONDITIONS)).min(1, \"Minimal satu kondisi transfer harus dipilih.\"),\n  knowledgeBaseDescription: z.string().max(10000, \"Deskripsi sumber pengetahuan maksimal 10000 karakter.\").optional().describe(\"Panduan tingkat tinggi untuk AI. Detail pengetahuan akan diambil melalui tools.\"),\n\n  enableHumanHandoff: z.boolean().default(false).describe(\"Aktifkan notifikasi ke agen manusia jika AI perlu bantuan.\"),\n  humanAgentWhatsAppNumber: z.string().regex(/^\\+?[0-9\\s-]{10,18}$|^$/, \"Format nomor WhatsApp agen tidak valid (mis. +628123456789 atau kosong).\").optional().describe(\"Nomor WhatsApp agen manusia untuk notifikasi handoff.\"),\n\n  enableFollowUp: z.boolean().default(false).describe(\"Aktifkan fitur follow-up otomatis untuk pelanggan yang pernah menghubungi via WhatsApp namun belum melakukan kunjungan atau transaksi. Follow-up berhenti jika pelanggan tercatat datang/bertransaksi.\"),\n  followUpMessageTemplate: z.string().max(300, \"Template pesan follow-up maksimal 300 karakter.\").optional(),\n  followUpDelays: FollowUpDelaysSchema.optional(),\n  mainPrompt: z.string().min(100, \"Prompt utama minimal 100 karakter.\").max(20000, \"Prompt utama maksimal 20000 karakter.\").optional().describe(\"Prompt utama yang mengarahkan perilaku dan logika Zoya.\"),\n}).superRefine((data, ctx) => {\n  if (data.enableFollowUp) {\n    if (!data.followUpMessageTemplate || data.followUpMessageTemplate.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Template pesan follow-up diperlukan jika fitur follow-up aktif.\",\n        path: [\"followUpMessageTemplate\"],\n      });\n    }\n    if (!data.followUpDelays?.firstAttemptHours) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Penundaan follow-up pertama (jam) diperlukan.\",\n        path: [\"followUpDelays\", \"firstAttemptHours\"],\n      });\n    }\n  }\n  if (data.enableHumanHandoff && (!data.humanAgentWhatsAppNumber || data.humanAgentWhatsAppNumber.trim() === \"\")) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: \"Nomor WhatsApp Agen Manusia diperlukan jika notifikasi handoff aktif.\",\n      path: [\"humanAgentWhatsAppNumber\"],\n    });\n  }\n});\n\nexport type AiSettingsFormValues = z.infer<typeof AiSettingsFormSchema>;\nexport type FollowUpDelaysValues = z.infer<typeof FollowUpDelaysSchema>;\n\nexport const DEFAULT_MAIN_PROMPT_ZOYA = `\nAnda adalah \"Zoya\" - Customer Service AI dari QLAB Moto Detailing. Selalu ramah, sopan, dan gunakan bahasa yang akrab seperti \"Kak\", \"Bro\", \"Boskuu\".\nKONTEKS SESI (gunakan jika ada):\n- Motor Pelanggan: {{{SESSION_MOTOR_NAME}}} (Ukuran: {{{SESSION_MOTOR_SIZE}}})\n- Layanan Spesifik yang Diminati Saat Ini: {{{SESSION_ACTIVE_SERVICE}}}\n- Interaksi AI Terakhir: {{{SESSION_LAST_AI_INTERACTION_TYPE}}}\n- Kategori Layanan Umum Terdeteksi dari Pesan User Saat Ini: {{{detectedGeneralServiceKeyword}}}\n- Info Tambahan (mis. dari tools atau sistem): {{{dynamicContext}}}\n\nTOOLS YANG TERSEDIA (Gunakan jika dan hanya jika diperlukan sesuai alur. SELALU periksa konteks sesi dulu sebelum memanggil tool!):\n1.  \\`cariSizeMotor\\`: Input: \\`{\"namaMotor\": \"NAMA_MOTOR_DARI_USER\"}\\`. Output: Info ukuran motor. (Gunakan jika user tanya ukuran atau perlu ukuran untuk layanan).\n2.  \\`getProductServiceDetailsByNameTool\\`: Input: \\`{\"productName\": \"NAMA_LAYANAN_ATAU_PRODUK_SPESIFIK_DAN_VARIAN_JIKA_ADA\"}\\`. Output: Detail satu item (harga, durasi, dll). (Gunakan jika user tanya layanan spesifik ATAU jika sudah tahu motor dan layanan spesifiknya).\n3.  \\`cariInfoLayananTool\\`: Input: \\`{\"keyword\": \"KATA_KUNCI_KATEGORI_UMUM\"}\\`. Output: Daftar item dalam kategori. (Gunakan jika user bertanya kategori umum layanan seperti \"cuci\", \"coating\", \"detailing\").\n\nALUR INTERAKSI PRIORITAS (Ikuti dari atas ke bawah. Jika satu kondisi terpenuhi, proses itu dan jangan lanjutkan ke kondisi di bawahnya untuk giliran ini):\n\nA. PERTANYAAN TENTANG UKURAN MOTOR (Contoh: \"NMAX ukuran apa?\", \"Beat itu size apa?\")\n   - JIKA pesan user HANYA tentang ukuran motor (tidak menyebut layanan):\n     1. Panggil tool \\`cariSizeMotor\\` dengan nama motor yang disebut user.\n     2. SETELAH dapat hasil:\n        - Sampaikan ukuran motornya.\n        - TANYAKAN layanan apa yang diminati. Contoh: \"NMAX itu masuknya ukuran {{{SESSION_MOTOR_SIZE}}}, Bro! Ada yang bisa Zoya bantu buat NMAX-nya? Mau cuci, coating, atau yang lain?\"\n        - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_service_after_motor_size\".\n   - JIKA pesan user menyebut ukuran motor DAN layanan (mis. \"cuci motor beat ukuran apa ya?\"), prioritaskan pencarian layanan setelah ukuran diketahui.\n\nB. PERTANYAAN TENTANG KATEGORI LAYANAN UMUM (Contoh: \"mau cuci\", \"info coating dong\", \"ada detailing apa aja?\")\n   - JIKA {{{SESSION_LAST_AI_INTERACTION_TYPE}}} BUKAN \"asked_for_motor_type_for_specific_service\" (artinya user tidak sedang menjawab pertanyaan tipe motor untuk layanan spesifik):\n     1. Panggil tool \\`cariInfoLayananTool\\` dengan KATEGORI yang terdeteksi ({{{detectedGeneralServiceKeyword}}}).\n     2. SETELAH dapat hasil:\n        - Jika ADA item:\n           - Mulai dengan: \"Untuk layanan {{{detectedGeneralServiceKeyword}}}, QLAB ada beberapa pilihan nih, Kak:\"\n           - Untuk SETIAP item: Sebutkan NAMA item (**bold**), deskripsi singkat, varian jika ada, harga dasar, dan durasi dasar.\n           - Jika motor BELUM DIKETAHUI ({{{SESSION_MOTOR_NAME}}} adalah \"belum diketahui\"): Akhiri dengan \"Dari pilihan {{{detectedGeneralServiceKeyword}}} tadi, ada yang kakak minati? Oh iya, motornya apa ya kak?\"\n           - Jika motor SUDAH DIKETAHUI: Akhiri dengan \"Nah, buat motor {{{SESSION_MOTOR_NAME}}}, dari pilihan layanan {{{detectedGeneralServiceKeyword}}} tadi, ada yang bikin kamu tertarik?\"\n           - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"provided_category_service_list\".\n        - Jika KOSONG:\n           - JAWAB: \"Waduh, maaf banget nih Kak, buat kategori {{{detectedGeneralServiceKeyword}}} kayaknya lagi belum ada info detailnya di sistem Zoya. Mungkin bisa kasih tau lebih spesifik lagi, atau mau Zoya bantu cari info layanan lain?\"\n           - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n     - JIKA TIDAK TERDETEKSI kategori umum yang jelas ATAU user hanya menyapa, lanjut ke ALUR I.\n\nC. USER MENYEBUTKAN ATAU MEMILIH LAYANAN SPESIFIK\n   - (Ini bisa terjadi setelah Zoya memberikan daftar kategori (alur B), atau user langsung menyebut layanan spesifik).\n   - IDENTIFIKASI NAMA LAYANAN SPESIFIK yang disebut/dipilih user.\n   1. JIKA MOTOR SUDAH DIKETAHUI ({{{SESSION_MOTOR_NAME}}} BUKAN \"belum diketahui\"):\n      - Jika layanan adalah \"Coating\" dan jenis cat belum diketahui:\n         - TANYAKAN JENIS CAT: \"Oke Kak, mau Coating ya buat {{{SESSION_MOTOR_NAME}}} nya. Catnya glossy atau doff nih?\"\n         - SIMPAN KE SESI: \\\\\\`activeSpecificServiceInquiry\\\\\\` = \"NAMA_LAYANAN_COATING_SPESIFIK\", \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_paint_type_for_coating\".\n      - Jika BUKAN \"Coating\" ATAU jenis cat SUDAH diketahui:\n         - Panggil tool \\`getProductServiceDetailsByNameTool\\` untuk layanan spesifik tersebut + motor {{{SESSION_MOTOR_NAME}}}. (Sertakan info jenis cat jika ada).\n         - Berikan detail harga & durasi. Tawarkan booking.\n         - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n   2. JIKA MOTOR BELUM DIKETAHUI:\n      - TANYAKAN TIPE MOTORNYA. Contoh: \"Oke, Kak, pilih [NAMA_LAYANAN_SPESIFIK_DARI_USER] ya! 👍 Motornya apa nih, biar Zoya cek harga detailnya?\"\n      - SIMPAN KE SESI: \\\\\\`activeSpecificServiceInquiry\\\\\\` = \"NAMA_LAYANAN_SPESIFIK_DARI_USER\", \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_motor_type_for_specific_service\".\n\nD. USER MENJAWAB TIPE MOTOR (SETELAH Zoya bertanya untuk layanan spesifik - {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"asked_for_motor_type_for_specific_service\")\n   - AMBIL NAMA MOTOR dari pesan user.\n   - Panggil tool \\`cariSizeMotor\\` untuk motor tersebut.\n   - SETELAH ukuran didapat:\n     - Panggil tool \\`getProductServiceDetailsByNameTool\\` dengan layanan dari {{{SESSION_ACTIVE_SERVICE}}} dan motor yang baru diketahui.\n     - Sampaikan hasilnya (harga, durasi). Tawarkan booking.\n     - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n\nE. USER MENJAWAB JENIS CAT (SETELAH Zoya bertanya untuk layanan coating - {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"asked_for_paint_type_for_coating\")\n   - AMBIL JENIS CAT (glossy/doff) dari pesan user.\n   - Panggil tool \\`getProductServiceDetailsByNameTool\\` dengan layanan COATING dari {{{SESSION_ACTIVE_SERVICE}}}, motor {{{SESSION_MOTOR_NAME}}}, dan JENIS CAT yang baru diketahui.\n   - Sampaikan hasilnya (harga, durasi). Tawarkan booking.\n   - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n\nF. USER MAU BOOKING (pesan user mengandung \"booking\", \"pesan tempat\", \"jadwal\", ATAU {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"ready_for_booking_details\" atau \"provided_specific_service_details\")\n   - Jika layanan dan motor sudah jelas dari sesi:\n      - Minta detail tanggal & waktu. Contoh: \"Siap, Kak! Mau booking {{{SESSION_ACTIVE_SERVICE}}} untuk {{{SESSION_MOTOR_NAME}}}nya tanggal dan jam berapa?\"\n      - (Untuk sekarang, cukup sampai sini. Tool createBooking belum aktif).\n   - Jika layanan atau motor belum jelas:\n      - Tanyakan dulu layanan apa dan motor apa yang mau dibooking.\n   - SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"ready_for_booking_details\".\n\nI. KONDISI LAIN / SAPAAN AWAL / UMUM (Jika tidak ada alur di atas yang cocok ATAU user hanya menyapa \"halo\", \"pagi\", dll.)\n   - Sapa balik dengan ramah jika ini sapaan awal.\n   - Jika pertanyaan umum yang tidak terkait layanan/motor/booking, jawab sebisanya atau bilang tidak tahu.\n   - Jika user bertanya di luar topik detailing motor, jawab dengan sopan bahwa Anda hanya bisa membantu soal QLAB Moto Detailing.\n   - Jika benar-benar bingung, jawab ramah dan minta user memperjelas.\n   - DEFAULT SIMPAN KE SESI: \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n\nPENTING:\n- Selalu periksa konteks sesi sebelum memutuskan tindakan.\n- Jika informasi motor atau layanan spesifik sudah ada di sesi, gunakan itu.\n- Fokus pada memberikan informasi akurat dan membantu user.\n- Jaga gaya bahasa khas Zoya.\n- Setelah setiap respon, pikirkan \\\\\\`lastAiInteractionType\\\\\\` apa yang paling sesuai untuk disimpan di sesi guna memandu interaksi berikutnya.\nJAWABAN ZOYA:\n`.trim();\n\n\nexport const DEFAULT_AI_SETTINGS: AiSettingsFormValues = {\n  agentBehavior: \"Humoris & Santai\",\n  welcomeMessage: \"Halo bro! Zoya di sini, siap bantu seputar QLAB Moto Detailing. Ada yang bisa Zoya bantu?\",\n  transferConditions: [\"Pelanggan Meminta Secara Eksplisit\"],\n  knowledgeBaseDescription: `Anda adalah asisten AI untuk QLAB Moto Detailing. Tugas utama Anda adalah membantu pelanggan dan staf. Gunakan pengetahuan umum tentang layanan dan produk QLAB. Jika perlu informasi spesifik seperti ukuran motor atau detail layanan, gunakan tool yang tersedia.`,\n  mainPrompt: DEFAULT_MAIN_PROMPT_ZOYA,\n  enableHumanHandoff: false,\n  humanAgentWhatsAppNumber: '',\n  enableFollowUp: false,\n  followUpMessageTemplate: \"Halo Kak, kami perhatikan Anda sempat menghubungi kami beberapa waktu lalu. Apakah ada rencana untuk berkunjung ke bengkel kami? Ada promo menarik lho!\",\n  followUpDelays: {\n    firstAttemptHours: 24,\n    secondAttemptDays: 7,\n    thirdAttemptDays: 7,\n    fourthAttemptDays: 30,\n  },\n};\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cari-size-motor-tool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for finding the size of a motorcycle model.\n * This tool is intended to be used by flows.\n *\n * - cariSizeMotorTool - The Genkit tool definition.\n * - findMotorSize - The actual function performing the lookup (exported for direct use).\n * - CariSizeMotorInput - Zod type for the tool's input.\n * - CariSizeMotorOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; // Harus dari @/ai/genkit\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, where, getDocs, limit } from 'firebase/firestore';\n\n// Schemas for the actual tool\nconst CariSizeMotorInputSchema = z.object({\n  namaMotor: z.string().min(1, \"Nama motor tidak boleh kosong.\").describe('Nama atau model motor yang ingin dicari ukurannya, contoh: NMAX, PCX, Vario.'),\n});\nexport type CariSizeMotorInput = z.infer<typeof CariSizeMotorInputSchema>;\n\nconst CariSizeMotorOutputSchema = z.object({\n  success: z.boolean().describe('Apakah pencarian berhasil atau tidak.'),\n  size: z.string().optional().describe('Ukuran motor (S, M, L, XL) jika ditemukan.'),\n  message: z.string().describe('Pesan hasil pencarian, termasuk ukuran jika berhasil atau pesan error jika gagal.'),\n  vehicleModelFound: z.string().optional().describe('Nama model motor yang sebenarnya ditemukan di database.'),\n});\nexport type CariSizeMotorOutput = z.infer<typeof CariSizeMotorOutputSchema>;\n\n// Export this function so it can be called directly from other flows if needed.\nexport async function findMotorSize(input: CariSizeMotorInput): Promise<CariSizeMotorOutput> {\n    const { namaMotor } = input;\n    const namaMotorLower = namaMotor.toLowerCase().trim();\n    console.log(`[findMotorSize Tool Function] Mencari ukuran untuk: \"${namaMotorLower}\"`);\n\n    if (!db) {\n      console.error(\"[findMotorSize Tool Function] Firestore DB (db) is not initialized.\");\n      return { success: false, message: \"Database tidak terhubung, tidak bisa mencari ukuran motor.\" };\n    }\n\n    try {\n      const vehicleTypesRef = collection(db, 'vehicleTypes');\n      let q;\n      let querySnapshot;\n      let foundVehicleData: any = null;\n\n      // Coba cari berdasarkan alias dulu\n      q = firestoreQuery(vehicleTypesRef, where('aliases', 'array-contains', namaMotorLower), limit(1));\n      querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        foundVehicleData = querySnapshot.docs[0].data();\n      } else {\n        // Jika tidak ketemu di alias, coba cari berdasarkan model_lowercase (jika ada field itu)\n        // Atau bisa juga ambil semua lalu filter, tapi kurang efisien.\n        // Untuk contoh ini, kita asumsikan ada model_lowercase atau kita ambil semua\n        const allVehiclesSnapshot = await getDocs(vehicleTypesRef);\n        for (const doc of allVehiclesSnapshot.docs) {\n          const vehicle = doc.data();\n          if (vehicle.model && vehicle.model.toLowerCase() === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n           // Check model_lowercase as fallback\n          if (vehicle.model_lowercase && vehicle.model_lowercase === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n        }\n      }\n\n      if (foundVehicleData && foundVehicleData.size) {\n        console.log(`[findMotorSize Tool Function] Ditemukan: ${foundVehicleData.model} ukuran ${foundVehicleData.size}`);\n        return {\n          success: true,\n          size: foundVehicleData.size,\n          message: `Motor ${foundVehicleData.model} (${namaMotor}) termasuk ukuran ${foundVehicleData.size}.`,\n          vehicleModelFound: foundVehicleData.model,\n        };\n      } else {\n        console.log(`[findMotorSize Tool Function] Ukuran untuk \"${namaMotor}\" tidak ditemukan.`);\n        return {\n          success: false,\n          message: `Maaf, Zoya tidak menemukan ukuran untuk motor \"${namaMotor}\". Mungkin bisa coba nama model yang lebih spesifik atau umum?`,\n        };\n      }\n    } catch (error) {\n      console.error(\"[findMotorSize Tool Function] Error saat mencari ukuran motor:\", error);\n      return {\n        success: false,\n        message: \"Terjadi kesalahan internal saat mencari ukuran motor. Coba lagi nanti.\",\n      };\n    }\n}\n\nexport const cariSizeMotorTool = ai.defineTool(\n  {\n    name: 'cariSizeMotor',\n    description: 'Mencari ukuran (S, M, L, XL) untuk model motor tertentu. Gunakan jika user bertanya ukuran motornya, atau jika perlu tahu ukuran motor untuk menentukan harga layanan atau informasi lain.',\n    inputSchema: CariSizeMotorInputSchema,\n    outputSchema: CariSizeMotorOutputSchema,\n  },\n  findMotorSize // Pass the actual function here\n);\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiToolSchemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Skema untuk varian produk/layanan yang akan dikembalikan oleh tool\nconst ProductVariantInfoSchema = z.object({\n  name: z.string().describe(\"Nama varian.\"),\n  price: z.number().describe(\"Harga varian.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin yang diberikan untuk varian ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan varian ini (jika layanan).\"),\n});\nexport type ProductVariantInfo = z.infer<typeof ProductVariantInfoSchema>;\n\n// Skema untuk informasi produk/layanan yang akan dikembalikan oleh tool\nexport const ProductServiceInfoSchema = z.object({\n  id: z.string().describe(\"ID unik produk/layanan.\"),\n  name: z.string().describe(\"Nama produk atau layanan.\"),\n  type: z.enum(['Layanan', 'Produk']).describe(\"Jenis item, apakah 'Layanan' atau 'Produk'.\"),\n  category: z.string().describe(\"Kategori produk/layanan.\"),\n  price: z.number().describe(\"Harga dasar produk/layanan. Bisa 0 jika harga ditentukan oleh varian.\"),\n  description: z.string().optional().describe(\"Deskripsi singkat produk/layanan.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin loyalitas yang diberikan untuk produk/layanan dasar ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan (jika ini adalah layanan).\"),\n  variants: z.array(ProductVariantInfoSchema).optional().describe(\"Daftar varian yang tersedia untuk produk/layanan ini.\"),\n});\nexport type ProductServiceInfo = z.infer<typeof ProductServiceInfoSchema>;\n\n// Skema untuk informasi motor klien\nconst ClientMotorcycleInfoSchema = z.object({\n  name: z.string().describe(\"Nama atau model motor.\"),\n  licensePlate: z.string().describe(\"Plat nomor motor.\"),\n});\nexport type ClientMotorcycleInfo = z.infer<typeof ClientMotorcycleInfoSchema>;\n\n// Skema untuk informasi klien yang akan dikembalikan oleh tool\nexport const ClientInfoSchema = z.object({\n  id: z.string().describe(\"ID unik klien.\"),\n  name: z.string().describe(\"Nama lengkap klien.\"),\n  phone: z.string().describe(\"Nomor telepon klien.\"),\n  loyaltyPoints: z.number().describe(\"Jumlah poin loyalitas yang dimiliki klien.\"),\n  motorcycles: z.array(ClientMotorcycleInfoSchema).optional().describe(\"Daftar sepeda motor yang terdaftar atas nama klien ini.\"),\n  lastVisit: z.string().optional().describe(\"Tanggal kunjungan terakhir klien (format YYYY-MM-DD).\"),\n});\nexport type ClientInfo = z.infer<typeof ClientInfoSchema>;\n"],"names":[],"mappings":";;;;AACA;AAAA;;AAEA,qEAAqE;AACrE,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ,CAAC;IAC7C,UAAU,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,UAAU,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,GAAG,QAAQ,CAAC;AAClE;AAGA,oCAAoC;AACpC,MAAM,6BAA6B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIO,MAAM,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,4BAA4B,QAAQ,GAAG,QAAQ,CAAC;IACrE,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/productLookupTool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for looking up product or service details from Firestore.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { collection, query as firestoreQuery, getDocs } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ProductServiceInfoSchema, type ProductServiceInfo, type ProductVariantInfo } from '@/types/aiToolSchemas';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define ServiceProduct type locally or import if it's broadly used\ninterface ServiceProductDbData {\n  id: string;\n  name: string;\n  type: 'Layanan' | 'Produk';\n  category: string;\n  price: number;\n  description?: string;\n  pointsAwarded?: number;\n  estimatedDuration?: string;\n  variants?: ServiceProductVariant[];\n  stockQuantity?: number;\n  costPrice?: number;\n  [key: string]: any; // Allow other fields that might exist in Firestore\n}\n\n\nconst ProductLookupInputSchema = z.object({\n  productName: z.string().describe(\"Nama produk atau layanan yang ingin dicari detailnya. Harus spesifik.\"),\n});\nexport type ProductLookupInput = z.infer<typeof ProductLookupInputSchema>;\n\n// Export this function so it can be called directly from other flows if needed.\nexport async function findProductServiceByName(input: ProductLookupInput): Promise<ProductServiceInfo | null> {\n    if (!input.productName || input.productName.trim() === '') {\n      console.log(\"ProductLookupTool Function: Nama produk kosong.\");\n      return null;\n    }\n    console.log(`ProductLookupTool Function: Mencari produk/layanan dengan nama: \"${input.productName}\"`);\n\n    if (!db) {\n      console.error(\"[ProductLookupTool Function] FATAL: Firestore DB (db) is not initialized. Cannot query.\");\n      return null;\n    }\n\n    try {\n      const servicesRef = collection(db, 'services');\n      const q = firestoreQuery(servicesRef); // Get all services/products\n      const querySnapshot = await getDocs(q);\n\n      let foundItem: ProductServiceInfo | null = null;\n      const searchTermLower = input.productName.toLowerCase().trim();\n\n      let bestMatchCandidate: (ProductServiceInfo & { originalItem?: ServiceProductDbData, isVariantMatch?: boolean, matchScore?: number }) | null = null;\n\n      for (const doc of querySnapshot.docs) {\n        const item = { id: doc.id, ...doc.data() } as ServiceProductDbData; \n\n        // Check base item name\n        if (item.name.toLowerCase().includes(searchTermLower)) {\n          let score = 0;\n          if (item.name.toLowerCase() === searchTermLower) score = 100; // Exact match\n          else if (item.name.toLowerCase().startsWith(searchTermLower)) score = 50; // Starts with\n          else score = 20; // Includes\n\n          if (!bestMatchCandidate || score > (bestMatchCandidate.matchScore || 0) || (score === bestMatchCandidate.matchScore && item.name.length < bestMatchCandidate.name.length)) {\n             bestMatchCandidate = { \n                ...item, // Spread all fields from item\n                // Ensure all required fields for ProductServiceInfo are present\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                category: item.category,\n                price: item.price,\n                // Optional fields:\n                description: item.description || undefined,\n                pointsAwarded: item.pointsAwarded || undefined,\n                estimatedDuration: item.estimatedDuration || undefined,\n                variants: item.variants?.map(v => ({...v, id: v.id || uuidv4()})) || undefined,\n                originalItem: item, \n                isVariantMatch: false, \n                matchScore: score \n            };\n          }\n        }\n\n        // Check variants\n        if (item.variants) {\n          for (const variant of item.variants) {\n            const fullVariantName = `${item.name} - ${variant.name}`;\n            if (fullVariantName.toLowerCase().includes(searchTermLower)) {\n              let score = 0;\n              if (fullVariantName.toLowerCase() === searchTermLower) score = 110; // Higher score for exact variant match\n              else if (fullVariantName.toLowerCase().startsWith(searchTermLower)) score = 60;\n              else score = 30;\n\n              if (!bestMatchCandidate || score > (bestMatchCandidate.matchScore || 0) || (score === bestMatchCandidate.matchScore && fullVariantName.length < bestMatchCandidate.name.length)) {\n                bestMatchCandidate = {\n                  id: item.id, \n                  name: fullVariantName, \n                  type: item.type,\n                  category: item.category,\n                  price: variant.price, \n                  description: item.description || undefined, \n                  pointsAwarded: variant.pointsAwarded ?? item.pointsAwarded,\n                  estimatedDuration: variant.estimatedDuration ?? item.estimatedDuration,\n                  variants: undefined, \n                  originalItem: item, \n                  isVariantMatch: true, \n                  matchScore: score\n                };\n              }\n            }\n          }\n        }\n      }\n      \n      if (bestMatchCandidate) {\n        console.log(`ProductLookupTool Function: Ditemukan kandidat terbaik: ${bestMatchCandidate.name} (Score: ${bestMatchCandidate.matchScore})`);\n        // Construct the final item to return, ensuring it matches ProductServiceInfoSchema\n        foundItem = {\n            id: bestMatchCandidate.id,\n            name: bestMatchCandidate.name,\n            type: bestMatchCandidate.type,\n            category: bestMatchCandidate.category,\n            price: bestMatchCandidate.price,\n            description: bestMatchCandidate.description || undefined,\n            pointsAwarded: bestMatchCandidate.pointsAwarded || undefined,\n            estimatedDuration: bestMatchCandidate.estimatedDuration || undefined,\n            variants: !bestMatchCandidate.isVariantMatch && bestMatchCandidate.originalItem?.variants \n                ? bestMatchCandidate.originalItem.variants.map((v: any) => ({ // Ensure v has id or generate one\n                    id: v.id || uuidv4(),\n                    name: v.name,\n                    price: v.price,\n                    pointsAwarded: v.pointsAwarded,\n                    estimatedDuration: v.estimatedDuration,\n                  })) \n                : undefined,\n        };\n\n        try {\n          ProductServiceInfoSchema.parse(foundItem);\n          return foundItem;\n        } catch (zodError: any) {\n          console.error(\"ProductLookupTool Function: Zod validation error for found item:\", JSON.stringify(zodError.format(), null, 2));\n          console.error(\"ProductLookupTool Function: Data that failed validation:\", JSON.stringify(foundItem, null, 2));\n          return null;\n        }\n      } else {\n        console.log(`ProductLookupTool Function: Tidak ada produk/layanan yang cocok dengan nama \"${input.productName}\".`);\n        return null;\n      }\n    } catch (error) {\n      console.error('ProductLookupTool Function: Error saat mengambil data dari Firestore:', error);\n      return null;\n    }\n}\n\nexport const getProductServiceDetailsByNameTool = ai.defineTool(\n  {\n    name: 'getProductServiceDetailsByNameTool',\n    description: 'Mencari dan mengembalikan detail spesifik dari sebuah produk atau layanan berdasarkan namanya. Berguna untuk menjawab pertanyaan pelanggan tentang harga, durasi, ketersediaan, atau deskripsi item tertentu.',\n    inputSchema: ProductLookupInputSchema,\n    outputSchema: z.union([ProductServiceInfoSchema, z.null()]).describe(\"Objek berisi detail produk/layanan, atau null jika tidak ditemukan.\"),\n  },\n  findProductServiceByName // Pass the actual function here\n);\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cariInfoLayananTool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for searching services by category.\n * This tool is intended to be used by sub-flows or specialized flows.\n *\n * - cariInfoLayananTool - The Genkit tool definition.\n * - findLayananByCategory - The actual function performing the lookup (exported for direct use).\n * - CariInfoLayananInput - Zod type for the tool's input.\n * - CariInfoLayananOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; // Harus dari @/ai/genkit\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, getDocs, where } from 'firebase/firestore';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\nimport { ProductServiceInfoSchema } from '@/types/aiToolSchemas';\nimport { v4 as uuidv4 } from 'uuid'; // Ensure uuid is imported if variants might need new IDs\n\n// Schemas for the actual tool (NOT exported directly from this file if it's not 'use server')\nconst CariInfoLayananInputSchema = z.object({\n  keyword: z.string().min(1, \"Kata kunci kategori pencarian tidak boleh kosong.\").describe('Nama KATEGORI layanan yang ingin dicari, mis. \"cuci\", \"coating\", \"detailing\". Akan dicocokkan (case-insensitive) dengan field \"category\" pada data layanan.'),\n});\nexport type CariInfoLayananInput = z.infer<typeof CariInfoLayananInputSchema>;\n\nconst CariInfoLayananOutputSchema = z.array(ProductServiceInfoSchema).describe(\"Daftar layanan yang cocok dengan KATEGORI yang dicari, bisa kosong.\");\nexport type CariInfoLayananOutput = z.infer<typeof CariInfoLayananOutputSchema>;\n\n// This function contains the actual server-side logic (DB access)\n// Export this function so it can be called directly from other flows if needed.\nexport async function findLayananByCategory(input: CariInfoLayananInput): Promise<CariInfoLayananOutput> {\n  const { keyword } = input;\n  const categoryKeywordLower = keyword.toLowerCase().trim();\n  console.log(`[findLayananByCategory Tool Function] Attempting to find services for CATEGORY: \"${categoryKeywordLower}\"`);\n\n  if (!db) {\n    console.error(\"[findLayananByCategory Tool Function] FATAL: Firestore DB (db) is not initialized. Cannot query.\");\n    return [];\n  }\n  console.log(`[findLayananByCategory Tool Function] Using Firestore Project ID: ${db.app.options.projectId || 'PROJECT ID NOT AVAILABLE ON DB INSTANCE'}`);\n\n\n  const matchingServices: ProductServiceInfo[] = [];\n  try {\n    const servicesCollectionRef = collection(db, 'services');\n    console.log(`[findLayananByCategory Tool Function] Querying collection 'services' WHERE \"category\" == \"${categoryKeywordLower}\"`);\n    // Query Firestore. Pastikan field 'category' di Firestore juga lowercase atau lakukan perbandingan case-insensitive jika memungkinkan\n    const q = firestoreQuery(servicesCollectionRef, where(\"category\", \"==\", categoryKeywordLower));\n    const querySnapshot = await getDocs(q);\n\n    console.log(`[findLayananByCategory Tool Function] Query successful. Found ${querySnapshot.size} documents matching category \"${categoryKeywordLower}\".`);\n\n    querySnapshot.forEach((docSnap) => {\n      const serviceData = docSnap.data();\n      let itemTypeFormatted: 'Layanan' | 'Produk' | undefined = undefined;\n      if (typeof serviceData.type === 'string') {\n        if (serviceData.type.toLowerCase() === 'layanan') {\n          itemTypeFormatted = 'Layanan';\n        } else if (serviceData.type.toLowerCase() === 'produk') {\n          itemTypeFormatted = 'Produk';\n        }\n      }\n\n      const serviceItem = {\n        id: docSnap.id,\n        name: serviceData.name,\n        type: itemTypeFormatted,\n        category: serviceData.category,\n        price: typeof serviceData.price === 'number' ? serviceData.price : 0,\n        description: serviceData.description || undefined,\n        pointsAwarded: serviceData.pointsAwarded || undefined,\n        estimatedDuration: serviceData.estimatedDuration || undefined,\n        variants: serviceData.variants?.map((v: any) => ({\n          id: v.id || uuidv4(), \n          name: v.name,\n          price: v.price,\n          pointsAwarded: v.pointsAwarded || undefined,\n          estimatedDuration: v.estimatedDuration || undefined,\n        })) || undefined,\n      };\n      \n      const validationResult = ProductServiceInfoSchema.safeParse(serviceItem);\n      if (validationResult.success) {\n        matchingServices.push(validationResult.data);\n      } else {\n        console.warn(`[findLayananByCategory Tool Function] Data layanan ${docSnap.id} (Nama: ${serviceData.name || 'N/A'}) tidak valid:`, JSON.stringify(validationResult.error.format(), null, 2));\n        console.warn(`[findLayananByCategory Tool Function] Data yang gagal validasi:`, JSON.stringify(serviceItem, null, 2));\n      }\n    });\n\n    console.log(`[findLayananByCategory Tool Function] Successfully validated and pushed ${matchingServices.length} services for CATEGORY \"${categoryKeywordLower}\".`);\n    if (matchingServices.length === 0 && querySnapshot.size > 0) {\n        console.warn(`[findLayananByCategory Tool Function] WARNING: Found ${querySnapshot.size} documents for category \"${categoryKeywordLower}\", but ALL FAILED Zod validation.`);\n    } else if (matchingServices.length === 0 && querySnapshot.size === 0) {\n        console.log(`[findLayananByCategory Tool Function] INFO: No documents found for category \"${categoryKeywordLower}\" in Firestore, or the field 'category' does not exactly match \"${categoryKeywordLower}\".`);\n    }\n    return matchingServices;\n  } catch (error) {\n    console.error(\"[findLayananByCategory Tool Function] Error saat mencari layanan berdasarkan KATEGORI:\", error);\n    return []; // Return empty array on error\n  }\n}\n\n// Define the Genkit tool, using the function above as its implementation\nexport const cariInfoLayananTool = ai.defineTool(\n  {\n    name: 'cariInfoLayananTool',\n    description: 'Mencari daftar layanan atau produk yang tersedia berdasarkan NAMA KATEGORI layanan yang spesifik. Input adalah nama kategori (mis. \"Cuci Motor\", \"Coating\"), output adalah daftar layanan dalam kategori tersebut.',\n    inputSchema: CariInfoLayananInputSchema,\n    outputSchema: CariInfoLayananOutputSchema,\n  },\n  findLayananByCategory // Pass the actual function here\n);\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 909, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Flow AI utama untuk WhatsApp Customer Service QLAB.\n * Sekarang menangani semua logika layanan dan menyimpan konteks percakapan di Firestore.\n */\nimport { ai } from '@/ai/genkit';\nimport * as z from 'zod';\nimport { db } from '@/lib/firebase';\nimport { doc, getDoc as getFirestoreDoc, setDoc as setFirestoreDoc, serverTimestamp, type Timestamp } from 'firebase/firestore';\nimport { DEFAULT_AI_SETTINGS, DEFAULT_MAIN_PROMPT_ZOYA } from '@/types/aiSettings';\n\nimport { cariSizeMotorTool, type CariSizeMotorInput, type CariSizeMotorOutput, findMotorSize } from '@/ai/tools/cari-size-motor-tool';\nimport { getProductServiceDetailsByNameTool, type ProductLookupInput, findProductServiceByName } from '@/ai/tools/productLookupTool';\nimport { cariInfoLayananTool, type CariInfoLayananInput, type CariInfoLayananOutput, findLayananByCategory } from '@/ai/tools/cariInfoLayananTool';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\n\n// Skema internal untuk validasi input chat history di flow\nconst ChatMessageSchemaInternal = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchemaInternal>;\n\n// --- User Session Structure (in Firestore: userAiSessions/{senderNumber}) ---\ninterface UserAiSession {\n  userId: string;\n  activeSpecificServiceInquiry?: string;\n  knownMotorcycleName?: string;\n  knownMotorcycleSize?: string;\n  lastAiInteractionType?: 'asked_for_motor_type_for_specific_service' | 'provided_specific_service_details' | 'provided_category_service_list' | 'asked_for_service_after_motor_size' | 'general_response' | 'initial_greeting' | 'asked_for_paint_type_for_coating' | 'ready_for_booking_details';\n  lastUpdatedAt: Timestamp;\n  // Bisa ditambahkan field lain jika perlu, mis. lastDetectedIntent, dll.\n}\n\n// Skema input utama untuk ZoyaChatFlow (digunakan oleh UI)\nconst ZoyaChatInputSchema = z.object({\n  messages: z.array(ChatMessageSchemaInternal).optional().describe(\"Riwayat percakapan lengkap, jika ada.\"),\n  customerMessage: z.string().min(1, \"Pesan pelanggan tidak boleh kosong.\").describe(\"Pesan terbaru dari customer.\"),\n  senderNumber: z.string().optional().describe(\"Nomor WhatsApp pengirim (WAJIB untuk session jika mau persisten).\"), // Tetap opsional di input, tapi flow akan cek\n  mainPromptString: z.string().optional().describe(\"String prompt utama yang mungkin dikirim dari UI atau diambil dari Firestore.\"),\n  currentDate: z.string().optional(),\n  currentTime: z.string().optional(),\n  tomorrowDate: z.string().optional(),\n  dayAfterTomorrowDate: z.string().optional(),\n  // UI bisa mengirim ini sebagai override atau untuk sesi baru\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui dari interaksi sebelumnya atau database.\"),\n  activeSpecificServiceInquiry: z.string().optional().describe(\"Layanan spesifik yang sedang aktif ditanyakan (mis. 'Cuci Premium') jika Zoya sebelumnya bertanya tipe motor untuk layanan ini.\"),\n});\nexport type ZoyaChatInput = z.infer<typeof ZoyaChatInputSchema>;\n\n// Schema output untuk wrapper function (digunakan oleh UI)\nconst WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n  // Output ini lebih untuk UI tahu apa yang baru saja di-set/update di session Firestore\n  sessionActiveSpecificServiceInquiry: z.string().optional(),\n  sessionDetectedMotorcycleInfo: z.object({ name: z.string(), size: z.string().optional() }).optional(),\n  sessionLastAiInteractionType: z.string().optional(),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>;\n\n\n// Flow utama\nconst zoyaChatFlow = ai.defineFlow(\n  {\n    name: 'zoyaChatFlow',\n    inputSchema: ZoyaChatInputSchema,\n    outputSchema: WhatsAppReplyOutputSchema,\n  },\n  async (input: ZoyaChatInput): Promise<WhatsAppReplyOutput> => {\n    console.log(\"[MAIN-FLOW] zoyaChatFlow input:\", JSON.stringify(input, null, 2));\n\n    let customerMessageToProcess = input.customerMessage;\n    let suggestedReply = \"Maaf, Zoya lagi bingung nih.\";\n    let sessionDataToSave: Partial<UserAiSession> = {};\n\n    if (!customerMessageToProcess || customerMessageToProcess.trim() === '') {\n      return { suggestedReply: \"Maaf, Zoya tidak menerima pesan yang jelas.\" };\n    }\n    if (!input.senderNumber) {\n        console.warn(\"[MAIN-FLOW] WARNING: senderNumber tidak ada di input. Sesi Firestore tidak akan digunakan/disimpan. Konteks hanya dari input.\");\n        // Lanjutkan tanpa Firestore session jika senderNumber tidak ada, hanya mengandalkan input.\n    }\n\n    const userId = input.senderNumber || 'anonymous_user'; // Default ke anonymous jika tidak ada nomor\n    const sessionDocRef = input.senderNumber ? doc(db, 'userAiSessions', userId) : null;\n    let currentSession: Partial<UserAiSession> = {};\n\n    // 1. Load Sesi dari Firestore (jika senderNumber ada)\n    if (sessionDocRef) {\n        try {\n            const sessionSnap = await getFirestoreDoc(sessionDocRef);\n            if (sessionSnap.exists()) {\n                currentSession = sessionSnap.data() as UserAiSession;\n                console.log(`[MAIN-FLOW] Sesi ditemukan untuk ${userId}:`, JSON.stringify(currentSession, null, 2));\n            } else {\n                console.log(`[MAIN-FLOW] Tidak ada sesi untuk ${userId}, sesi baru akan dibuat jika ada data untuk disimpan.`);\n            }\n        } catch (e) {\n            console.error(`[MAIN-FLOW] Gagal memuat sesi untuk ${userId}:`, e);\n            // Lanjut dengan sesi kosong jika gagal load\n        }\n    }\n\n    // 2. Gabungkan Konteks dari Input UI (jika ada) dengan Sesi\n    // Info dari UI (input ZoyaChatInput) lebih diutamakan jika ada, karena bisa jadi koreksi.\n    let knownMotorcycleName = input.knownMotorcycleInfo?.name || currentSession.knownMotorcycleName || \"belum diketahui\";\n    let knownMotorcycleSize = input.knownMotorcycleInfo?.size || currentSession.knownMotorcycleSize || \"belum diketahui\";\n    let activeSpecificServiceInquiry = input.activeSpecificServiceInquiry || currentSession.activeSpecificServiceInquiry || \"tidak ada\";\n    let lastAiInteractionType = currentSession.lastAiInteractionType || \"initial_greeting\";\n\n    // Deteksi kata kunci layanan umum (kategori)\n    const lowerCaseCustomerMessage = customerMessageToProcess.toLowerCase();\n    const generalServiceKeywords = [\"cuci\", \"coating\", \"poles\", \"detailing\", \"repaint\", \"servis\", \"layanan\", \"produk\", \"jual\", \"harga\", \"info\", \"katalog\", \"booking\", \"pesan tempat\", \"jadwal\"];\n    let detectedGeneralServiceKeyword: string | null = null;\n    for (const keyword of generalServiceKeywords) {\n        if (lowerCaseCustomerMessage.includes(keyword)) {\n            detectedGeneralServiceKeyword = keyword;\n            if ((keyword === \"cuci\" && (lowerCaseCustomerMessage.includes(\"cuci motor\") || lowerCaseCustomerMessage.includes(\"nyuci\"))) ) detectedGeneralServiceKeyword = \"cuci\";\n            else if (keyword === \"coating\" && (lowerCaseCustomerMessage.includes(\"coating motor\") || lowerCaseCustomerMessage.includes(\"laminating\"))) detectedGeneralServiceKeyword = \"coating\";\n            else if (keyword === \"poles\" && (lowerCaseCustomerMessage.includes(\"poles motor\") || lowerCaseCustomerMessage.includes(\"poles bodi\"))) detectedGeneralServiceKeyword = \"poles\";\n            else if (keyword === \"detailing\" && lowerCaseCustomerMessage.includes(\"detailing motor\")) detectedGeneralServiceKeyword = \"detailing\";\n            else if (keyword === \"repaint\" && (lowerCaseCustomerMessage.includes(\"repaint motor\") || lowerCaseCustomerMessage.includes(\"cat motor\"))) detectedGeneralServiceKeyword = \"repaint\";\n            else if (keyword === \"booking\" || keyword === \"pesan tempat\" || keyword === \"jadwal\") detectedGeneralServiceKeyword = \"booking\";\n            break;\n        }\n    }\n    console.log(\"[MAIN-FLOW] Detected general service keyword from user message:\", detectedGeneralServiceKeyword);\n\n    const mainPromptFromSettings = input.mainPromptString || DEFAULT_MAIN_PROMPT_ZOYA;\n\n    const finalSystemPrompt = mainPromptFromSettings\n                                .replace(\"{{{SESSION_MOTOR_NAME}}}\", knownMotorcycleName)\n                                .replace(\"{{{SESSION_MOTOR_SIZE}}}\", knownMotorcycleSize)\n                                .replace(\"{{{SESSION_ACTIVE_SERVICE}}}\", activeSpecificServiceInquiry)\n                                .replace(\"{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\", lastAiInteractionType)\n                                .replace(\"{{{detectedGeneralServiceKeyword}}}\", detectedGeneralServiceKeyword || \"tidak ada\")\n                                .replace(\"{{{dynamicContext}}}\", `INFO_UMUM_BENGKEL: QLAB Moto Detailing, Jl. Sukasenang V No.1A, Cikutra, Bandung. Buka 09:00 - 21:00 WIB. Full Detailing hanya untuk cat glossy. Coating beda harga untuk doff & glossy. Tanggal hari ini: ${input.currentDate || new Date().toLocaleDateString('id-ID')}.`);\n\n\n    const historyForAI = (input.messages || [])\n      .filter(msg => msg.content && msg.content.trim() !== '')\n      .map((msg) => ({\n        role: msg.role,\n        content: [{ text: msg.content }],\n    }));\n\n    const messagesForAI = [\n      ...historyForAI,\n      { role: 'user' as const, content: [{ text: customerMessageToProcess }] }\n    ];\n\n    console.log(`[MAIN-FLOW] Calling MAIN ai.generate. History Length: ${historyForAI.length}. Prompt snippet: ${finalSystemPrompt.substring(0, 300)}...`);\n    sessionDataToSave.lastAiInteractionType = 'general_response'; // Default\n\n    try {\n      const result = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest',\n        prompt: finalSystemPrompt,\n        messages: messagesForAI,\n        tools: [cariSizeMotorTool, getProductServiceDetailsByNameTool, cariInfoLayananTool], // Belum ada createBookingTool\n        toolChoice: 'auto',\n        config: { temperature: 0.3, topP: 0.9 },\n      });\n\n      console.log(\"[MAIN-FLOW] Raw MAIN AI generate result:\", JSON.stringify(result, null, 2));\n      suggestedReply = result.text || \"\";\n      const toolRequest = result.toolRequest;\n\n      if (toolRequest) {\n        console.log(\"[MAIN-FLOW] MAIN AI requested a tool call:\", JSON.stringify(toolRequest, null, 2));\n        let toolOutputToRelay: any = \"Error: Tool output tidak diset.\";\n        let interactionTypeAfterTool: UserAiSession['lastAiInteractionType'] = 'general_response';\n        let activeServiceAfterTool = activeSpecificServiceInquiry;\n\n\n        if (toolRequest.name === 'cariSizeMotor' && toolRequest.input) {\n          toolOutputToRelay = await findMotorSize(toolRequest.input as CariSizeMotorInput);\n          if (toolOutputToRelay.success && toolOutputToRelay.size && toolOutputToRelay.vehicleModelFound) {\n              knownMotorcycleName = toolOutputToRelay.vehicleModelFound;\n              knownMotorcycleSize = toolOutputToRelay.size;\n              sessionDataToSave.knownMotorcycleName = knownMotorcycleName;\n              sessionDataToSave.knownMotorcycleSize = knownMotorcycleSize;\n              interactionTypeAfterTool = 'asked_for_service_after_motor_size';\n          }\n        } else if (toolRequest.name === 'getProductServiceDetailsByNameTool' && toolRequest.input) {\n          toolOutputToRelay = await findProductServiceByName(toolRequest.input as ProductLookupInput);\n          if (toolOutputToRelay?.name) { \n            activeServiceAfterTool = toolOutputToRelay.name; // Simpan nama layanan yang ditemukan\n            interactionTypeAfterTool = 'provided_specific_service_details';\n          }\n        } else if (toolRequest.name === 'cariInfoLayananTool' && toolRequest.input) {\n          toolOutputToRelay = await findLayananByCategory(toolRequest.input as CariInfoLayananInput);\n           if (Array.isArray(toolOutputToRelay) && toolOutputToRelay.length > 0) {\n             interactionTypeAfterTool = 'provided_category_service_list';\n           }\n        }\n        // Handle createBookingTool placeholder if needed\n        // else if (toolRequest.name === 'createBookingTool' && toolRequest.input) { ... }\n\n        sessionDataToSave.lastAiInteractionType = interactionTypeAfterTool;\n        sessionDataToSave.activeSpecificServiceInquiry = activeServiceAfterTool;\n\n        if (toolOutputToRelay !== \"Error: Tool output tidak diset.\") {\n            console.log(`[MAIN-FLOW] Output from tool '${toolRequest.name}':`, JSON.stringify(toolOutputToRelay, null, 2));\n            const messagesAfterTool = [\n                ...messagesForAI,\n                result.message,\n                { role: 'tool' as const, content: [{ toolResponse: { name: toolRequest.name, output: toolOutputToRelay }}]}\n            ];\n            \n            // Re-generate prompt with potentially updated session info for the second call\n            const promptForSecondCall = mainPromptFromSettings\n                .replace(\"{{{SESSION_MOTOR_NAME}}}\", knownMotorcycleName)\n                .replace(\"{{{SESSION_MOTOR_SIZE}}}\", knownMotorcycleSize)\n                .replace(\"{{{SESSION_ACTIVE_SERVICE}}}\", activeServiceAfterTool) \n                .replace(\"{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\", interactionTypeAfterTool);\n\n\n            const modelResponseAfterTool = await ai.generate({\n                model: 'googleai/gemini-1.5-flash-latest',\n                prompt: promptForSecondCall,\n                messages: messagesAfterTool,\n                config: { temperature: 0.3, topP: 0.9 },\n                 tools: [cariSizeMotorTool, getProductServiceDetailsByNameTool, cariInfoLayananTool], // Sediakan tools lagi\n                 toolChoice: 'auto',\n            });\n            suggestedReply = modelResponseAfterTool.text || `Zoya dapet info dari alat ${toolRequest.name}, tapi bingung mau ngomong apa.`;\n            // Handle potential second tool call (e.g., asked for motor size, then service, then paint type)\n            // This is a simplified version, more complex agentic behavior might need more robust state management or flow design\n             if (modelResponseAfterTool.toolRequest) {\n                console.warn(\"[MAIN-FLOW] AI requested another tool after a tool response. This is not deeply handled yet. Returning current text.\");\n             }\n        }\n      } else if (suggestedReply) {\n        // Tidak ada tool request, AI langsung menjawab\n        const finishReason = result.finishReason;\n        console.log(`[MAIN-FLOW] MAIN AI Finish Reason (no tool): ${finishReason}`);\n        if (!suggestedReply && finishReason !== \"stop\") {\n            console.error(`[MAIN-FLOW] ❌ MAIN AI generation failed or no text output. Finish Reason: ${finishReason}.`);\n            suggestedReply = \"Maaf, Zoya lagi agak bingung nih boskuu. Coba tanya lagi dengan cara lain ya.\";\n        } else {\n            // AI menjawab langsung, coba deteksi interaksi berikutnya berdasarkan jawaban AI\n            const lowerReply = suggestedReply.toLowerCase();\n            if (lowerReply.includes(\"tipe motornya apa\") || lowerReply.includes(\"motornya apa\") || lowerReply.includes(\"jenis motornya\")) {\n                sessionDataToSave.lastAiInteractionType = 'asked_for_motor_type_for_specific_service';\n                // Coba ekstrak nama layanan dari pesan user JIKA AI bertanya tipe motor\n                const serviceMentionedInUser = extractServiceNameFromUserMessage(customerMessageToProcess, await getAllServiceNames());\n                if (serviceMentionedInUser) {\n                    sessionDataToSave.activeSpecificServiceInquiry = serviceMentionedInUser;\n                    activeSpecificServiceInquiry = serviceMentionedInUser; // Update for current turn\n                }\n            } else if (lowerReply.includes(\"pilihan layanan\") || lowerReply.includes(\"daftar layanan\")) {\n                sessionDataToSave.lastAiInteractionType = 'provided_category_service_list';\n            } else if (lowerReply.includes(\"harga\") && (knownMotorcycleName !== \"belum diketahui\")) {\n                sessionDataToSave.lastAiInteractionType = 'provided_specific_service_details';\n            } else if (lowerReply.includes(\"booking\") || lowerReply.includes(\"jadwal\")) {\n                 sessionDataToSave.lastAiInteractionType = 'ready_for_booking_details';\n            }\n            // (Tambahkan deteksi lain jika perlu)\n        }\n      } else {\n        console.error(`[MAIN-FLOW] ❌ No tool request and no text output from MAIN AI. Result: ${JSON.stringify(result, null, 2)}`);\n        suggestedReply = \"Waduh, Zoya lagi nggak bisa jawab nih. Coba lagi ya.\";\n      }\n\n      // 3. Simpan Sesi ke Firestore (jika senderNumber ada)\n      if (sessionDocRef) {\n          if (Object.keys(sessionDataToSave).length > 0 || \n              (knownMotorcycleName !== currentSession.knownMotorcycleName && knownMotorcycleName !== \"belum diketahui\") ||\n              (knownMotorcycleSize !== currentSession.knownMotorcycleSize && knownMotorcycleSize !== \"belum diketahui\") ||\n              (activeSpecificServiceInquiry !== currentSession.activeSpecificServiceInquiry && activeSpecificServiceInquiry !== \"tidak ada\") ||\n              (sessionDataToSave.lastAiInteractionType !== currentSession.lastAiInteractionType && sessionDataToSave.lastAiInteractionType)\n            ) {\n            \n            const finalSessionDataToSave: Partial<UserAiSession> = {\n                userId: userId,\n                knownMotorcycleName: (knownMotorcycleName !== \"belum diketahui\") ? knownMotorcycleName : undefined,\n                knownMotorcycleSize: (knownMotorcycleSize !== \"belum diketahui\") ? knownMotorcycleSize : undefined,\n                activeSpecificServiceInquiry: (activeSpecificServiceInquiry !== \"tidak ada\") ? activeSpecificServiceInquiry : undefined,\n                lastAiInteractionType: sessionDataToSave.lastAiInteractionType || lastAiInteractionType,\n                lastUpdatedAt: serverTimestamp() as Timestamp,\n            };\n            \n            console.log(`[MAIN-FLOW] Menyimpan sesi untuk ${userId}:`, JSON.stringify(finalSessionDataToSave, null, 2));\n            await setFirestoreDoc(sessionDocRef, finalSessionDataToSave, { merge: true });\n          } else {\n            console.log(`[MAIN-FLOW] Tidak ada perubahan signifikan pada sesi untuk ${userId}, tidak menyimpan.`);\n          }\n      }\n\n      return {\n        suggestedReply,\n        sessionActiveSpecificServiceInquiry: (activeSpecificServiceInquiry !== \"tidak ada\") ? activeSpecificServiceInquiry : undefined,\n        sessionDetectedMotorcycleInfo: (knownMotorcycleName !== \"belum diketahui\") ? { name: knownMotorcycleName, size: (knownMotorcycleSize !== \"belum diketahui\") ? knownMotorcycleSize : undefined } : undefined,\n        sessionLastAiInteractionType: sessionDataToSave.lastAiInteractionType || lastAiInteractionType,\n      };\n\n    } catch (flowError: any) {\n        console.error(\"[MAIN-FLOW] ❌ Critical error dalam MAIN zoyaChatFlow:\", flowError);\n        if (flowError.cause) console.error(\"[MAIN-FLOW] Error Cause:\", JSON.stringify(flowError.cause, null, 2));\n        return { suggestedReply: `Waduh, Zoya lagi error nih, boskuu. Coba tanya lagi nanti ya. (Error: ${flowError.message || 'Kesalahan internal'})` };\n    }\n  }\n);\n\n// Helper Functions (bisa dipindah ke utils jika banyak)\nasync function getAllServiceNames(): Promise<string[]> {\n    try {\n      const items = await findLayananByCategory({ keyword: \"\" }); // Mencoba ambil semua\n      if (Array.isArray(items)) {\n        return items.map(i => i.name).filter(Boolean);\n      }\n      return [];\n    } catch (e) {\n      console.error(\"Error in getAllServiceNames:\", e);\n      return [];\n    }\n}\n\nfunction extractServiceNameFromUserMessage(userMessage: string, serviceNames: string[]): string | undefined {\n    const lowerUserMessage = userMessage.toLowerCase();\n    // Prioritaskan match yang lebih panjang dulu untuk menghindari partial match yang salah\n    const sortedServiceNames = [...serviceNames].sort((a,b) => b.length - a.length);\n    for (const serviceName of sortedServiceNames) {\n        if (serviceName && lowerUserMessage.includes(serviceName.toLowerCase())) {\n            return serviceName;\n        }\n    }\n    return undefined;\n}\n\n// Wrapper function yang akan dipanggil oleh UI atau API route\nexport async function generateWhatsAppReply(input: ZoyaChatInput): Promise<WhatsAppReplyOutput> {\n  console.log(\"[MAIN-FLOW Wrapper] generateWhatsAppReply input:\", JSON.stringify(input, null, 2));\n\n  let mainPromptToUse = input.mainPromptString;\n\n  if (!mainPromptToUse && db && input.senderNumber) { // Hanya coba fetch dari Firestore jika db ada dan senderNumber ada\n    try {\n        const settingsDocRef = doc(db, 'appSettings', 'aiAgentConfig');\n        const docSnap = await getFirestoreDoc(settingsDocRef);\n        if (docSnap.exists() && docSnap.data()?.mainPrompt) {\n          mainPromptToUse = docSnap.data().mainPrompt;\n          console.log(\"[MAIN-FLOW Wrapper]: Using mainPromptString from Firestore.\");\n        } else {\n          mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n          console.log(\"[MAIN-FLOW Wrapper]: Using DEFAULT_MAIN_PROMPT_ZOYA (Firestore doc not found or no mainPrompt).\");\n        }\n    } catch (error) {\n      console.error(\"[MAIN-FLOW Wrapper]: Error fetching mainPrompt from Firestore. Using default.\", error);\n      mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n    }\n  } else if (!mainPromptToUse) {\n     mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n     console.log(\"[MAIN-FLOW Wrapper]: Using DEFAULT_MAIN_PROMPT_ZOYA (db or senderNumber not available for Firestore fetch, or prompt already provided).\");\n  } else {\n     console.log(\"[MAIN-FLOW Wrapper]: Using mainPromptString directly from input.\");\n  }\n\n\n  const flowInput: ZoyaChatInput = {\n    ...input,\n    messages: input.messages || [],\n    mainPromptString: mainPromptToUse,\n  };\n\n  try {\n    const result = await zoyaChatFlow(flowInput);\n    return result;\n  } catch (error: any) {\n    console.error(\"[MAIN-FLOW Wrapper] Error running zoyaChatFlow:\", error);\n    return { suggestedReply: `Maaf, Zoya sedang ada kendala teknis. (${error.message || 'Tidak diketahui'})` };\n  }\n}\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1308, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4053660f6447b38038e1d20965a3df3cd57a2a7b51'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1386, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}