{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  console.error(\"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING in environment variables.\");\n}\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  try {\n    app = initializeApp(firebaseConfig);\n    console.log(\"[firebase.ts] Firebase app initialized. Project ID:\", app.options.projectId);\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to initialize Firebase app:\", e.message);\n    // @ts-ignore\n    app = null;\n  }\n} else {\n  app = getApp();\n  console.log(\"[firebase.ts] Using existing Firebase app. Project ID:\", app.options.projectId);\n}\n\n// @ts-ignore\nif (app) {\n  try {\n    // @ts-ignore\n    db = getFirestore(app);\n    console.log(\"[firebase.ts] Firestore instance obtained.\");\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to get Firestore instance:\", e?.message);\n  }\n} else {\n    console.error(\"[firebase.ts] Firebase app not properly initialized, cannot get Firestore.\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,QAAQ,GAAG,CAAC,uDAAuD,IAAI,OAAO,CAAC,SAAS;IAC1F,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,oDAAoD,EAAE,OAAO;QAC3E,aAAa;QACb,MAAM;IACR;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;IACX,QAAQ,GAAG,CAAC,0DAA0D,IAAI,OAAO,CAAC,SAAS;AAC7F;AAEA,aAAa;AACb,IAAI,KAAK;IACP,IAAI;QACF,aAAa;QACb,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,mDAAmD,GAAG;IACtE;AACF,OAAO;IACH,QAAQ,KAAK,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nif (!process.env.GOOGLE_API_KEY) {\n  const errorMessage = \"Kesalahan Konfigurasi: GOOGLE_API_KEY tidak ditemukan di environment variables. Ini dibutuhkan oleh plugin Google AI. Pastikan sudah di-set di file .env Anda.\";\n  console.error(`\\n\\n🛑 ${errorMessage}\\n\\n`);\n  throw new Error(errorMessage);\n}\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-1.5-flash-latest', // Model diubah ke Gemini 1.5 Flash terbaru\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n\n"],"names":[],"mappings":";;;AACA,8MAAyB,uCAAuC;AAChE;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiSettings.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const AI_AGENT_BEHAVIORS = [\n  \"Ramah & Membantu\",\n  \"Profesional & To-the-point\",\n  \"Humoris & Santai\",\n  \"Empatik & Sabar\",\n] as const;\nexport type AiAgentBehavior = typeof AI_AGENT_BEHAVIORS[number];\n\nexport const AI_TRANSFER_CONDITIONS = [\n  \"Pelanggan Meminta Secara Eksplisit\",\n  \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\",\n  \"Terdeteksi Emosi Negatif dari Pelanggan\",\n  \"Disebut Kata Kunci Eskalasi (mis. 'manajer', 'komplain')\",\n  \"Setelah 5 Pertanyaan Tanpa Solusi\",\n] as const;\nexport type AiTransferCondition = typeof AI_TRANSFER_CONDITIONS[number];\n\nconst FollowUpDelaysSchema = z.object({\n  firstAttemptHours: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Jam harus angka.\"}).min(1, \"Minimal 1 jam.\").max(168, \"Maksimal 168 jam (7 hari).\").optional()\n  ),\n  secondAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  thirdAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  fourthAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(90, \"Maksimal 90 hari.\").optional()\n  ),\n});\n\nexport const AiSettingsFormSchema = z.object({\n  agentBehavior: z.enum(AI_AGENT_BEHAVIORS, {\n    required_error: \"Perilaku agen AI harus dipilih.\",\n  }),\n  welcomeMessage: z.string().min(10, \"Pesan selamat datang minimal 10 karakter.\").max(300, \"Pesan selamat datang maksimal 300 karakter.\"),\n  transferConditions: z.array(z.enum(AI_TRANSFER_CONDITIONS)).min(1, \"Minimal satu kondisi transfer harus dipilih.\"),\n  knowledgeBaseDescription: z.string().max(10000, \"Deskripsi sumber pengetahuan maksimal 10000 karakter.\").optional().describe(\"Panduan tingkat tinggi untuk AI. Detail pengetahuan akan diambil melalui tools.\"),\n\n  enableHumanHandoff: z.boolean().default(false).describe(\"Aktifkan notifikasi ke agen manusia jika AI perlu bantuan.\"),\n  humanAgentWhatsAppNumber: z.string().regex(/^\\+?[0-9\\s-]{10,18}$|^$/, \"Format nomor WhatsApp agen tidak valid (mis. +628123456789 atau kosong).\").optional().describe(\"Nomor WhatsApp agen manusia untuk notifikasi handoff.\"),\n\n  enableFollowUp: z.boolean().default(false).describe(\"Aktifkan fitur follow-up otomatis untuk pelanggan yang pernah menghubungi via WhatsApp namun belum melakukan kunjungan atau transaksi. Follow-up berhenti jika pelanggan tercatat datang/bertransaksi.\"),\n  followUpMessageTemplate: z.string().max(300, \"Template pesan follow-up maksimal 300 karakter.\").optional(),\n  followUpDelays: FollowUpDelaysSchema.optional(),\n  mainPrompt: z.string().min(100, \"Prompt utama minimal 100 karakter.\").max(15000, \"Prompt utama maksimal 15000 karakter.\").optional().describe(\"Prompt utama yang mengarahkan perilaku dan logika Zoya.\"),\n}).superRefine((data, ctx) => {\n  if (data.enableFollowUp) {\n    if (!data.followUpMessageTemplate || data.followUpMessageTemplate.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Template pesan follow-up diperlukan jika fitur follow-up aktif.\",\n        path: [\"followUpMessageTemplate\"],\n      });\n    }\n    if (!data.followUpDelays?.firstAttemptHours) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Penundaan follow-up pertama (jam) diperlukan.\",\n        path: [\"followUpDelays\", \"firstAttemptHours\"],\n      });\n    }\n  }\n  if (data.enableHumanHandoff && (!data.humanAgentWhatsAppNumber || data.humanAgentWhatsAppNumber.trim() === \"\")) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: \"Nomor WhatsApp Agen Manusia diperlukan jika notifikasi handoff aktif.\",\n      path: [\"humanAgentWhatsAppNumber\"],\n    });\n  }\n});\n\nexport type AiSettingsFormValues = z.infer<typeof AiSettingsFormSchema>;\nexport type FollowUpDelaysValues = z.infer<typeof FollowUpDelaysSchema>;\n\nexport const DEFAULT_MAIN_PROMPT_ZOYA = `\nAnda adalah \"Zoya\" - Customer Service AI dari QLAB Moto Detailing. Anda selalu berkomunikasi dengan flow utama yang bisa mendelegasikan tugas.\n\n🎯 Gaya Bahasa Anda (Zoya):\n- Santai dan akrab, kayak ngobrol sama temen tongkrongan. Gunakan sapaan seperti \"bro\", \"kak\", atau \"mas\".\n- Tetap informatif, jelas, dan cepat nangkep maksud pelanggan.\n- Gunakan istilah otomotif santai: \"kinclong\", \"ganteng maksimal\", \"spa motor\".\n- Gunakan emoji secukupnya untuk menambah ekspresi: ✅😎✨💸🛠️👋.\n- Hindari kata kasar, tapi boleh pakai \"anjay\" atau \"wih\" untuk ekspresi kaget positif.\n- Selalu jawab dalam Bahasa Indonesia.\n\n🧠 Pengetahuan Umum Anda (BEKAL ANDA, BUKAN UNTUK DITUNJUKKAN KE USER):\n- Layanan \"Full Detailing\" HANYA TERSEDIA untuk motor dengan cat GLOSSY. Jika user bertanya untuk motor DOFF, tolak dengan sopan dan tawarkan layanan lain (misal: \"Premium Wash\" atau \"Coating Doff\").\n- Harga \"Coating\" untuk motor DOFF dan GLOSSY itu BERBEDA. Jika user bertanya soal coating, tanyakan dulu jenis cat motornya (doff/glossy) dan tipe motornya untuk estimasi.\n- Motor besar (Moge) seperti Harley, atau motor 600cc ke atas biasanya masuk ukuran \"XL\" yang harganya berbeda.\n- Jika user bertanya harga spesifik layanan untuk model motor tertentu, dan Anda tidak memiliki informasi pasti, jangan menebak. Minta user untuk memberikan detail motornya (model, tahun, jenis cat jika relevan) atau sarankan untuk datang langsung/cek pricelist di bengkel.\n- QLAB Moto Detailing berlokasi di Jl. Sukasenang V No.1A, Cikutra, Kec. Cibeunying Kidul, Kota Bandung, Jawa Barat 40124. Jam buka: Setiap Hari 09:00 - 21:00 WIB.\n- INFO_MOTOR_DIKETAHUI_DARI_SISTEM: Nama: {{{knownMotorcycleName}}}, Ukuran: {{{knownMotorcycleSize}}}\n- KONTEKS_INTERNAL_SISTEM_LAINNYA: {{{dynamicContext}}}\n\n🛠️ Tool yang BISA KAMU MINTA ke sistem (KAMU TIDAK MENJALANKANNYA SENDIRI):\n1.  **cariSizeMotor**: Untuk mendapatkan ukuran motor (S, M, L, XL).\n    - Input yang kamu berikan ke sistem: \\`{\"namaMotor\": \"NAMA_ATAU_MODEL_MOTOR_DARI_USER\"}\\`\n    - Sistem akan memproses ini dan memberikan hasilnya padamu.\n2.  **cariInfoLayananTool**: (INI SEBENARNYA AKAN DICEGAT DAN DIALIHKAN KE SUB-FLOW) Tool ini digunakan jika user bertanya tentang KATEGORI layanan secara umum (mis. \"coating\", \"cuci\"). Input yang diharapkan adalah nama kategori layanan. Sistem akan memberikan penjelasan lengkap tentang layanan dalam kategori tersebut.\n    - Input yang kamu berikan ke sistem: \\`{\"keyword\": \"NAMA_KATEGORI_LAYANAN\"}\\` (Contoh: \"coating\", \"cuci\", \"poles\", \"detailing\")\n\n📝 FLOW INTERAKSI & PENGGUNAAN TOOL (SANGAT PENTING IKUTI ALUR INI):\n- Sapa user dengan ramah.\n- **Jika user bertanya soal UKURAN MOTOR SPESIFIK ATAU HARGA layanan yang BUTUH UKURAN motor, DAN KAMU BELUM TAHU UKURANNYA**:\n  1.  Gunakan tool \\`cariSizeMotor\\` dengan input nama motor dari user.\n  2.  Setelah sistem memberikan hasilnya (misalnya, ukuran motor), sampaikan ke user ukuran motornya.\n  3.  Kemudian, jika user juga bertanya soal jenis layanan umum (misal \"cuci motor nmax harganya berapa?\"), maka setelah memberitahu ukuran, LANJUTKAN seolah-olah user baru bertanya layanan umum tersebut (lihat poin di bawah).\n  4.  Jika setelah tahu ukuran user tidak menyebutkan layanan spesifik, tanyakan layanan apa yang diminati. Contoh: \"Nah, buat motor {{{knownMotorcycleName}}} ukuran {{{knownMotorcycleSize}}} ini, kamu minatnya layanan apa nih?\"\n- **Jika user bertanya tentang KATEGORI LAYANAN SECARA UMUM (misalnya \"coating itu apa?\", \"layanan cuci ada apa aja?\", \"info detailing dong\"), atau hanya menyebutkan kata kunci layanan tanpa detail spesifik harga atau motor:**\n  1.  INI PENTING: Kamu akan **MINTA** sistem untuk menggunakan tool \\`cariInfoLayananTool\\` dengan input `{\"keyword\": \"KATEGORI_LAYANAN_DARI_USER\"}`.\n  2.  Sistem secara otomatis akan mencegat permintaan ini dan menjalankan sub-flow yang lebih pintar. Kamu akan menerima **jawaban yang sudah jadi dan lengkap** dari sistem.\n  3.  LANGSUNG sampaikan jawaban lengkap dari sistem tersebut ke pelanggan. Kamu TIDAK PERLU mengolahnya lagi. Jawaban ini biasanya sudah berisi penjelasan layanan, daftar paket, dan pertanyaan lanjutan (misalnya menanyakan tipe motor jika belum diketahui, atau menanyakan paket mana yang diminati jika motor sudah diketahui).\n- Jika user sudah menyebutkan NAMA LAYANAN SPESIFIK dan TIPE MOTORNYA, dan bertanya harga (dan kamu belum pakai logika di atas):\n    - Coba gunakan tool \\`cariInfoLayananTool\\` dengan NAMA LAYANAN SPESIFIK tersebut sebagai keyword. Jika hasilnya relevan, sampaikan. Jika tidak, minta maaf tidak ada info harga pasti dan sarankan datang/cek pricelist.\n- Setelah memberikan informasi, selalu tawarkan bantuan lebih lanjut atau ajak booking.\n- Jika user bertanya di luar topik detailing motor QLAB, jawab dengan sopan bahwa Anda hanya bisa membantu soal QLAB Moto Detailing.\n\nJAWABAN ZOYA (format natural, TANPA menyebutkan \"Pengetahuan Umum\" atau \"Logika Utama\" Anda, atau bagaimana Anda meminta sistem menjalankan tool):\n`.trim();\n\n\nexport const DEFAULT_SERVICE_INQUIRY_SUB_FLOW_PROMPT = `\nAnda adalah spesialis layanan di QLAB Moto Detailing. Anda bertugas membantu Zoya (CS Utama) dengan memberikan informasi detail tentang layanan berdasarkan kategori yang diminta.\nKategori Layanan yang ditanyakan: \"{{{serviceKeyword}}}\"\nPesan asli dari pelanggan (untuk konteks): \"{{{customerQuery}}}\"\nInformasi motor yang sudah diketahui: Nama: {{{knownMotorcycleName}}}, Ukuran: {{{knownMotorcycleSize}}}.\n\nTUGAS UTAMA ANDA:\n1.  (Opsional, jika dari \"{{{customerQuery}}}\" terlihat user belum paham) Berikan penjelasan singkat dan menarik tentang apa itu layanan kategori \"{{{serviceKeyword}}}\".\n2.  WAJIB: Panggil tool 'cariInfoLayananTool' dengan input \\`{\"keyword\": \"{{{serviceKeyword}}}\"}\\` untuk mendapatkan daftar SEMUA layanan/produk dalam kategori tersebut.\n3.  Berdasarkan hasil dari tool 'cariInfoLayananTool':\n    a.  Jika tool mengembalikan satu atau lebih item layanan/produk (array tidak kosong):\n        -   Susun jawaban yang menjelaskan SEMUA item yang ditemukan dalam kategori \"{{{serviceKeyword}}}\". Untuk setiap item:\n            -   Sebutkan nama itemnya (dari field 'name' di output tool). Misal: \"Untuk kategori {{{serviceKeyword}}}, kita ada beberapa pilihan nih:\"\n            -   Jika ada deskripsi (field 'description'), rangkum poin pentingnya secara singkat dan menarik.\n            -   Jika item tersebut memiliki varian (field 'variants' di output tool), sebutkan beberapa nama varian yang tersedia sebagai contoh (misalnya, \"Tersedia dalam varian A, B, dan C.\"). Jangan sebutkan harga varian di sini kecuali diminta spesifik.\n        -   Setelah menjelaskan semua item yang ditemukan, lanjutkan ke langkah 4.\n    b.  Jika tool TIDAK menemukan item apapun untuk kategori \"{{{serviceKeyword}}}\" (array kosong):\n        -   Informasikan dengan sopan bahwa saat ini belum ada item spesifik untuk kategori \"{{{serviceKeyword}}}\" atau minta user memperjelas kata kuncinya.\n        -   Akhiri dengan pertanyaan umum seperti \"Ada lagi yang bisa dibantu?\" dan JANGAN lanjutkan ke langkah 4.\n4.  Setelah menjelaskan semua item yang relevan dari tool (jika ada pada langkah 3a):\n    -   Jika informasi motor (\"{{{knownMotorcycleName}}}\") adalah \"belum diketahui\", akhiri dengan pertanyaan: \"Nah, dari layanan {{{serviceKeyword}}} tadi, kira-kira tertarik yang mana nih kak? Oiya, motornya apa nih kak?\"\n    -   Jika informasi motor (\"{{{knownMotorcycleName}}}\") sudah diketahui, akhiri dengan pertanyaan: \"Nah, buat motor {{{knownMotorcycleName}}}, dari pilihan layanan {{{serviceKeyword}}} yang tadi Zoya sebutin, ada yang bikin kamu tertarik?\"\n5.  PENTING: JANGAN mengarang harga jika tidak ada di output tool. Fokus pada penjelasan layanan/produk dan menanyakan minat/tipe motor.\n\nJAWABAN ANDA (untuk Zoya teruskan ke user, formatnya harus natural dan mudah dibaca):\n`.trim();\n\n\nexport const DEFAULT_AI_SETTINGS: AiSettingsFormValues = {\n  agentBehavior: \"Humoris & Santai\",\n  welcomeMessage: \"Halo bro! Zoya di sini, siap bantu seputar QLAB Moto Detailing. Ada yang bisa Zoya bantu?\",\n  transferConditions: [\"Pelanggan Meminta Secara Eksplisit\"],\n  knowledgeBaseDescription: `Anda adalah asisten AI untuk QLAB Moto Detailing. Tugas utama Anda adalah membantu pelanggan dan staf. Gunakan pengetahuan umum tentang layanan dan produk QLAB. Jika perlu informasi spesifik seperti ukuran motor atau detail layanan, gunakan tool yang tersedia.`,\n  mainPrompt: DEFAULT_MAIN_PROMPT_ZOYA,\n  enableHumanHandoff: false,\n  humanAgentWhatsAppNumber: '',\n  enableFollowUp: false,\n  followUpMessageTemplate: \"Halo Kak, kami perhatikan Anda sempat menghubungi kami beberapa waktu lalu. Apakah ada rencana untuk berkunjung ke bengkel kami? Ada promo menarik lho!\",\n  followUpDelays: {\n    firstAttemptHours: 24,\n    secondAttemptDays: 7,\n    thirdAttemptDays: 7,\n    fourthAttemptDays: 30,\n  },\n};\n"],"names":[],"mappings":";;;;;;;;AACA;AAAA;;AAEO,MAAM,qBAAqB;IAChC;IACA;IACA;IACA;CACD;AAGM,MAAM,yBAAyB;IACpC;IACA;IACA;IACA;IACA;CACD;AAGD,MAAM,uBAAuB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,mBAAmB,iLAAA,CAAA,IAAC,CAAC,UAAU,CAC7B,CAAC,MAAQ,AAAC,QAAQ,MAAM,QAAQ,aAAa,QAAQ,OAAQ,YAAY,SAAS,OAAO,MAAM,KAC/F,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,oBAAoB;IAAkB,GAAG,GAAG,CAAC,GAAG,kBAAkB,GAAG,CAAC,KAAK,8BAA8B,QAAQ;IAE9H,mBAAmB,iLAAA,CAAA,IAAC,CAAC,UAAU,CAC7B,CAAC,MAAQ,AAAC,QAAQ,MAAM,QAAQ,aAAa,QAAQ,OAAQ,YAAY,SAAS,OAAO,MAAM,KAC/F,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,oBAAoB;IAAmB,GAAG,GAAG,CAAC,GAAG,mBAAmB,GAAG,CAAC,IAAI,qBAAqB,QAAQ;IAEtH,kBAAkB,iLAAA,CAAA,IAAC,CAAC,UAAU,CAC5B,CAAC,MAAQ,AAAC,QAAQ,MAAM,QAAQ,aAAa,QAAQ,OAAQ,YAAY,SAAS,OAAO,MAAM,KAC/F,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,oBAAoB;IAAmB,GAAG,GAAG,CAAC,GAAG,mBAAmB,GAAG,CAAC,IAAI,qBAAqB,QAAQ;IAEtH,mBAAmB,iLAAA,CAAA,IAAC,CAAC,UAAU,CAC7B,CAAC,MAAQ,AAAC,QAAQ,MAAM,QAAQ,aAAa,QAAQ,OAAQ,YAAY,SAAS,OAAO,MAAM,KAC/F,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,oBAAoB;IAAmB,GAAG,GAAG,CAAC,GAAG,mBAAmB,GAAG,CAAC,IAAI,qBAAqB,QAAQ;AAExH;AAEO,MAAM,uBAAuB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,eAAe,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC,oBAAoB;QACxC,gBAAgB;IAClB;IACA,gBAAgB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,6CAA6C,GAAG,CAAC,KAAK;IACzF,oBAAoB,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC,yBAAyB,GAAG,CAAC,GAAG;IACnE,0BAA0B,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,yDAAyD,QAAQ,GAAG,QAAQ,CAAC;IAE7H,oBAAoB,iLAAA,CAAA,IAAC,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,QAAQ,CAAC;IACxD,0BAA0B,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,2BAA2B,4EAA4E,QAAQ,GAAG,QAAQ,CAAC;IAEtK,gBAAgB,iLAAA,CAAA,IAAC,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,QAAQ,CAAC;IACpD,yBAAyB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,mDAAmD,QAAQ;IACxG,gBAAgB,qBAAqB,QAAQ;IAC7C,YAAY,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,sCAAsC,GAAG,CAAC,OAAO,yCAAyC,QAAQ,GAAG,QAAQ,CAAC;AAChJ,GAAG,WAAW,CAAC,CAAC,MAAM;IACpB,IAAI,KAAK,cAAc,EAAE;QACvB,IAAI,CAAC,KAAK,uBAAuB,IAAI,KAAK,uBAAuB,CAAC,IAAI,OAAO,IAAI;YAC/E,IAAI,QAAQ,CAAC;gBACX,MAAM,iLAAA,CAAA,IAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;iBAA0B;YACnC;QACF;QACA,IAAI,CAAC,KAAK,cAAc,EAAE,mBAAmB;YAC3C,IAAI,QAAQ,CAAC;gBACX,MAAM,iLAAA,CAAA,IAAC,CAAC,YAAY,CAAC,MAAM;gBAC3B,SAAS;gBACT,MAAM;oBAAC;oBAAkB;iBAAoB;YAC/C;QACF;IACF;IACA,IAAI,KAAK,kBAAkB,IAAI,CAAC,CAAC,KAAK,wBAAwB,IAAI,KAAK,wBAAwB,CAAC,IAAI,OAAO,EAAE,GAAG;QAC9G,IAAI,QAAQ,CAAC;YACX,MAAM,iLAAA,CAAA,IAAC,CAAC,YAAY,CAAC,MAAM;YAC3B,SAAS;YACT,MAAM;gBAAC;aAA2B;QACpC;IACF;AACF;AAKO,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0GAmCiE,CAAC;AAYpG,MAAM,0CAA0C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBxD,CAAC,CAAC,IAAI;AAGC,MAAM,sBAA4C;IACvD,eAAe;IACf,gBAAgB;IAChB,oBAAoB;QAAC;KAAqC;IAC1D,0BAA0B,CAAC,oQAAoQ,CAAC;IAChS,YAAY;IACZ,oBAAoB;IACpB,0BAA0B;IAC1B,gBAAgB;IAChB,yBAAyB;IACzB,gBAAgB;QACd,mBAAmB;QACnB,mBAAmB;QACnB,kBAAkB;QAClB,mBAAmB;IACrB;AACF","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cari-size-motor-tool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for finding the size of a motorcycle model.\n * This tool is intended to be used by flows.\n *\n * - cariSizeMotorTool - The Genkit tool definition.\n * - CariSizeMotorInput - Zod type for the tool's input.\n * - CariSizeMotorOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; // Harus dari @/ai/genkit\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, where, getDocs, limit } from 'firebase/firestore';\n\n// Schemas for the actual tool\nconst CariSizeMotorInputSchema = z.object({\n  namaMotor: z.string().min(1, \"Nama motor tidak boleh kosong.\").describe('Nama atau model motor yang ingin dicari ukurannya, contoh: NMAX, PCX, Vario.'),\n});\nexport type CariSizeMotorInput = z.infer<typeof CariSizeMotorInputSchema>;\n\nconst CariSizeMotorOutputSchema = z.object({\n  success: z.boolean().describe('Apakah pencarian berhasil atau tidak.'),\n  size: z.string().optional().describe('Ukuran motor (S, M, L, XL) jika ditemukan.'),\n  message: z.string().describe('Pesan hasil pencarian, termasuk ukuran jika berhasil atau pesan error jika gagal.'),\n  vehicleModelFound: z.string().optional().describe('Nama model motor yang sebenarnya ditemukan di database.'),\n});\nexport type CariSizeMotorOutput = z.infer<typeof CariSizeMotorOutputSchema>;\n\nasync function findMotorSize(input: CariSizeMotorInput): Promise<CariSizeMotorOutput> {\n    const { namaMotor } = input;\n    const namaMotorLower = namaMotor.toLowerCase().trim();\n    console.log(`[findMotorSize Tool] Mencari ukuran untuk: \"${namaMotorLower}\"`);\n\n    if (!db) {\n      console.error(\"[findMotorSize Tool] Firestore DB (db) is not initialized.\");\n      return { success: false, message: \"Database tidak terhubung, tidak bisa mencari ukuran motor.\" };\n    }\n\n    try {\n      const vehicleTypesRef = collection(db, 'vehicleTypes');\n      let q;\n      let querySnapshot;\n      let foundVehicleData: any = null;\n\n      // Coba cari berdasarkan alias dulu\n      q = firestoreQuery(vehicleTypesRef, where('aliases', 'array-contains', namaMotorLower), limit(1));\n      querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        foundVehicleData = querySnapshot.docs[0].data();\n      } else {\n        // Jika tidak ketemu di alias, coba cari berdasarkan model_lowercase (jika ada field itu)\n        // Atau bisa juga ambil semua lalu filter, tapi kurang efisien.\n        // Untuk contoh ini, kita asumsikan ada model_lowercase atau kita ambil semua\n        const allVehiclesSnapshot = await getDocs(vehicleTypesRef);\n        for (const doc of allVehiclesSnapshot.docs) {\n          const vehicle = doc.data();\n          if (vehicle.model && vehicle.model.toLowerCase() === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n           // Check model_lowercase as fallback\n          if (vehicle.model_lowercase && vehicle.model_lowercase === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n        }\n      }\n\n      if (foundVehicleData && foundVehicleData.size) {\n        console.log(`[findMotorSize Tool] Ditemukan: ${foundVehicleData.model} ukuran ${foundVehicleData.size}`);\n        return {\n          success: true,\n          size: foundVehicleData.size,\n          message: `Motor ${foundVehicleData.model} (${namaMotor}) termasuk ukuran ${foundVehicleData.size}.`,\n          vehicleModelFound: foundVehicleData.model,\n        };\n      } else {\n        console.log(`[findMotorSize Tool] Ukuran untuk \"${namaMotor}\" tidak ditemukan.`);\n        return {\n          success: false,\n          message: `Maaf, Zoya tidak menemukan ukuran untuk motor \"${namaMotor}\". Mungkin bisa coba nama model yang lebih spesifik atau umum?`,\n        };\n      }\n    } catch (error) {\n      console.error(\"[findMotorSize Tool] Error saat mencari ukuran motor:\", error);\n      return {\n        success: false,\n        message: \"Terjadi kesalahan internal saat mencari ukuran motor. Coba lagi nanti.\",\n      };\n    }\n}\n\nexport const cariSizeMotorTool = ai.defineTool(\n  {\n    name: 'cariSizeMotor',\n    description: 'Mencari ukuran (S, M, L, XL) untuk model motor tertentu. Gunakan jika user bertanya ukuran motornya, atau jika perlu tahu ukuran motor untuk menentukan harga layanan atau informasi lain.',\n    inputSchema: CariSizeMotorInputSchema,\n    outputSchema: CariSizeMotorOutputSchema,\n  },\n  findMotorSize\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiToolSchemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Skema untuk varian produk/layanan yang akan dikembalikan oleh tool\nconst ProductVariantInfoSchema = z.object({\n  name: z.string().describe(\"Nama varian.\"),\n  price: z.number().describe(\"Harga varian.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin yang diberikan untuk varian ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan varian ini (jika layanan).\"),\n});\nexport type ProductVariantInfo = z.infer<typeof ProductVariantInfoSchema>;\n\n// Skema untuk informasi produk/layanan yang akan dikembalikan oleh tool\nexport const ProductServiceInfoSchema = z.object({\n  id: z.string().describe(\"ID unik produk/layanan.\"),\n  name: z.string().describe(\"Nama produk atau layanan.\"),\n  type: z.enum(['Layanan', 'Produk']).describe(\"Jenis item, apakah 'Layanan' atau 'Produk'.\"),\n  category: z.string().describe(\"Kategori produk/layanan.\"),\n  price: z.number().describe(\"Harga dasar produk/layanan. Bisa 0 jika harga ditentukan oleh varian.\"),\n  description: z.string().optional().describe(\"Deskripsi singkat produk/layanan.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin loyalitas yang diberikan untuk produk/layanan dasar ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan (jika ini adalah layanan).\"),\n  variants: z.array(ProductVariantInfoSchema).optional().describe(\"Daftar varian yang tersedia untuk produk/layanan ini.\"),\n});\nexport type ProductServiceInfo = z.infer<typeof ProductServiceInfoSchema>;\n\n// Skema untuk informasi motor klien\nconst ClientMotorcycleInfoSchema = z.object({\n  name: z.string().describe(\"Nama atau model motor.\"),\n  licensePlate: z.string().describe(\"Plat nomor motor.\"),\n});\nexport type ClientMotorcycleInfo = z.infer<typeof ClientMotorcycleInfoSchema>;\n\n// Skema untuk informasi klien yang akan dikembalikan oleh tool\nexport const ClientInfoSchema = z.object({\n  id: z.string().describe(\"ID unik klien.\"),\n  name: z.string().describe(\"Nama lengkap klien.\"),\n  phone: z.string().describe(\"Nomor telepon klien.\"),\n  loyaltyPoints: z.number().describe(\"Jumlah poin loyalitas yang dimiliki klien.\"),\n  motorcycles: z.array(ClientMotorcycleInfoSchema).optional().describe(\"Daftar sepeda motor yang terdaftar atas nama klien ini.\"),\n  lastVisit: z.string().optional().describe(\"Tanggal kunjungan terakhir klien (format YYYY-MM-DD).\"),\n});\nexport type ClientInfo = z.infer<typeof ClientInfoSchema>;\n"],"names":[],"mappings":";;;;AACA;AAAA;;AAEA,qEAAqE;AACrE,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ,CAAC;IAC7C,UAAU,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,UAAU,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,GAAG,QAAQ,CAAC;AAClE;AAGA,oCAAoC;AACpC,MAAM,6BAA6B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIO,MAAM,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,4BAA4B,QAAQ,GAAG,QAAQ,CAAC;IACrE,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cariInfoLayananTool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for searching services by category.\n * This tool is intended to be used by sub-flows or specialized flows.\n *\n * - cariInfoLayananTool - The Genkit tool definition.\n * - CariInfoLayananInput - Zod type for the tool's input.\n * - CariInfoLayananOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; // Harus dari @/ai/genkit\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, getDocs, where } from 'firebase/firestore';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\nimport { ProductServiceInfoSchema } from '@/types/aiToolSchemas';\nimport { v4 as uuidv4 } from 'uuid'; // Ensure uuid is imported if variants might need new IDs\n\n// Schemas for the actual tool (NOT exported directly from this file if it's not 'use server')\nconst CariInfoLayananInputSchema = z.object({\n  keyword: z.string().min(1, \"Kata kunci kategori pencarian tidak boleh kosong.\").describe('Nama KATEGORI layanan yang ingin dicari, mis. \"cuci\", \"coating\", \"detailing\". Akan dicocokkan (case-insensitive) dengan field \"category\" pada data layanan.'),\n});\nexport type CariInfoLayananInput = z.infer<typeof CariInfoLayananInputSchema>;\n\nconst CariInfoLayananOutputSchema = z.array(ProductServiceInfoSchema).describe(\"Daftar layanan yang cocok dengan KATEGORI yang dicari, bisa kosong.\");\nexport type CariInfoLayananOutput = z.infer<typeof CariInfoLayananOutputSchema>;\n\n// This function contains the actual server-side logic (DB access)\nasync function findLayananByCategory(input: CariInfoLayananInput): Promise<CariInfoLayananOutput> {\n  const { keyword } = input;\n  const categoryKeywordLower = keyword.toLowerCase().trim();\n  console.log(`[findLayananByCategory Tool] Mencari layanan dengan KATEGORI (keyword input di-lowercase): \"${categoryKeywordLower}\"`);\n\n  if (!db) {\n    console.error(\"[findLayananByCategory Tool] Firestore DB (db) is not initialized.\");\n    return [];\n  }\n\n  const matchingServices: ProductServiceInfo[] = [];\n  try {\n    const servicesCollectionRef = collection(db, 'services');\n    // Query Firestore for documents where the 'category' field (assuming it stores lowercase values) matches the keyword\n    console.log(`[findLayananByCategory Tool] Firestore query: where(\"category\", \"==\", \"${categoryKeywordLower}\")`);\n    const q = firestoreQuery(servicesCollectionRef, where(\"category\", \"==\", categoryKeywordLower));\n    const querySnapshot = await getDocs(q);\n\n    querySnapshot.forEach((docSnap) => {\n      const serviceData = docSnap.data();\n      // Construct the ProductServiceInfo object based on your schema\n      const serviceItem: ProductServiceInfo = {\n        id: docSnap.id,\n        name: serviceData.name,\n        type: serviceData.type as 'Layanan' | 'Produk',\n        category: serviceData.category, // Ini kategori asli dari data\n        price: serviceData.price,\n        description: serviceData.description || undefined,\n        pointsAwarded: serviceData.pointsAwarded || undefined,\n        estimatedDuration: serviceData.estimatedDuration || undefined,\n        variants: serviceData.variants?.map((v: any) => ({\n          name: v.name,\n          price: v.price,\n          pointsAwarded: v.pointsAwarded || undefined,\n          estimatedDuration: v.estimatedDuration || undefined,\n          id: v.id || uuidv4(), \n        })) || undefined,\n      };\n      \n      // Validate with Zod before pushing\n      const validationResult = ProductServiceInfoSchema.safeParse(serviceItem);\n      if (validationResult.success) {\n        matchingServices.push(validationResult.data);\n      } else {\n        console.warn(`[findLayananByCategory Tool] Data layanan ${docSnap.id} tidak valid:`, validationResult.error.format());\n      }\n    });\n\n    console.log(`[findLayananByCategory Tool] Ditemukan ${matchingServices.length} layanan untuk KATEGORI \"${categoryKeywordLower}\".`);\n    if (matchingServices.length === 0) {\n        console.log(`[findLayananByCategory Tool] INFO: Pastikan field 'category' di dokumen 'services' Firestore Anda ada dan berisi nilai yang sama persis (case-insensitive) dengan \"${categoryKeywordLower}\".`);\n    }\n    return matchingServices;\n  } catch (error) {\n    console.error(\"[findLayananByCategory Tool] Error saat mencari layanan berdasarkan KATEGORI:\", error);\n    return []; // Return empty array on error\n  }\n}\n\n// Define the Genkit tool\nexport const cariInfoLayananTool = ai.defineTool(\n  {\n    name: 'cariInfoLayananTool',\n    description: 'Mencari daftar layanan atau produk yang tersedia berdasarkan NAMA KATEGORI layanan yang spesifik. Input adalah nama kategori (mis. \"Cuci Motor\", \"Coating\"), output adalah daftar layanan dalam kategori tersebut.',\n    inputSchema: CariInfoLayananInputSchema,\n    outputSchema: CariInfoLayananOutputSchema,\n  },\n  findLayananByCategory\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 708, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/handle-service-inquiry-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Sub-flow AI untuk menangani pertanyaan umum tentang jenis layanan.\n * Flow ini akan menjelaskan layanan, menggunakan cariInfoLayananTool untuk mendapatkan\n * daftar paket, dan merespons sesuai dengan informasi motor yang diketahui.\n */\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { DEFAULT_SERVICE_INQUIRY_SUB_FLOW_PROMPT } from '@/types/aiSettings';\n\n// Import tool yang akan digunakan oleh sub-flow ini\nimport { cariInfoLayananTool, type CariInfoLayananInput, type CariInfoLayananOutput } from '@/ai/tools/cariInfoLayananTool';\nimport { cariSizeMotorTool, type CariSizeMotorInput, type CariSizeMotorOutput } from '@/ai/tools/cari-size-motor-tool'; // Jika sub-flow juga perlu ini\n\n// Schema input untuk sub-flow ini (TIDAK di-export, hanya tipenya)\nconst HandleServiceInquiryInputSchema = z.object({\n  serviceKeyword: z.string().describe(\"Kata kunci atau kategori layanan yang ditanyakan pelanggan, mis. 'Coating', 'Cuci Motor'.\"),\n  customerQuery: z.string().describe(\"Pesan asli dari pelanggan atau pertanyaan dari staf CS.\"),\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui.\"),\n  // Tambahkan field lain yang mungkin dibutuhkan sub-flow, misal currentDate\n});\nexport type HandleServiceInquiryInput = z.infer<typeof HandleServiceInquiryInputSchema>;\n\n// Schema output untuk sub-flow ini (TIDAK di-export, hanya tipenya)\nconst HandleServiceInquiryOutputSchema = z.object({\n  responseText: z.string().describe(\"Jawaban lengkap yang dihasilkan oleh sub-flow ini untuk disampaikan ke pelanggan.\"),\n  // Mungkin ada field output lain di masa depan, mis. layanan yang direkomendasikan\n});\nexport type HandleServiceInquiryOutput = z.infer<typeof HandleServiceInquiryOutputSchema>;\n\n\nconst serviceInquirySpecialistFlow = ai.defineFlow(\n  {\n    name: 'serviceInquirySpecialistFlow',\n    inputSchema: HandleServiceInquiryInputSchema,\n    outputSchema: HandleServiceInquiryOutputSchema,\n  },\n  async (input: HandleServiceInquiryInput): Promise<HandleServiceInquiryOutput> => {\n    console.log(\"[SUB-FLOW handleServiceInquiry] Input:\", JSON.stringify(input, null, 2));\n\n    const systemPromptForSubFlow = DEFAULT_SERVICE_INQUIRY_SUB_FLOW_PROMPT\n        .replace(\"{{{serviceKeyword}}}\", input.serviceKeyword)\n        .replace(\"{{{customerQuery}}}\", input.customerQuery) // customerQuery masih ada di prompt untuk konteks\n        .replace(\"{{{knownMotorcycleName}}}\", input.knownMotorcycleInfo?.name || \"belum diketahui\")\n        .replace(\"{{{knownMotorcycleSize}}}\", input.knownMotorcycleInfo?.size || \"belum diketahui\");\n    \n    console.log(\"[SUB-FLOW handleServiceInquiry] Menggunakan system prompt:\", systemPromptForSubFlow.substring(0,250) + \"...\");\n\n    // Panggilan AI pertama untuk memicu tool call\n    const result = await ai.generate({\n      model: 'googleai/gemini-1.5-flash-latest',\n      prompt: systemPromptForSubFlow, \n      messages: [ // Tambahkan pesan user simulasi untuk memicu AI\n        { role: 'user', content: [{ text: `Tolong jelaskan dan cari info layanan tentang \"${input.serviceKeyword}\". Pertanyaan asli pelanggan adalah: \"${input.customerQuery}\"` }] }\n      ],\n      tools: [cariInfoLayananTool, cariSizeMotorTool], \n      toolChoice: 'auto', // Biarkan AI memilih tool, tapi prompt sudah lebih mengarahkan\n      config: { temperature: 0.3 }, \n    });\n\n    console.log(\"[SUB-FLOW handleServiceInquiry] Raw AI generate result (first call):\", JSON.stringify(result, null, 2));\n    \n    let responseText = result.text || \"Maaf, Zoya lagi bingung soal layanan itu.\";\n    const toolRequest = result.toolRequest;\n\n    if (toolRequest) {\n      console.log(\"[SUB-FLOW handleServiceInquiry] AI requested a tool call:\", JSON.stringify(toolRequest, null, 2));\n      let toolOutputContent: any = \"Tool tidak dikenal atau input salah.\";\n      let toolNameInvoked = toolRequest.name;\n\n      if (toolRequest.name === 'cariInfoLayananTool' && toolRequest.input) {\n        const toolOutput = await (cariInfoLayananTool.fn as Function)(toolRequest.input as CariInfoLayananInput);\n        toolOutputContent = toolOutput;\n      } else if (toolRequest.name === 'cariSizeMotor' && toolRequest.input) {\n        const toolOutput = await (cariSizeMotorTool.fn as Function)(toolRequest.input as CariSizeMotorInput);\n        toolOutputContent = toolOutput;\n      }\n      // ... (logika untuk tool lain jika ada)\n\n      console.log(`[SUB-FLOW handleServiceInquiry] Tool ${toolNameInvoked} output:`, JSON.stringify(toolOutputContent, null, 2));\n      \n      // Kirim kembali hasil tool ke AI di sub-flow ini untuk dirangkai jadi jawaban\n      // Prompt sistem yang sama digunakan, AI diharapkan melanjutkan berdasarkan instruksi di prompt\n      // dan history percakapan yang sekarang berisi hasil tool.\n      const modelResponseAfterTool = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest',\n        prompt: systemPromptForSubFlow, \n        messages: [ \n          { role: 'user', content: [{ text: `Tolong jelaskan dan cari info layanan tentang \"${input.serviceKeyword}\". Pertanyaan asli pelanggan adalah: \"${input.customerQuery}\"` }] }, // Pesan user awal\n          result.message, // Pesan dari AI yang meminta tool\n          {               // Pesan hasil dari tool\n            role: 'tool',\n            content: [{\n              toolResponse: {\n                name: toolNameInvoked,\n                output: toolOutputContent,\n              }\n            }]\n          }\n        ],\n        // Tidak perlu tools lagi di sini, karena tugasnya merangkai jawaban\n        config: { temperature: 0.3 },\n      });\n      responseText = modelResponseAfterTool.text || \"Zoya dapet infonya, tapi bingung mau ngomong apa setelah pakai alat.\";\n    } else if (responseText && responseText.trim() !== \"\") {\n        console.log(\"[SUB-FLOW handleServiceInquiry] AI generated text directly (no tool call):\", responseText);\n    } else {\n        console.error(\"[SUB-FLOW handleServiceInquiry] No tool request and no text output from AI.\");\n        responseText = \"Maaf, Zoya lagi ada kendala internal buat cari info layanan itu.\";\n    }\n\n\n    console.log(\"[SUB-FLOW handleServiceInquiry] Final responseText:\", responseText);\n    return { responseText };\n  }\n);\n\n// Wrapper function yang akan dipanggil oleh flow utama\nexport async function handleServiceInquiry(input: HandleServiceInquiryInput): Promise<HandleServiceInquiryOutput> {\n  return serviceInquirySpecialistFlow(input);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 852, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Flow AI utama untuk WhatsApp Customer Service QLAB.\n * Menggunakan tools modular dan bisa mendelegasikan ke sub-flow.\n */\nimport { ai } from '@/ai/genkit';\nimport * as z from 'zod'; // Tetap butuh z untuk schema internal\nimport { db } from '@/lib/firebase';\nimport { doc, getDoc as getFirestoreDoc } from 'firebase/firestore';\nimport { DEFAULT_AI_SETTINGS } from '@/types/aiSettings';\n\n// Import tools modular (non 'use server' files)\nimport { cariSizeMotorTool, type CariSizeMotorInput, type CariSizeMotorOutput } from '@/ai/tools/cari-size-motor-tool';\n// cariInfoLayananTool TIDAK diimpor di sini, karena akan di-\"intercept\"\n\n// Import sub-flow dan tipenya\nimport { handleServiceInquiry, type HandleServiceInquiryInput, type HandleServiceInquiryOutput } from './handle-service-inquiry-flow';\n\n// Skema internal untuk validasi input chat history di flow\nconst ChatMessageSchemaInternal = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchemaInternal>;\n\n// Skema input utama untuk ZoyaChatFlow (digunakan oleh UI)\nconst ZoyaChatInputSchema = z.object({\n  messages: z.array(ChatMessageSchemaInternal).optional().describe(\"Riwayat percakapan lengkap, jika ada.\"),\n  customerMessage: z.string().min(1, \"Pesan pelanggan tidak boleh kosong.\").describe(\"Pesan terbaru dari customer.\"),\n  senderNumber: z.string().optional().describe(\"Nomor WhatsApp pengirim (opsional).\"),\n  mainPromptString: z.string().optional().describe(\"String prompt utama yang mungkin dikirim dari UI atau diambil dari Firestore.\"),\n  currentDate: z.string().optional(),\n  currentTime: z.string().optional(),\n  tomorrowDate: z.string().optional(),\n  dayAfterTomorrowDate: z.string().optional(),\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui dari interaksi sebelumnya atau database.\"),\n});\nexport type ZoyaChatInput = z.infer<typeof ZoyaChatInputSchema>;\n\n// Schema output untuk wrapper function (digunakan oleh UI)\nconst WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>;\n\n\n// Flow utama\nconst zoyaChatFlow = ai.defineFlow(\n  {\n    name: 'zoyaChatFlow',\n    inputSchema: ZoyaChatInputSchema,\n    outputSchema: z.string(), // Output flow adalah string balasan\n  },\n  async (input: ZoyaChatInput): Promise<string> => {\n    console.log(\"[CS-FLOW] zoyaChatFlow input. Customer Message:\", input.customerMessage, \"History Length:\", (input.messages || []).length);\n\n    const lastUserMessageContent = input.customerMessage ||\n                                   (input.messages && input.messages.length > 0 ? input.messages[input.messages.length - 1].content : '');\n\n    if (!lastUserMessageContent || lastUserMessageContent.trim() === '') {\n      return \"Maaf, Zoya tidak menerima pesan yang jelas.\";\n    }\n\n    // --- START: Logika Deteksi Pertanyaan Layanan Umum & Pemanggilan Sub-Flow ---\n    const lowerCaseCustomerMessage = lastUserMessageContent.toLowerCase();\n    const serviceKeywords = [\"cuci\", \"coating\", \"poles\", \"detailing\", \"repaint\", \"servis\", \"layanan\"]; // Tambahkan kata kunci lain jika perlu\n    let detectedServiceKeyword: string | null = null;\n\n    for (const keyword of serviceKeywords) {\n      if (lowerCaseCustomerMessage.includes(keyword)) {\n        detectedServiceKeyword = keyword; // Ambil keyword pertama yang cocok\n        // Lebih spesifik: jika user bilang \"cuci motor\" atau \"layanan cuci\", keywordnya \"cuci\"\n        if ((keyword === \"cuci\" && lowerCaseCustomerMessage.includes(\"cuci motor\")) ||\n            (keyword === \"layanan\" && lowerCaseCustomerMessage.includes(\"layanan cuci\"))) {\n          detectedServiceKeyword = \"cuci\";\n        } else if ((keyword === \"coating\" && lowerCaseCustomerMessage.includes(\"coating motor\")) ||\n                   (keyword === \"layanan\" && lowerCaseCustomerMessage.includes(\"layanan coating\"))) {\n          detectedServiceKeyword = \"coating\";\n        } else if ((keyword === \"poles\" && lowerCaseCustomerMessage.includes(\"poles motor\")) ||\n                   (keyword === \"layanan\" && lowerCaseCustomerMessage.includes(\"layanan poles\"))) {\n          detectedServiceKeyword = \"poles\";\n        } else if ((keyword === \"detailing\" && lowerCaseCustomerMessage.includes(\"detailing motor\")) ||\n                   (keyword === \"layanan\" && lowerCaseCustomerMessage.includes(\"layanan detailing\"))) {\n          detectedServiceKeyword = \"detailing\";\n        } else if ((keyword === \"repaint\" && lowerCaseCustomerMessage.includes(\"repaint motor\")) ||\n                   (keyword === \"layanan\" && lowerCaseCustomerMessage.includes(\"layanan repaint\"))) {\n          detectedServiceKeyword = \"repaint\";\n        }\n        // tambahkan else if untuk keyword lain jika perlu lebih spesifik\n        break;\n      }\n    }\n\n    // Periksa apakah pertanyaan hanya tentang layanan umum dan BUKAN pertanyaan spesifik tentang harga\n    const isGeneralServiceInquiry = detectedServiceKeyword &&\n                                   !lowerCaseCustomerMessage.includes(\"harga\") &&\n                                   !lowerCaseCustomerMessage.includes(\"berapa\") &&\n                                   !lowerCaseCustomerMessage.match(/\\brp\\b/) && // \"rp\" sebagai kata sendiri\n                                   !lowerCaseCustomerMessage.match(/\\d{3,}/); // tidak ada angka 3 digit atau lebih (asumsi harga)\n\n    if (isGeneralServiceInquiry && detectedServiceKeyword) {\n      console.log(`[CS-FLOW] General service inquiry detected for keyword: \"${detectedServiceKeyword}\". Calling sub-flow 'handleServiceInquiry'.`);\n      const subFlowInput: HandleServiceInquiryInput = {\n        serviceKeyword: detectedServiceKeyword,\n        customerQuery: lastUserMessageContent,\n        knownMotorcycleInfo: input.knownMotorcycleInfo,\n      };\n      const subFlowOutput: HandleServiceInquiryOutput = await handleServiceInquiry(subFlowInput);\n      return subFlowOutput.responseText;\n    }\n    // --- END: Logika Deteksi Pertanyaan Layanan Umum ---\n\n\n    let dynamicContext = `INFO_UMUM_BENGKEL: QLAB Moto Detailing adalah bengkel perawatan dan detailing motor.`;\n    if (!db) {\n        console.warn(\"[CS-FLOW] Firestore DB (db) is not initialized. Some context might be missing.\");\n        dynamicContext += \" WARNING: Database tidak terhubung, info detail mungkin tidak akurat.\";\n    } else {\n        console.log(\"[CS-FLOW] Firestore DB (db) is available. Context should be complete.\");\n    }\n\n    const mainPromptFromSettings = input.mainPromptString || DEFAULT_AI_SETTINGS.mainPrompt;\n\n    const finalSystemPrompt = mainPromptFromSettings\n                                .replace(\"{{{dynamicContext}}}\", dynamicContext)\n                                .replace(\"{{{customerMessage}}}\", input.customerMessage)\n                                .replace(\"{{{knownMotorcycleName}}}\", input.knownMotorcycleInfo?.name || \"belum diketahui\")\n                                .replace(\"{{{knownMotorcycleSize}}}\", input.knownMotorcycleInfo?.size || \"belum diketahui\");\n\n\n    const historyForAI = (input.messages || [])\n      .filter(msg => msg.content && msg.content.trim() !== '')\n      .map((msg) => ({\n        role: msg.role,\n        content: [{ text: msg.content }],\n    }));\n\n    const messagesForAI = [\n      ...historyForAI,\n      { role: 'user' as const, content: [{ text: input.customerMessage }] }\n    ];\n\n    console.log(`[CS-FLOW] Calling ai.generate with model googleai/gemini-1.5-flash-latest. History Length: ${historyForAI.length}`);\n    console.log(`[CS-FLOW] System Prompt being used (simplified): ${finalSystemPrompt.substring(0, 300)}...`);\n\n    try {\n      const result = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest',\n        prompt: finalSystemPrompt,\n        messages: messagesForAI,\n        tools: [cariSizeMotorTool], // Hanya cariSizeMotor yang benar-benar di-provide ke LLM utama\n        toolChoice: 'auto',\n        config: { temperature: 0.5 },\n      });\n\n      console.log(\"[CS-FLOW] Raw AI generate result:\", JSON.stringify(result, null, 2));\n\n      let suggestedReply = result.text || \"\";\n      const toolRequest = result.toolRequest;\n\n      if (toolRequest) {\n        console.log(\"[CS-FLOW] AI requested a tool call:\", JSON.stringify(toolRequest, null, 2));\n        let finalReplyFromToolOrSubFlow = \"Maaf, Zoya lagi bingung mau pakai alat apa.\";\n\n        if (toolRequest.name === 'cariSizeMotor' && toolRequest.input) {\n          const sizeOutput: CariSizeMotorOutput = await (cariSizeMotorTool.fn as Function)(toolRequest.input as CariSizeMotorInput);\n\n          const modelResponseAfterSizeTool = await ai.generate({\n            model: 'googleai/gemini-1.5-flash-latest',\n            prompt: finalSystemPrompt,\n            messages: [\n              ...messagesForAI,\n              result.message,\n              {\n                role: 'tool',\n                content: [{\n                  toolResponse: {\n                    name: toolRequest.name,\n                    output: sizeOutput,\n                  }\n                }]\n              }\n            ],\n            config: { temperature: 0.5 },\n          });\n          finalReplyFromToolOrSubFlow = modelResponseAfterSizeTool.text || \"Zoya dapet ukuran motornya, tapi bingung mau ngomong apa.\";\n\n        } else if (toolRequest.name === 'cariInfoLayanan' && toolRequest.input) {\n          // Ini adalah \"intercept\" point jika AI tetap memaksa memanggil tool ini.\n          // Kita panggil sub-flow handleServiceInquiry sebagai gantinya.\n          const serviceInquiryKeyword = (toolRequest.input as { keyword: string }).keyword;\n          console.log(`[CS-FLOW] Intercepting 'cariInfoLayanan' tool request from main AI. Keyword: ${serviceInquiryKeyword}. Calling sub-flow 'handleServiceInquiry'.`);\n\n          const subFlowInput: HandleServiceInquiryInput = {\n            serviceKeyword: serviceInquiryKeyword,\n            customerQuery: input.customerMessage,\n            knownMotorcycleInfo: input.knownMotorcycleInfo,\n          };\n          const subFlowOutput: HandleServiceInquiryOutput = await handleServiceInquiry(subFlowInput);\n          finalReplyFromToolOrSubFlow = subFlowOutput.responseText;\n        }\n        return finalReplyFromToolOrSubFlow;\n\n      } else if (suggestedReply) {\n        const finishReason = result.finishReason;\n        const safetyRatings = result.safetyRatings;\n        console.log(`[CS-FLOW] AI Finish Reason (no tool): ${finishReason}`);\n        if (safetyRatings && safetyRatings.length > 0) {\n            console.log('[CS-FLOW] AI Safety Ratings (no tool):', JSON.stringify(safetyRatings, null, 2));\n        }\n\n        if (!suggestedReply && finishReason !== \"stop\") {\n            console.error(`[CS-FLOW] ❌ AI generation failed or no text output. Finish Reason: ${finishReason}. Safety: ${JSON.stringify(safetyRatings)}`);\n            return \"Maaf, Zoya lagi agak bingung nih boskuu. Coba tanya lagi dengan cara lain ya, atau hubungi CS langsung.\";\n        }\n        return suggestedReply;\n      } else {\n        console.error(`[CS-FLOW] ❌ No tool request and no text output from AI. Result: ${JSON.stringify(result, null, 2)}`);\n        return \"Waduh, Zoya lagi nggak bisa jawab nih. Coba lagi ya.\";\n      }\n\n    } catch (flowError: any) {\n        console.error(\"[CS-FLOW] ❌ Critical error dalam flow zoyaChatFlow:\", flowError);\n        if (flowError.cause) console.error(\"[CS-FLOW] Error Cause:\", JSON.stringify(flowError.cause, null, 2));\n        return `Waduh, Zoya lagi error nih, boskuu. Coba tanya lagi nanti ya. (Pesan Error: ${flowError.message || 'Kesalahan internal tidak diketahui'})`;\n    }\n  }\n);\n\n// Wrapper function yang akan dipanggil oleh UI atau API route\nexport async function generateWhatsAppReply(input: ZoyaChatInput): Promise<WhatsAppReplyOutput> {\n  console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper) input:\", JSON.stringify(input, null, 2));\n\n  let mainPromptToUse = input.mainPromptString;\n\n  if (!mainPromptToUse) {\n    try {\n      if (db) {\n        const settingsDocRef = doc(db, 'appSettings', 'aiAgentConfig');\n        const docSnap = await getFirestoreDoc(settingsDocRef);\n        if (docSnap.exists() && docSnap.data()?.mainPrompt) {\n          mainPromptToUse = docSnap.data().mainPrompt;\n          console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper): Using mainPromptString from Firestore.\");\n        } else {\n          console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper): mainPrompt not found in Firestore or is empty. Checking default.\");\n          mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n          console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper): Using DEFAULT_AI_SETTINGS.mainPrompt.\");\n        }\n      } else {\n        console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper): Firestore (db) not available. Using default for mainPrompt.\");\n        mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n      }\n    } catch (error) {\n      console.error(\"[CS-FLOW] generateWhatsAppReply (wrapper): Error fetching mainPrompt from Firestore. Using default.\", error);\n      mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n    }\n  } else {\n     console.log(\"[CS-FLOW] generateWhatsAppReply (wrapper): Using mainPromptString directly from input.\");\n  }\n\n  const flowInput: ZoyaChatInput = {\n    ...input,\n    messages: input.messages || [],\n    mainPromptString: mainPromptToUse,\n  };\n\n  try {\n    const replyText = await zoyaChatFlow(flowInput);\n    return { suggestedReply: replyText };\n  } catch (error: any) {\n    console.error(\"[CS-FLOW Wrapper] Error running zoyaChatFlow:\", error);\n    return { suggestedReply: `Maaf, Zoya sedang ada kendala teknis. (${error.message || 'Tidak diketahui'})` };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4053660f6447b38038e1d20965a3df3cd57a2a7b51'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1193, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}