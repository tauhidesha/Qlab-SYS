{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  console.error(\"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING in environment variables.\");\n}\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  try {\n    app = initializeApp(firebaseConfig);\n    console.log(\"[firebase.ts] Firebase app initialized. Project ID:\", app.options.projectId);\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to initialize Firebase app:\", e.message);\n    // @ts-ignore\n    app = null;\n  }\n} else {\n  app = getApp();\n  console.log(\"[firebase.ts] Using existing Firebase app. Project ID:\", app.options.projectId);\n}\n\n// @ts-ignore\nif (app) {\n  try {\n    // @ts-ignore\n    db = getFirestore(app);\n    console.log(\"[firebase.ts] Firestore instance obtained.\");\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to get Firestore instance:\", e?.message);\n  }\n} else {\n    console.error(\"[firebase.ts] Firebase app not properly initialized, cannot get Firestore.\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,QAAQ,GAAG,CAAC,uDAAuD,IAAI,OAAO,CAAC,SAAS;IAC1F,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,oDAAoD,EAAE,OAAO;QAC3E,aAAa;QACb,MAAM;IACR;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;IACX,QAAQ,GAAG,CAAC,0DAA0D,IAAI,OAAO,CAAC,SAAS;AAC7F;AAEA,aAAa;AACb,IAAI,KAAK;IACP,IAAI;QACF,aAAa;QACb,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,mDAAmD,GAAG;IACtE;AACF,OAAO;IACH,QAAQ,KAAK,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nif (!process.env.GOOGLE_API_KEY) {\n  const errorMessage = \"Kesalahan Konfigurasi: GOOGLE_API_KEY tidak ditemukan di environment variables. Ini dibutuhkan oleh plugin Google AI. Pastikan sudah di-set di file .env Anda.\";\n  console.error(`\\n\\n🛑 ${errorMessage}\\n\\n`);\n  throw new Error(errorMessage);\n}\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-1.5-flash-latest', // Model diubah ke Gemini 1.5 Flash terbaru\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n\n"],"names":[],"mappings":";;;AACA,8MAAyB,uCAAuC;AAChE;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiSettings.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const AI_AGENT_BEHAVIORS = [\n  \"Ramah & Membantu\",\n  \"Profesional & To-the-point\",\n  \"Humoris & Santai\",\n  \"Empatik & Sabar\",\n] as const;\nexport type AiAgentBehavior = typeof AI_AGENT_BEHAVIORS[number];\n\nexport const AI_TRANSFER_CONDITIONS = [\n  \"Pelanggan Meminta Secara Eksplisit\",\n  \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\",\n  \"Terdeteksi Emosi Negatif dari Pelanggan\",\n  \"Disebut Kata Kunci Eskalasi (mis. 'manajer', 'komplain')\",\n  \"Setelah 5 Pertanyaan Tanpa Solusi\",\n] as const;\nexport type AiTransferCondition = typeof AI_TRANSFER_CONDITIONS[number];\n\nconst FollowUpDelaysSchema = z.object({\n  firstAttemptHours: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Jam harus angka.\"}).min(1, \"Minimal 1 jam.\").max(168, \"Maksimal 168 jam (7 hari).\").optional()\n  ),\n  secondAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  thirdAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  fourthAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(90, \"Maksimal 90 hari.\").optional()\n  ),\n});\n\nexport const AiSettingsFormSchema = z.object({\n  agentBehavior: z.enum(AI_AGENT_BEHAVIORS, {\n    required_error: \"Perilaku agen AI harus dipilih.\",\n  }),\n  welcomeMessage: z.string().min(10, \"Pesan selamat datang minimal 10 karakter.\").max(300, \"Pesan selamat datang maksimal 300 karakter.\"),\n  transferConditions: z.array(z.enum(AI_TRANSFER_CONDITIONS)).min(1, \"Minimal satu kondisi transfer harus dipilih.\"),\n  knowledgeBaseDescription: z.string().max(10000, \"Deskripsi sumber pengetahuan maksimal 10000 karakter.\").optional().describe(\"Panduan tingkat tinggi untuk AI. Detail pengetahuan akan diambil melalui tools.\"),\n  \n  enableHumanHandoff: z.boolean().default(false).describe(\"Aktifkan notifikasi ke agen manusia jika AI perlu bantuan.\"),\n  humanAgentWhatsAppNumber: z.string().regex(/^\\+?[0-9\\s-]{10,18}$|^$/, \"Format nomor WhatsApp agen tidak valid (mis. +628123456789 atau kosong).\").optional().describe(\"Nomor WhatsApp agen manusia untuk notifikasi handoff.\"),\n\n  enableFollowUp: z.boolean().default(false).describe(\"Aktifkan fitur follow-up otomatis untuk pelanggan yang pernah menghubungi via WhatsApp namun belum melakukan kunjungan atau transaksi. Follow-up berhenti jika pelanggan tercatat datang/bertransaksi.\"),\n  followUpMessageTemplate: z.string().max(300, \"Template pesan follow-up maksimal 300 karakter.\").optional(),\n  followUpDelays: FollowUpDelaysSchema.optional(),\n  mainPrompt: z.string().min(100, \"Prompt utama minimal 100 karakter.\").max(15000, \"Prompt utama maksimal 15000 karakter.\").optional().describe(\"Prompt utama yang mengarahkan perilaku dan logika Zoya.\"),\n}).superRefine((data, ctx) => {\n  if (data.enableFollowUp) {\n    if (!data.followUpMessageTemplate || data.followUpMessageTemplate.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Template pesan follow-up diperlukan jika fitur follow-up aktif.\",\n        path: [\"followUpMessageTemplate\"],\n      });\n    }\n    if (!data.followUpDelays?.firstAttemptHours) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Penundaan follow-up pertama (jam) diperlukan.\",\n        path: [\"followUpDelays\", \"firstAttemptHours\"],\n      });\n    }\n  }\n  if (data.enableHumanHandoff && (!data.humanAgentWhatsAppNumber || data.humanAgentWhatsAppNumber.trim() === \"\")) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: \"Nomor WhatsApp Agen Manusia diperlukan jika notifikasi handoff aktif.\",\n      path: [\"humanAgentWhatsAppNumber\"],\n    });\n  }\n});\n\nexport type AiSettingsFormValues = z.infer<typeof AiSettingsFormSchema>;\nexport type FollowUpDelaysValues = z.infer<typeof FollowUpDelaysSchema>;\n\nexport const DEFAULT_MAIN_PROMPT_ZOYA = `\nAnda adalah \"Zoya\" - Customer Service AI dari QLAB Moto Detailing.\n\n🎯 Gaya Bahasa:\n- Santai dan akrab, kayak ngobrol sama temen tongkrongan.\n- Gunakan sapaan seperti \"bro\", \"kak\", atau \"mas\".\n- Tetap informatif, jelas, dan cepat nangkep maksud pelanggan.\n- Gunakan istilah otomotif santai: \"kinclong\", \"ganteng maksimal\", \"spa motor\".\n- Gunakan emoji secukupnya untuk menambah ekspresi: ✅😎✨💸🛠️👋.\n- Hindari kata kasar, tapi boleh pakai \"anjay\" atau \"wih\" untuk ekspresi kaget positif.\n- Selalu jawab dalam Bahasa Indonesia.\n\n🧠 Logika Utama & Pengetahuan Umum (BEKAL ANDA):\n- Layanan \"Full Detailing\" HANYA TERSEDIA untuk motor dengan cat GLOSSY. Jika user bertanya untuk motor DOFF, tolak dengan sopan dan tawarkan layanan lain (misal: \"Premium Wash\" atau \"Coating Doff\").\n- Harga \"Coating\" untuk motor DOFF dan GLOSSY itu BERBEDA.\n- Motor besar (Moge) seperti Harley, atau motor 600cc ke atas biasanya masuk ukuran \"XL\".\n- QLAB Moto Detailing berlokasi di Jl. Sukasenang V No.1A, Cikutra, Kec. Cibeunying Kidul, Kota Bandung, Jawa Barat 40124. Jam buka: Setiap Hari 09:00 - 21:00 WIB.\n- INFO_MOTOR_DIKETAHUI: Nama: {{{knownMotorcycleName}}}, Ukuran: {{{knownMotorcycleSize}}}\n- KONTEKS_INTERNAL_SISTEM: {{{dynamicContext}}}\n\n🛠️ Tool yang Bisa Kamu Pakai:\n1.  **cariSizeMotor**: Untuk mendapatkan ukuran motor (S, M, L, XL). Input: {\"namaMotor\": \"NMAX\"}\n2.  **delegateServiceInquiryToSpecialist**: Jika pelanggan bertanya tentang jenis layanan secara umum (mis. \"coating itu apa?\", \"detailing apa aja?\", \"info cuci dong\"). Tool ini akan membantu menjelaskan layanan tersebut, mencari paket yang relevan, dan menanyakan detail motor jika diperlukan.\n    Input: {\"serviceKeyword\": \"coating\", \"customerQuery\": \"coating apaan bro?\", \"knownMotorcycleInfo\": {\"name\": \"NMAX\", \"size\": \"M\"} (jika sudah diketahui)}\n    Output dari tool ini akan berupa teks balasan yang sudah siap untuk disampaikan ke pelanggan.\n\n📝 FLOW INTERAKSI & PENGGUNAAN TOOL:\n- Sapa user dengan ramah.\n- **Jika user bertanya soal ukuran motor SPESIFIK atau harga layanan yang butuh ukuran motor, DAN BELUM TAHU UKURANNYA**:\n  1. Panggil tool 'cariSizeMotor' untuk mendapatkan ukuran motornya.\n  2. Setelah tahu ukurannya dari output tool, sampaikan ke user ukuran motornya (misalnya, 'Wih, NMAX kamu itu masuk ukuran M bro!').\n  3. FOKUS untuk bertanya layanan mana yang dia minati tanpa membahas harga dulu. Contoh: 'Nah, untuk NMAX ukuran M ini, kamu minatnya layanan apa nih? Mau dibikin kinclong total dengan Full Detailing, atau mau dilapis coating biar catnya awet, atau cukup Premium Wash aja biar seger lagi?'\n- **Jika user bertanya soal jenis layanan secara umum (misalnya \"coating itu apa?\", \"poles itu apa?\", \"info cuci dong\")**:\n  1. Langsung gunakan tool 'delegateServiceInquiryToSpecialist'.\n  2. Input untuk tool ini adalah kata kunci layanan (mis. \"coating\", \"poles\", \"cuci\") dan pesan asli pelanggan. Jika kamu sudah tahu info motor pelanggan (dari {{knownMotorcycleName}} atau interaksi sebelumnya), sertakan juga di input \\`knownMotorcycleInfo\\`.\n  3. Sampaikan hasil dari tool \\`delegateServiceInquiryToSpecialist\\` langsung ke pelanggan.\n- Jika user sudah menyebutkan NAMA LAYANAN SPESIFIK dan TIPE MOTORNYA, dan bertanya harga (dan kamu belum pakai \\`delegateServiceInquiryToSpecialist\\`):\n    - (Ini seharusnya sudah ditangani oleh \\`delegateServiceInquiryToSpecialist\\` jika jenis layanannya umum. Jika sangat spesifik dan tidak umum, mungkin perlu logika tambahan atau tool lain di masa depan. Untuk sekarang, coba jawab berdasarkan pengetahuan umum jika ada, atau minta maaf tidak ada info harga pasti dan sarankan datang/cek pricelist).\n- Setelah memberikan informasi, selalu tawarkan bantuan lebih lanjut atau ajak booking.\n- Jika user bertanya di luar topik detailing motor QLAB, jawab dengan sopan bahwa Anda hanya bisa membantu soal QLAB Moto Detailing.\n\nJAWABAN ZOYA (format natural, TANPA menyebutkan \"Pengetahuan Umum\" atau \"Logika Utama\" Anda):\n`.trim();\n\n// Prompt untuk Sub-Flow handleServiceInquiry\nexport const DEFAULT_MAIN_PROMPT_ZOYA_SERVICE_INQUIRY_SUB_FLOW = `\nAnda adalah Zoya, asisten AI yang bertugas membantu menjelaskan layanan dan mencari paket yang relevan di QLAB Moto Detailing.\n\nKONTEKS DARI PELANGGAN:\n- Kata Kunci Layanan Utama: {{{serviceKeyword}}}\n- Pertanyaan Asli Pelanggan: {{{customerQuery}}}\n- {{{INFO_MOTOR_DIKETAHUI}}}\n\n🛠️ Tool yang Tersedia untuk Anda:\n1.  'cariInfoLayanan': Untuk mencari daftar paket layanan berdasarkan kata kunci.\n    Input: {\"keyword\": \"kata_kunci_layanan_dari_user_atau_serviceKeyword\"}\n    Output: Array berisi objek layanan (nama, deskripsi, harga dasar, varian, dll.).\n\nTUGAS ANDA:\n1.  Jika dari 'customerQuery' terlihat pelanggan belum paham apa itu '{{{serviceKeyword}}}', berikan penjelasan singkat dan menarik tentang '{{{serviceKeyword}}}' tersebut.\n2.  Setelah itu (atau jika pelanggan sudah paham), panggil tool 'cariInfoLayanan' dengan input 'serviceKeyword' yang diberikan ('{{{serviceKeyword}}}') untuk mendapatkan daftar paket layanan yang tersedia.\n3.  Proses hasil dari tool 'cariInfoLayanan':\n    a. Jika tool mengembalikan satu atau lebih paket layanan:\n        - Sebutkan nama-nama paket layanan '{{{serviceKeyword}}}' yang tersedia. Contoh: \"Untuk {{{serviceKeyword}}}, kita ada beberapa pilihan nih bro: [Nama Layanan 1], [Nama Layanan 2].\"\n        - Kamu boleh tambahkan sedikit info unik dari field 'description' masing-masing layanan jika ada dan relevan.\n        - Setelah menyebutkan pilihan paket:\n            - Jika INFO_MOTOR_DIKETAHUI adalah \"Tipe motor pelanggan BELUM diketahui\", maka AKHIRI jawabanmu dengan pertanyaan: \"Kira-kira motor kamu apa nih bro/kak, biar Zoya bisa bantu rekomendasi yang paling pas?\"\n            - Jika INFO_MOTOR_DIKETAHUI berisi nama motor, maka AKHIRI jawabanmu dengan pertanyaan: \"Nah, buat motor {{INFO_MOTOR_DIKETAHUI}}, dari pilihan paket {{{serviceKeyword}}} tadi, ada yang bikin kamu tertarik?\"\n    b. Jika tool 'cariInfoLayanan' tidak menemukan layanan (hasilnya array kosong), informasikan dengan sopan bahwa layanan '{{{serviceKeyword}}}' dengan spesifikasi itu belum tersedia atau minta user memperjelas. Kemudian akhiri dengan pertanyaan umum seperti \"Ada lagi yang bisa Zoya bantu?\"\n4.  Pastikan jawabanmu tetap dalam gaya bahasa Zoya (santai, akrab, emoji secukupnya).\n\nJAWABAN ANDA (langsung ke poin penjelasan/hasil tool, jangan ada sapaan lagi):\n`.trim();\n\n\nexport const DEFAULT_AI_SETTINGS: AiSettingsFormValues = {\n  agentBehavior: \"Humoris & Santai\",\n  welcomeMessage: \"Halo bro! Zoya di sini, siap bantu seputar QLAB Moto Detailing. Ada yang bisa Zoya bantu?\",\n  transferConditions: [\"Pelanggan Meminta Secara Eksplisit\"],\n  knowledgeBaseDescription: `Anda adalah asisten AI untuk QLAB Moto Detailing. Tugas utama Anda adalah membantu pelanggan dan staf. Gunakan pengetahuan umum tentang layanan dan produk QLAB. Jika perlu informasi spesifik seperti ukuran motor atau detail layanan, gunakan tool yang tersedia.`,\n  mainPrompt: DEFAULT_MAIN_PROMPT_ZOYA,\n  enableHumanHandoff: false,\n  humanAgentWhatsAppNumber: '',\n  enableFollowUp: false,\n  followUpMessageTemplate: \"Halo Kak, kami perhatikan Anda sempat menghubungi kami beberapa waktu lalu. Apakah ada rencana untuk berkunjung ke bengkel kami? Ada promo menarik lho!\",\n  followUpDelays: {\n    firstAttemptHours: 24,\n    secondAttemptDays: 7,\n    thirdAttemptDays: 7,\n    fourthAttemptDays: 30,\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cari-size-motor-tool.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Genkit tool for finding the size of a motorcycle model.\n *\n * - cariSizeMotorTool - The Genkit tool definition.\n * - CariSizeMotorInput - Zod type for the tool's input.\n * - CariSizeMotorOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, where, getDocs, limit } from 'firebase/firestore';\n\n// Schemas are NOT exported from here for 'use server' compatibility if tool is imported by a server module\nconst CariSizeMotorInputSchema = z.object({\n  namaMotor: z.string().min(1, \"Nama motor tidak boleh kosong.\").describe('Nama atau model motor yang ingin dicari ukurannya, contoh: NMAX, PCX, Vario.'),\n});\nexport type CariSizeMotorInput = z.infer<typeof CariSizeMotorInputSchema>;\n\nconst CariSizeMotorOutputSchema = z.object({\n  success: z.boolean().describe('Apakah pencarian berhasil atau tidak.'),\n  size: z.string().optional().describe('Ukuran motor (S, M, L, XL) jika ditemukan.'),\n  message: z.string().describe('Pesan hasil pencarian, termasuk ukuran jika berhasil atau pesan error jika gagal.'),\n  vehicleModelFound: z.string().optional().describe('Nama model motor yang sebenarnya ditemukan di database.'),\n});\nexport type CariSizeMotorOutput = z.infer<typeof CariSizeMotorOutputSchema>;\n\n// This function contains the actual server-side logic (DB access)\nasync function findMotorSize(input: CariSizeMotorInput): Promise<CariSizeMotorOutput> {\n    const { namaMotor } = input;\n    const namaMotorLower = namaMotor.toLowerCase().trim();\n    console.log(`[findMotorSize] Mencari ukuran untuk: \"${namaMotorLower}\"`);\n\n    if (!db) {\n      console.error(\"[findMotorSize] Firestore DB (db) is not initialized.\");\n      return { success: false, message: \"Database tidak terhubung, tidak bisa mencari ukuran motor.\" };\n    }\n\n    try {\n      const vehicleTypesRef = collection(db, 'vehicleTypes');\n      let q;\n      let querySnapshot;\n      let foundVehicleData: any = null;\n\n      q = firestoreQuery(vehicleTypesRef, where('aliases', 'array-contains', namaMotorLower), limit(1));\n      querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        foundVehicleData = querySnapshot.docs[0].data();\n      } else {\n        q = firestoreQuery(vehicleTypesRef, where('model_lowercase', '==', namaMotorLower), limit(1));\n        querySnapshot = await getDocs(q);\n        if (!querySnapshot.empty) {\n          foundVehicleData = querySnapshot.docs[0].data();\n        } else {\n          const allVehiclesSnapshot = await getDocs(vehicleTypesRef);\n          for (const doc of allVehiclesSnapshot.docs) {\n            const vehicle = doc.data();\n            if (vehicle.model && vehicle.model.toLowerCase() === namaMotorLower) {\n              foundVehicleData = vehicle;\n              break;\n            }\n          }\n        }\n      }\n\n      if (foundVehicleData && foundVehicleData.size) {\n        return {\n          success: true,\n          size: foundVehicleData.size,\n          message: `Motor ${foundVehicleData.model} (${namaMotor}) termasuk ukuran ${foundVehicleData.size}.`,\n          vehicleModelFound: foundVehicleData.model,\n        };\n      } else {\n        return {\n          success: false,\n          message: `Maaf, Zoya tidak menemukan ukuran untuk motor \"${namaMotor}\". Mungkin bisa coba nama model yang lebih spesifik atau umum?`,\n        };\n      }\n    } catch (error) {\n      console.error(\"[findMotorSize] Error saat mencari ukuran motor:\", error);\n      return {\n        success: false,\n        message: \"Terjadi kesalahan internal saat mencari ukuran motor. Coba lagi nanti.\",\n      };\n    }\n}\n\nexport const cariSizeMotorTool = ai.defineTool(\n  {\n    name: 'cariSizeMotor',\n    description: 'Mencari ukuran (S, M, L, XL) untuk model motor tertentu. Gunakan jika perlu tahu ukuran motor untuk menentukan harga layanan atau informasi lain, atau jika user menanyakan ukuran motornya.',\n    inputSchema: CariSizeMotorInputSchema,\n    outputSchema: CariSizeMotorOutputSchema,\n  },\n  findMotorSize\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiToolSchemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Skema untuk varian produk/layanan yang akan dikembalikan oleh tool\nconst ProductVariantInfoSchema = z.object({\n  name: z.string().describe(\"Nama varian.\"),\n  price: z.number().describe(\"Harga varian.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin yang diberikan untuk varian ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan varian ini (jika layanan).\"),\n});\nexport type ProductVariantInfo = z.infer<typeof ProductVariantInfoSchema>;\n\n// Skema untuk informasi produk/layanan yang akan dikembalikan oleh tool\nexport const ProductServiceInfoSchema = z.object({\n  id: z.string().describe(\"ID unik produk/layanan.\"),\n  name: z.string().describe(\"Nama produk atau layanan.\"),\n  type: z.enum(['Layanan', 'Produk']).describe(\"Jenis item, apakah 'Layanan' atau 'Produk'.\"),\n  category: z.string().describe(\"Kategori produk/layanan.\"),\n  price: z.number().describe(\"Harga dasar produk/layanan. Bisa 0 jika harga ditentukan oleh varian.\"),\n  description: z.string().optional().describe(\"Deskripsi singkat produk/layanan.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin loyalitas yang diberikan untuk produk/layanan dasar ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan (jika ini adalah layanan).\"),\n  variants: z.array(ProductVariantInfoSchema).optional().describe(\"Daftar varian yang tersedia untuk produk/layanan ini.\"),\n});\nexport type ProductServiceInfo = z.infer<typeof ProductServiceInfoSchema>;\n\n// Skema untuk informasi motor klien\nconst ClientMotorcycleInfoSchema = z.object({\n  name: z.string().describe(\"Nama atau model motor.\"),\n  licensePlate: z.string().describe(\"Plat nomor motor.\"),\n});\nexport type ClientMotorcycleInfo = z.infer<typeof ClientMotorcycleInfoSchema>;\n\n// Skema untuk informasi klien yang akan dikembalikan oleh tool\nexport const ClientInfoSchema = z.object({\n  id: z.string().describe(\"ID unik klien.\"),\n  name: z.string().describe(\"Nama lengkap klien.\"),\n  phone: z.string().describe(\"Nomor telepon klien.\"),\n  loyaltyPoints: z.number().describe(\"Jumlah poin loyalitas yang dimiliki klien.\"),\n  motorcycles: z.array(ClientMotorcycleInfoSchema).optional().describe(\"Daftar sepeda motor yang terdaftar atas nama klien ini.\"),\n  lastVisit: z.string().optional().describe(\"Tanggal kunjungan terakhir klien (format YYYY-MM-DD).\"),\n});\nexport type ClientInfo = z.infer<typeof ClientInfoSchema>;\n"],"names":[],"mappings":";;;;AACA;AAAA;;AAEA,qEAAqE;AACrE,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ,CAAC;IAC7C,UAAU,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,UAAU,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,GAAG,QAAQ,CAAC;AAClE;AAGA,oCAAoC;AACpC,MAAM,6BAA6B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIO,MAAM,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,4BAA4B,QAAQ,GAAG,QAAQ,CAAC;IACrE,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cariInfoLayananTool.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Genkit tool for searching services by keyword.\n *\n * - cariInfoLayananTool - The Genkit tool definition.\n * - CariInfoLayananInput - Zod type for the tool's input.\n * - CariInfoLayananOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, getDocs } from 'firebase/firestore';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\nimport { ProductServiceInfoSchema } from '@/types/aiToolSchemas';\n\n// Schemas are NOT exported from here\nconst CariInfoLayananInputSchema = z.object({\n  keyword: z.string().min(1, \"Kata kunci pencarian tidak boleh kosong.\").describe('Kata kunci untuk mencari layanan, mis. \"cuci\", \"coating\", \"detailing\".'),\n});\nexport type CariInfoLayananInput = z.infer<typeof CariInfoLayananInputSchema>;\n\nconst CariInfoLayananOutputSchema = z.array(ProductServiceInfoSchema).describe(\"Daftar layanan yang cocok dengan kata kunci, bisa kosong.\");\nexport type CariInfoLayananOutput = z.infer<typeof CariInfoLayananOutputSchema>;\n\nasync function findLayananByKeyword(input: CariInfoLayananInput): Promise<CariInfoLayananOutput> {\n  const { keyword } = input;\n  const keywordLower = keyword.toLowerCase().trim();\n  console.log(`[findLayananByKeyword] Mencari layanan dengan keyword: \"${keywordLower}\"`);\n\n  if (!db) {\n    console.error(\"[findLayananByKeyword] Firestore DB (db) is not initialized.\");\n    return [];\n  }\n\n  const matchingServices: ProductServiceInfo[] = [];\n  try {\n    const servicesCollectionRef = collection(db, 'services');\n    const q = firestoreQuery(servicesCollectionRef);\n    const querySnapshot = await getDocs(q);\n\n    querySnapshot.forEach((docSnap) => {\n      const serviceData = docSnap.data();\n      const serviceNameLower = serviceData.name?.toLowerCase();\n      const serviceCategoryLower = serviceData.category?.toLowerCase();\n      const serviceDescriptionLower = serviceData.description?.toLowerCase();\n\n      if ( (serviceNameLower && serviceNameLower.includes(keywordLower)) ||\n           (serviceCategoryLower && serviceCategoryLower.includes(keywordLower)) ||\n           (serviceDescriptionLower && serviceDescriptionLower.includes(keywordLower))\n         ) {\n        const serviceItem: ProductServiceInfo = {\n          id: docSnap.id,\n          name: serviceData.name,\n          type: serviceData.type as 'Layanan' | 'Produk',\n          category: serviceData.category,\n          price: serviceData.price,\n          description: serviceData.description || undefined,\n          pointsAwarded: serviceData.pointsAwarded || undefined,\n          estimatedDuration: serviceData.estimatedDuration || undefined,\n          variants: serviceData.variants?.map((v: any) => ({\n            name: v.name,\n            price: v.price,\n            pointsAwarded: v.pointsAwarded,\n            estimatedDuration: v.estimatedDuration,\n          })) || undefined,\n        };\n        \n        const validationResult = ProductServiceInfoSchema.safeParse(serviceItem);\n        if (validationResult.success) {\n          matchingServices.push(validationResult.data);\n        } else {\n          console.warn(`[findLayananByKeyword] Data layanan ${docSnap.id} tidak valid:`, validationResult.error.format());\n        }\n      }\n    });\n    return matchingServices;\n  } catch (error) {\n    console.error(\"[findLayananByKeyword] Error saat mencari layanan:\", error);\n    return [];\n  }\n}\n\nexport const cariInfoLayananTool = ai.defineTool(\n  {\n    name: 'cariInfoLayanan',\n    description: 'Mencari daftar layanan atau produk yang tersedia berdasarkan kata kunci. Berguna jika pelanggan bertanya layanan apa saja yang ada atau menyebutkan jenis layanan secara umum.',\n    inputSchema: CariInfoLayananInputSchema,\n    outputSchema: CariInfoLayananOutputSchema,\n  },\n  findLayananByKeyword\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;AAEA,qCAAqC;AACrC,MAAM,6BAA6B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,4CAA4C,QAAQ,CAAC;AAClF;AAGA,MAAM,8BAA8B,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,6HAAA,CAAA,2BAAwB,EAAE,QAAQ,CAAC;AAG/E,eAAe,qBAAqB,KAA2B;IAC7D,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,eAAe,QAAQ,WAAW,GAAG,IAAI;IAC/C,QAAQ,GAAG,CAAC,CAAC,wDAAwD,EAAE,aAAa,CAAC,CAAC;IAEtF,IAAI,CAAC,sHAAA,CAAA,KAAE,EAAE;QACP,QAAQ,KAAK,CAAC;QACd,OAAO,EAAE;IACX;IAEA,MAAM,mBAAyC,EAAE;IACjD,IAAI;QACF,MAAM,wBAAwB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,KAAE,EAAE;QAC7C,MAAM,IAAI,CAAA,GAAA,iKAAA,CAAA,QAAc,AAAD,EAAE;QACzB,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAEpC,cAAc,OAAO,CAAC,CAAC;YACrB,MAAM,cAAc,QAAQ,IAAI;YAChC,MAAM,mBAAmB,YAAY,IAAI,EAAE;YAC3C,MAAM,uBAAuB,YAAY,QAAQ,EAAE;YACnD,MAAM,0BAA0B,YAAY,WAAW,EAAE;YAEzD,IAAK,AAAC,oBAAoB,iBAAiB,QAAQ,CAAC,iBAC9C,wBAAwB,qBAAqB,QAAQ,CAAC,iBACtD,2BAA2B,wBAAwB,QAAQ,CAAC,eAC7D;gBACH,MAAM,cAAkC;oBACtC,IAAI,QAAQ,EAAE;oBACd,MAAM,YAAY,IAAI;oBACtB,MAAM,YAAY,IAAI;oBACtB,UAAU,YAAY,QAAQ;oBAC9B,OAAO,YAAY,KAAK;oBACxB,aAAa,YAAY,WAAW,IAAI;oBACxC,eAAe,YAAY,aAAa,IAAI;oBAC5C,mBAAmB,YAAY,iBAAiB,IAAI;oBACpD,UAAU,YAAY,QAAQ,EAAE,IAAI,CAAC,IAAW,CAAC;4BAC/C,MAAM,EAAE,IAAI;4BACZ,OAAO,EAAE,KAAK;4BACd,eAAe,EAAE,aAAa;4BAC9B,mBAAmB,EAAE,iBAAiB;wBACxC,CAAC,MAAM;gBACT;gBAEA,MAAM,mBAAmB,6HAAA,CAAA,2BAAwB,CAAC,SAAS,CAAC;gBAC5D,IAAI,iBAAiB,OAAO,EAAE;oBAC5B,iBAAiB,IAAI,CAAC,iBAAiB,IAAI;gBAC7C,OAAO;oBACL,QAAQ,IAAI,CAAC,CAAC,oCAAoC,EAAE,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAE,iBAAiB,KAAK,CAAC,MAAM;gBAC9G;YACF;QACF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sDAAsD;QACpE,OAAO,EAAE;IACX;AACF;AAEO,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,aAAa;IACb,cAAc;AAChB,GACA;;;IAPW;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/handle-service-inquiry-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Sub-flow to handle detailed service inquiries.\n * Explains a service, lists packages using cariInfoLayananTool, and asks clarifying questions.\n */\nimport { ai } from '@/ai/genkit';\nimport * as z from 'zod';\nimport { cariInfoLayananTool, type CariInfoLayananInput, type CariInfoLayananOutput } from '@/ai/tools/cariInfoLayananTool';\nimport { DEFAULT_MAIN_PROMPT_ZOYA_SERVICE_INQUIRY_SUB_FLOW } from '@/types/aiSettings';\n\n// --- Local Zod Schemas (NOT EXPORTED) ---\nconst HandleServiceInquiryInputSchema = z.object({\n  serviceKeyword: z.string().describe(\"Kata kunci layanan yang ditanyakan user, mis. 'coating', 'detailing'.\"),\n  customerQuery: z.string().describe(\"Pesan asli dari pelanggan, untuk konteks.\"),\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui (nama, ukuran).\"),\n});\n// --- End Local Zod Schemas ---\n\n// Exported Type for Input\nexport type HandleServiceInquiryInput = z.infer<typeof HandleServiceInquiryInputSchema>;\n\n// --- Local Zod Schemas (NOT EXPORTED) ---\nconst HandleServiceInquiryOutputSchema = z.object({\n  responseText: z.string().describe(\"Teks balasan yang dihasilkan oleh sub-flow ini.\"),\n});\n// --- End Local Zod Schemas ---\n\n// Exported Type for Output\nexport type HandleServiceInquiryOutput = z.infer<typeof HandleServiceInquiryOutputSchema>;\n\n// The sub-flow definition (internal, not directly exported for Genkit CLI deployment unless needed later)\nconst handleServiceInquiryFlowInternal = ai.defineFlow(\n  {\n    name: 'handleServiceInquiryFlowInternal',\n    inputSchema: HandleServiceInquiryInputSchema, // Uses local schema\n    outputSchema: HandleServiceInquiryOutputSchema, // Uses local schema\n  },\n  async (input: HandleServiceInquiryInput): Promise<HandleServiceInquiryOutput> => {\n    console.log(\"[Sub-Flow:handleServiceInquiry] Input:\", input);\n\n    let systemPrompt = DEFAULT_MAIN_PROMPT_ZOYA_SERVICE_INQUIRY_SUB_FLOW\n        .replace(\"{{{serviceKeyword}}}\", input.serviceKeyword)\n        .replace(\"{{{customerQuery}}}\", input.customerQuery);\n\n    if (input.knownMotorcycleInfo?.name) {\n        systemPrompt += `\\nINFO_MOTOR_DIKETAHUI: Nama motor pelanggan adalah ${input.knownMotorcycleInfo.name}.`;\n        if (input.knownMotorcycleInfo.size) {\n             systemPrompt += ` Ukurannya adalah ${input.knownMotorcycleInfo.size}.`;\n        }\n    } else {\n        systemPrompt += `\\nINFO_MOTOR_DIKETAHUI: Tipe motor pelanggan BELUM diketahui.`;\n    }\n    \n    systemPrompt += \"\\n\\nJAWABAN LANGSUNG (tanpa basa-basi perkenalan lagi, langsung ke poin):\";\n\n\n    const messagesForAI = [\n        // For sub-flows that are very specific, sometimes it's better to pass the dynamic parts\n        // directly into the main user message part of the prompt if the system prompt is static.\n        // Or, structure as a system message and one user message that triggers the flow.\n        // Let's try with system prompt and the customerQuery as user message.\n        { role: 'system' as const, content: [{text: systemPrompt}]},\n        { role: 'user' as const, content: [{text: `Tolong bantu jelaskan tentang \"${input.serviceKeyword}\" berdasarkan pertanyaan: \"${input.customerQuery}\"`}] } \n    ];\n\n    try {\n      const result = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest', // or your preferred model\n        prompt: systemPrompt, // Pass the constructed system prompt here\n        messages: [ // Pass customerQuery as the immediate user message\n            { role: 'user' as const, content: [{text: `Tolong bantu jelaskan tentang \"${input.serviceKeyword}\" berdasarkan pertanyaan: \"${input.customerQuery}\"`}] }\n        ],\n        tools: [cariInfoLayananTool],\n        toolChoice: 'auto',\n        config: { temperature: 0.5 },\n      });\n\n      let responseText = result.text || \"Maaf, Zoya bingung mau jawab apa untuk info layanan itu.\";\n\n      const toolRequest = result.toolRequest;\n      if (toolRequest) {\n        console.log(\"[Sub-Flow:handleServiceInquiry] AI requested tool:\", toolRequest.name);\n        let toolOutputContent: any = \"Tool tidak dikenal atau input salah.\";\n\n        if (toolRequest.name === 'cariInfoLayanan' && toolRequest.input) {\n          const layananOutput = await (cariInfoLayananTool.fn as Function)(toolRequest.input as CariInfoLayananInput);\n          toolOutputContent = layananOutput;\n        }\n        \n        // Call AI again with tool result\n        const modelResponseAfterTool = await ai.generate({\n            model: 'googleai/gemini-1.5-flash-latest',\n            prompt: systemPrompt, // Re-use system prompt\n            messages: [\n                { role: 'user' as const, content: [{text: `Tolong bantu jelaskan tentang \"${input.serviceKeyword}\" berdasarkan pertanyaan: \"${input.customerQuery}\"`}] }, // Original trigger\n                result.message, // Previous AI message that included the tool request\n                {\n                    role: 'tool',\n                    content: [{\n                        toolResponse: {\n                            name: toolRequest.name,\n                            output: toolOutputContent,\n                        }\n                    }]\n                }\n            ],\n            config: {temperature: 0.5}\n        });\n        responseText = modelResponseAfterTool.text || \"Zoya nggak nemu jawaban bagus setelah pakai alat, coba tanya lagi ya.\";\n      }\n      \n      console.log(\"[Sub-Flow:handleServiceInquiry] Output responseText:\", responseText);\n      return { responseText };\n\n    } catch (error) {\n      console.error(\"[Sub-Flow:handleServiceInquiry] Error:\", error);\n      return { responseText: \"Maaf, ada sedikit kendala teknis saat Zoya cari info layanan.\" };\n    }\n  }\n);\n\n// Exported async wrapper function (this is fine for 'use server')\nexport async function handleServiceInquiry(input: HandleServiceInquiryInput): Promise<HandleServiceInquiryOutput> {\n  return handleServiceInquiryFlowInternal(input);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Flow AI utama untuk WhatsApp Customer Service QLAB.\n * Menggunakan tools modular dan bisa mendelegasikan ke sub-flow.\n */\nimport { ai } from '@/ai/genkit';\nimport * as z from 'zod';\nimport { db } from '@/lib/firebase';\nimport { doc, getDoc as getFirestoreDoc } from 'firebase/firestore';\nimport { DEFAULT_AI_SETTINGS } from '@/types/aiSettings';\n\n// Import tools modular (non 'use server' files)\nimport { cariSizeMotorTool, type CariSizeMotorInput, type CariSizeMotorOutput } from '@/ai/tools/cari-size-motor-tool';\nimport { cariInfoLayananTool, type CariInfoLayananInput, type CariInfoLayananOutput } from '@/ai/tools/cariInfoLayananTool';\n\n// Import sub-flow (this is a 'use server' file, so only import its async function and types)\nimport { handleServiceInquiry, type HandleServiceInquiryInput, type HandleServiceInquiryOutput } from './handle-service-inquiry-flow';\n\n// Skema internal untuk validasi input chat history di flow\nconst ChatMessageSchemaInternal = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchemaInternal>; // Export type\n\n// Skema input utama untuk ZoyaChatFlow (digunakan oleh UI)\n// Definisikan di sini karena cs-whatsapp-reply-flow.ts adalah 'use server'\nconst ZoyaChatInputSchema = z.object({\n  messages: z.array(ChatMessageSchemaInternal).optional().describe(\"Riwayat percakapan lengkap, jika ada.\"),\n  customerMessage: z.string().min(1, \"Pesan pelanggan tidak boleh kosong.\").describe(\"Pesan terbaru dari customer.\"),\n  senderNumber: z.string().optional().describe(\"Nomor WhatsApp pengirim (opsional).\"),\n  mainPromptString: z.string().optional().describe(\"String prompt utama yang mungkin dikirim dari UI atau diambil dari Firestore.\"),\n  currentDate: z.string().optional(),\n  currentTime: z.string().optional(),\n  tomorrowDate: z.string().optional(),\n  dayAfterTomorrowDate: z.string().optional(),\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui dari interaksi sebelumnya atau database.\"),\n});\nexport type ZoyaChatInput = z.infer<typeof ZoyaChatInputSchema>; // Diexport untuk UI\n\n// Skema output untuk wrapper function (digunakan oleh UI)\n// Definisikan di sini\nconst WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>; // Diexport untuk UI\n\n\n// --- Schemas for delegateServiceInquiryToSpecialistTool (defined locally in this 'use server' file) ---\nconst DelegateServiceInquiryInputSchema = z.object({\n  serviceKeyword: z.string().describe(\"Kata kunci layanan yang ditanyakan user, mis. 'coating', 'detailing'.\"),\n  customerQuery: z.string().describe(\"Pesan asli dari pelanggan, untuk konteks.\"),\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui (nama, ukuran).\"),\n});\n\nconst DelegateServiceInquiryOutputSchema = z.object({\n  responseText: z.string().describe(\"Teks balasan yang dihasilkan oleh sub-flow ini.\"),\n});\n// --- End Schemas for delegateServiceInquiryToSpecialistTool ---\n\n\n// Tool untuk mendelegasikan ke sub-flow handleServiceInquiry\nconst delegateServiceInquiryToSpecialistTool = ai.defineTool(\n  {\n    name: 'delegateServiceInquiryToSpecialist',\n    description: 'Gunakan tool ini jika pelanggan bertanya tentang jenis layanan secara umum (misalnya, \"coating itu apa?\", \"apa saja layanan detailing?\", \"info cuci dong\"). Tool ini akan membantu menjelaskan layanan tersebut, mencari paket yang relevan, dan menanyakan detail motor jika diperlukan.',\n    inputSchema: DelegateServiceInquiryInputSchema, // Uses locally defined schema\n    outputSchema: DelegateServiceInquiryOutputSchema, // Uses locally defined schema\n  },\n  async (input: HandleServiceInquiryInput /* Type from sub-flow is fine here */) => {\n    console.log(\"[MainFlowTool:delegateServiceInquiry] Delegating to handleServiceInquiry sub-flow with input:\", input);\n    // Memanggil fungsi async yang diimpor dari sub-flow\n    const subFlowResult: HandleServiceInquiryOutput = await handleServiceInquiry(input);\n    return subFlowResult; // Pastikan outputnya sesuai dengan DelegateServiceInquiryOutputSchema\n  }\n);\n\n\n// Flow utama\nconst zoyaChatFlow = ai.defineFlow(\n  {\n    name: 'zoyaChatFlow',\n    inputSchema: ZoyaChatInputSchema, // Menggunakan skema input yang sudah didefinisikan lokal\n    outputSchema: z.string(), // Output flow adalah string balasan\n  },\n  async (input: ZoyaChatInput): Promise<string> => {\n    console.log(\"[CS-FLOW] zoyaChatFlow input. Customer Message:\", input.customerMessage, \"History Length:\", (input.messages || []).length);\n\n    // Asumsi: customerMessage adalah pesan terbaru dan sudah ada di input.messages jika history ada.\n    // Jika tidak, gunakan input.customerMessage\n    const lastUserMessageContent = input.customerMessage || \n                                   (input.messages && input.messages.length > 0 ? input.messages[input.messages.length - 1].content : '');\n\n    if (!lastUserMessageContent || lastUserMessageContent.trim() === '') {\n      // Handle empty or invalid message if necessary, e.g., return a default polite refusal\n      return \"Maaf, Zoya tidak menerima pesan yang jelas.\";\n    }\n    \n    let dynamicContext = `INFO_UMUM_BENGKEL: QLAB Moto Detailing adalah bengkel perawatan dan detailing motor.`;\n    if (!db) {\n        console.warn(\"[CS-FLOW] Firestore DB (db) is not initialized. Some context might be missing.\");\n        dynamicContext += \" WARNING: Database tidak terhubung, info detail mungkin tidak akurat.\";\n    }\n    \n    const mainPromptFromSettings = input.mainPromptString || DEFAULT_AI_SETTINGS.mainPrompt;\n\n    // Construct the final system prompt by replacing placeholders\n    const finalSystemPrompt = mainPromptFromSettings\n                                .replace(\"{{{dynamicContext}}}\", dynamicContext)\n                                .replace(\"{{{customerMessage}}}\", input.customerMessage) // Ini akan digantikan oleh pesan user di array `messages`\n                                .replace(\"{{{knownMotorcycleName}}}\", input.knownMotorcycleInfo?.name || \"belum diketahui\")\n                                .replace(\"{{{knownMotorcycleSize}}}\", input.knownMotorcycleInfo?.size || \"belum diketahui\");\n\n\n    // Format messages for AI: history + current message\n    // Ensure `content` is an array of `Part` objects, e.g., [{ text: \"...\" }]\n    const historyForAI = (input.messages || [])\n      .filter(msg => msg.content && msg.content.trim() !== '') // Filter out empty messages\n      .map((msg) => ({\n        role: msg.role,\n        content: [{ text: msg.content }], // Ensure content is array of Part\n    }));\n    \n    const messagesForAI = [\n      ...historyForAI,\n      { role: 'user' as const, content: [{ text: input.customerMessage }] } // Ensure content is array of Part\n    ];\n\n    console.log(`[CS-FLOW] Calling ai.generate with model googleai/gemini-1.5-flash-latest. History Length: ${historyForAI.length}`);\n    console.log(`[CS-FLOW] System Prompt being used (simplified): ${finalSystemPrompt.substring(0, 300)}...`);\n\n    try {\n      const result = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest',\n        prompt: finalSystemPrompt, // Pass the constructed system prompt here\n        messages: messagesForAI,\n        tools: [cariSizeMotorTool, cariInfoLayananTool, delegateServiceInquiryToSpecialistTool],\n        toolChoice: 'auto', // Let AI decide when to use tools\n        config: { temperature: 0.5 },\n      });\n\n      console.log(\"[CS-FLOW] Raw AI generate result:\", JSON.stringify(result, null, 2));\n      \n      let suggestedReply = result.text || \"\"; // Use result.text (Genkit v1.x)\n      const toolRequest = result.toolRequest; // Access toolRequest directly (Genkit v1.x)\n\n      if (toolRequest) {\n        console.log(\"[CS-FLOW] AI requested a tool call:\", JSON.stringify(toolRequest, null, 2));\n        let toolOutputContent: any = \"Tool tidak dikenal atau input salah.\"; // Default, should be replaced\n        let toolUsedSuccessfully = false;\n\n        if (toolRequest.name === 'cariSizeMotor' && toolRequest.input) {\n          // Directly call the implementation function of the tool\n          const sizeOutput = await (cariSizeMotorTool.fn as Function)(toolRequest.input as CariSizeMotorInput);\n          toolOutputContent = sizeOutput;\n          toolUsedSuccessfully = true;\n        } else if (toolRequest.name === 'cariInfoLayanan' && toolRequest.input) {\n          const layananOutput = await (cariInfoLayananTool.fn as Function)(toolRequest.input as CariInfoLayananInput);\n          toolOutputContent = layananOutput;\n          toolUsedSuccessfully = true;\n        } else if (toolRequest.name === 'delegateServiceInquiryToSpecialist' && toolRequest.input) {\n          const subFlowOutput = await (delegateServiceInquiryToSpecialistTool.fn as Function)(toolRequest.input as HandleServiceInquiryInput);\n          toolOutputContent = subFlowOutput; // The output from the sub-flow\n          // If the sub-flow already crafted a full response, we might use it directly\n          if (subFlowOutput && typeof subFlowOutput.responseText === 'string') {\n            suggestedReply = subFlowOutput.responseText;\n            console.log(\"[CS-FLOW] Sub-flow returned responseText, using it directly:\", suggestedReply);\n            return suggestedReply; // Important: Return directly if sub-flow provides full answer\n          }\n          toolUsedSuccessfully = true;\n        }\n\n\n        if (toolUsedSuccessfully && !(toolRequest.name === 'delegateServiceInquiryToSpecialist' && toolOutputContent?.responseText)) {\n            // Only call AI again if the tool didn't already provide a complete response text (like the sub-flow might)\n            console.log(`[CS-FLOW] Tool ${toolRequest.name} output:`, JSON.stringify(toolOutputContent, null, 2));\n            // Call AI again with tool result\n            const modelResponseAfterTool = await ai.generate({\n                model: 'googleai/gemini-1.5-flash-latest',\n                prompt: finalSystemPrompt, // Or a more specific prompt for summarizing tool results\n                messages: [ \n                ...messagesForAI, \n                result.message,  // Previous AI message (that requested the tool)\n                { \n                    role: 'tool',\n                    content: [{\n                    toolResponse: {\n                        name: toolRequest.name,\n                        output: toolOutputContent, \n                    }\n                    }]\n                }\n                ],\n                config: { temperature: 0.5 },\n            });\n            suggestedReply = modelResponseAfterTool.text || \"Zoya bingung setelah pakai alat, coba lagi ya.\";\n        } else if (!suggestedReply) {\n             suggestedReply = \"Maaf, Zoya tidak berhasil memproses permintaan alatnya atau tool tidak dikenal.\";\n        }\n      }\n\n      // Log finish reason and safety ratings\n      const finishReason = result.finishReason;\n      const safetyRatings = result.safetyRatings; // Array of safety ratings\n      console.log(`[CS-FLOW] AI Finish Reason: ${finishReason}`);\n      if (safetyRatings && safetyRatings.length > 0) {\n        console.log('[CS-FLOW] AI Safety Ratings:', JSON.stringify(safetyRatings, null, 2));\n        // You might want to check specific ratings here if needed\n      }\n\n      if (!suggestedReply && finishReason !== \"stop\") {\n        // This case might happen if AI generation fails or is blocked by safety without a tool request\n        console.error(`[CS-FLOW] ❌ AI generation failed or tool handling error. Finish Reason: ${finishReason}. Safety: ${JSON.stringify(safetyRatings)}`);\n        return \"Maaf, Zoya lagi agak bingung nih boskuu. Coba tanya lagi dengan cara lain ya, atau hubungi CS langsung.\";\n      }\n      return suggestedReply;\n\n    } catch (flowError: any) {\n        console.error(\"[CS-FLOW] ❌ Critical error dalam flow zoyaChatFlow:\", flowError);\n        if (flowError.cause) console.error(\"[CS-FLOW] Error Cause:\", JSON.stringify(flowError.cause, null, 2));\n        return `Waduh, Zoya lagi error nih, boskuu. Coba tanya lagi nanti ya. (Pesan Error: ${flowError.message || 'Kesalahan internal tidak diketahui'})`;\n    }\n  }\n);\n\n// Wrapper function yang akan dipanggil oleh UI atau API route\nexport async function generateWhatsAppReply(input: ZoyaChatInput): Promise<WhatsAppReplyOutput> {\n  console.log(\"[CS-FLOW] generateWhatsAppReply input:\", JSON.stringify(input, null, 2));\n\n  let mainPromptToUse = input.mainPromptString;\n\n  if (!mainPromptToUse) {\n    try {\n      if (db) {\n        const settingsDocRef = doc(db, 'appSettings', 'aiAgentConfig');\n        const docSnap = await getFirestoreDoc(settingsDocRef);\n        if (docSnap.exists() && docSnap.data()?.mainPrompt) {\n          mainPromptToUse = docSnap.data().mainPrompt;\n          console.log(\"[CS-FLOW] generateWhatsAppReply: Using mainPromptString from Firestore.\");\n        } else {\n          console.log(\"[CS-FLOW] generateWhatsAppReply: mainPrompt not found in Firestore or is empty. Checking default.\");\n          mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n          console.log(\"[CS-FLOW] generateWhatsAppReply: Using DEFAULT_AI_SETTINGS.mainPrompt.\");\n        }\n      } else { // db not available\n        console.log(\"[CS-FLOW] generateWhatsAppReply: Firestore (db) not available. Using default for mainPrompt.\");\n        mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n      }\n    } catch (error) {\n      console.error(\"[CS-FLOW] generateWhatsAppReply: Error fetching mainPrompt from Firestore. Using default.\", error);\n      mainPromptToUse = DEFAULT_AI_SETTINGS.mainPrompt;\n    }\n  } else {\n     console.log(\"[CS-FLOW] generateWhatsAppReply: Using mainPromptString directly from input.\");\n  }\n\n  // Pastikan flowInput sesuai dengan ZoyaChatInputSchema\n  const flowInput: ZoyaChatInput = {\n    ...input, // Teruskan semua properti input asli, termasuk knownMotorcycleInfo jika ada\n    messages: input.messages || [], // Pastikan messages adalah array\n    mainPromptString: mainPromptToUse, // Gunakan prompt yang sudah ditentukan\n  };\n\n  try {\n    const replyText = await zoyaChatFlow(flowInput);\n    return { suggestedReply: replyText };\n  } catch (error: any) {\n    console.error(\"[CS-FLOW Wrapper] Error running zoyaChatFlow:\", error);\n    return { suggestedReply: `Maaf, Zoya sedang ada kendala teknis. (${error.message || 'Tidak diketahui'})` };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4053660f6447b38038e1d20965a3df3cd57a2a7b51'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1229, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1243, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}