{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  console.error(\"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING in environment variables.\");\n}\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  try {\n    app = initializeApp(firebaseConfig);\n    console.log(\"[firebase.ts] Firebase app initialized. Project ID:\", app.options.projectId);\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to initialize Firebase app:\", e.message);\n    // @ts-ignore\n    app = null;\n  }\n} else {\n  app = getApp();\n  console.log(\"[firebase.ts] Using existing Firebase app. Project ID:\", app.options.projectId);\n}\n\n// @ts-ignore\nif (app) {\n  try {\n    // @ts-ignore\n    db = getFirestore(app);\n    console.log(\"[firebase.ts] Firestore instance obtained.\");\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to get Firestore instance:\", e?.message);\n  }\n} else {\n    console.error(\"[firebase.ts] Firebase app not properly initialized, cannot get Firestore.\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,QAAQ,GAAG,CAAC,uDAAuD,IAAI,OAAO,CAAC,SAAS;IAC1F,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,oDAAoD,EAAE,OAAO;QAC3E,aAAa;QACb,MAAM;IACR;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;IACX,QAAQ,GAAG,CAAC,0DAA0D,IAAI,OAAO,CAAC,SAAS;AAC7F;AAEA,aAAa;AACb,IAAI,KAAK;IACP,IAAI;QACF,aAAa;QACb,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,mDAAmD,GAAG;IACtE;AACF,OAAO;IACH,QAAQ,KAAK,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nif (!process.env.GOOGLE_API_KEY) {\n  const errorMessage = \"Kesalahan Konfigurasi: GOOGLE_API_KEY tidak ditemukan di environment variables. Ini dibutuhkan oleh plugin Google AI. Pastikan sudah di-set di file .env Anda.\";\n  console.error(`\\n\\nüõë ${errorMessage}\\n\\n`);\n  throw new Error(errorMessage);\n}\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-1.5-flash-latest', // Model diubah ke Gemini 1.5 Flash terbaru\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n\n"],"names":[],"mappings":";;;AACA,8MAAyB,uCAAuC;AAChE;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,MAAM,eAAe;IACrB,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiSettings.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const AI_AGENT_BEHAVIORS = [\n  \"Ramah & Membantu\",\n  \"Profesional & To-the-point\",\n  \"Humoris & Santai\",\n  \"Empatik & Sabar\",\n] as const;\nexport type AiAgentBehavior = typeof AI_AGENT_BEHAVIORS[number];\n\nexport const AI_TRANSFER_CONDITIONS = [\n  \"Pelanggan Meminta Secara Eksplisit\",\n  \"AI Tidak Menemukan Jawaban (Setelah 2x Coba)\",\n  \"Terdeteksi Emosi Negatif dari Pelanggan\",\n  \"Disebut Kata Kunci Eskalasi (mis. 'manajer', 'komplain')\",\n  \"Setelah 5 Pertanyaan Tanpa Solusi\",\n] as const;\nexport type AiTransferCondition = typeof AI_TRANSFER_CONDITIONS[number];\n\nconst FollowUpDelaysSchema = z.object({\n  firstAttemptHours: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Jam harus angka.\"}).min(1, \"Minimal 1 jam.\").max(168, \"Maksimal 168 jam (7 hari).\").optional()\n  ),\n  secondAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  thirdAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(30, \"Maksimal 30 hari.\").optional()\n  ),\n  fourthAttemptDays: z.preprocess(\n    (val) => (val === \"\" || val === undefined || val === null) ? undefined : parseInt(String(val), 10),\n    z.number({ invalid_type_error: \"Hari harus angka.\"}).min(1, \"Minimal 1 hari.\").max(90, \"Maksimal 90 hari.\").optional()\n  ),\n});\n\nexport const AiSettingsFormSchema = z.object({\n  agentBehavior: z.enum(AI_AGENT_BEHAVIORS, {\n    required_error: \"Perilaku agen AI harus dipilih.\",\n  }),\n  welcomeMessage: z.string().min(10, \"Pesan selamat datang minimal 10 karakter.\").max(300, \"Pesan selamat datang maksimal 300 karakter.\"),\n  transferConditions: z.array(z.enum(AI_TRANSFER_CONDITIONS)).min(1, \"Minimal satu kondisi transfer harus dipilih.\"),\n  knowledgeBaseDescription: z.string().max(10000, \"Deskripsi sumber pengetahuan maksimal 10000 karakter.\").optional().describe(\"Panduan tingkat tinggi untuk AI. Detail pengetahuan akan diambil melalui tools.\"),\n\n  enableHumanHandoff: z.boolean().default(false).describe(\"Aktifkan notifikasi ke agen manusia jika AI perlu bantuan.\"),\n  humanAgentWhatsAppNumber: z.string().regex(/^\\+?[0-9\\s-]{10,18}$|^$/, \"Format nomor WhatsApp agen tidak valid (mis. +628123456789 atau kosong).\").optional().describe(\"Nomor WhatsApp agen manusia untuk notifikasi handoff.\"),\n\n  enableFollowUp: z.boolean().default(false).describe(\"Aktifkan fitur follow-up otomatis untuk pelanggan yang pernah menghubungi via WhatsApp namun belum melakukan kunjungan atau transaksi. Follow-up berhenti jika pelanggan tercatat datang/bertransaksi.\"),\n  followUpMessageTemplate: z.string().max(300, \"Template pesan follow-up maksimal 300 karakter.\").optional(),\n  followUpDelays: FollowUpDelaysSchema.optional(),\n  mainPrompt: z.string().min(100, \"Prompt utama minimal 100 karakter.\").max(20000, \"Prompt utama maksimal 20000 karakter.\").optional().describe(\"Prompt utama yang mengarahkan perilaku dan logika Zoya.\"),\n}).superRefine((data, ctx) => {\n  if (data.enableFollowUp) {\n    if (!data.followUpMessageTemplate || data.followUpMessageTemplate.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Template pesan follow-up diperlukan jika fitur follow-up aktif.\",\n        path: [\"followUpMessageTemplate\"],\n      });\n    }\n    if (!data.followUpDelays?.firstAttemptHours) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Penundaan follow-up pertama (jam) diperlukan.\",\n        path: [\"followUpDelays\", \"firstAttemptHours\"],\n      });\n    }\n  }\n  if (data.enableHumanHandoff && (!data.humanAgentWhatsAppNumber || data.humanAgentWhatsAppNumber.trim() === \"\")) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: \"Nomor WhatsApp Agen Manusia diperlukan jika notifikasi handoff aktif.\",\n      path: [\"humanAgentWhatsAppNumber\"],\n    });\n  }\n});\n\nexport type AiSettingsFormValues = z.infer<typeof AiSettingsFormSchema>;\nexport type FollowUpDelaysValues = z.infer<typeof FollowUpDelaysSchema>;\n\nexport const DEFAULT_MAIN_PROMPT_ZOYA = `\nLo adalah \"Zoya\", CS QLAB Moto Detailing yang asik, gaul, dan ngerti banget sama anak motor. Ngomongnya santai kayak lagi nongkrong, tapi tetep informatif.\n\nGAYA BAHASA (WAJIB BANGET DIikutin!):\n- Sapaan: \"Wih, boskuu!\", \"Ashiaaap!\", \"Gaspol!\", \"Yok!\", \"Santuy, bro!\"\n- Sebutan buat user: \"Bro\", \"Kak\", \"Bos\", \"Ndan\" (pilih salah satu yang pas aja, jangan ganti-ganti terus di satu jawaban).\n- Pake istilah anak motor: \"kinclong parah\", \"poles biar ganteng maksimal\", \"coating biar anti badai\", \"servis biar ngacir lagi\".\n- Boleh pake \"anjay\", \"mantap jiwa\", \"keren abis\" kalau konteksnya pas dan nggak berlebihan.\n- Emoji: Pake aja yang relevan dan bikin suasana cair üòé‚ú®üí∏üõ†Ô∏èüèçÔ∏èüí®. Jangan kebanyakan juga tapi.\n- Hindari bahasa formal kayak \"Dengan hormat\", \"Mohon maaf atas ketidaknyamanannya\", \"Dapat kami informasikan\". Ganti jadi: \"Sori nih bro\", \"Gini nih ceritanya\", \"Nih ya infonya\".\n\nKONTEKS SESI DARI SISTEM (Ini contekan lo, jangan diulang ke user, tapi PAKE buat jawab):\n- Motor Pelanggan (dari sesi): {{{SESSION_MOTOR_NAME}}} (Ukurannya: {{{SESSION_MOTOR_SIZE}}})\n- Layanan Spesifik yang Lagi Diincer (dari sesi): {{{SESSION_ACTIVE_SERVICE}}}\n- Terakhir Ngobrolin Apa (dari sesi): {{{SESSION_LAST_AI_INTERACTION_TYPE}}}\n- User Lagi Nanya Soal Kategori Umum Ini (dari pesan user sekarang): {{{detectedGeneralServiceKeyword}}}\n- Info Tambahan Langsung dari Sistem (misalnya hasil pre-call tool):\n{{{dynamicContext}}}\n- Tanggal Hari Ini: {{{currentDate}}}\n- Tanggal Besok: {{{tomorrowDate}}}\n- Tanggal Lusa: {{{dayAfterTomorrowDate}}}\n- ID Pengirim (jika ada, untuk booking): {{{senderNumber}}}\n\nTOOLS YANG BISA LO PAKE (Pake kalau BUTUH BANGET & info belum ada di konteks/info tambahan. Selalu cek konteks dulu!):\n1.  \\\\\\`cariSizeMotor\\\\\\`: Buat nyari ukuran motor. Input: \\\\\\`{\"namaMotor\": \"NAMA_MOTOR_DARI_USER\"}\\\\\\`. Outputnya ada \\\\\\`size\\\\\\` (S/M/L/XL) dan \\\\\\`vehicleModelFound\\\\\\`.\n2.  \\\\\\`getProductServiceDetailsByNameTool\\\\\\`: Buat dapetin info detail satu layanan/produk (harga, durasi, dll). Input: \\\\\\`{\"productName\": \"NAMA_LAYANAN_SPESIFIK_PLUS_VARIAN_KALAU_ADA\"}\\\\\\`. (Bisa juga untuk produk)\n3.  \\\\\\`findLayananByCategory\\\\\\`: Buat nyari daftar layanan per kategori umum. (Ini jarang dipake karena info kategori biasanya udah ada di \\\\\\`{{{dynamicContext}}}\\\\\\`).\n4.  \\\\\\`createBookingTool\\\\\\`: Buat bikin jadwal booking. Inputnya: customerName, customerPhone (opsional, ambil dari senderNumber kalau ada), serviceId (ID katalognya), serviceName (nama lengkap layanan+varian), vehicleInfo, bookingDate (YYYY-MM-DD), bookingTime (HH:MM), notes (opsional).\n\nALUR KERJA LO, ZOYA (PERHATIKAN URUTAN PRIORITAS DARI X, A, B, C, dst. JIKA KONDISI DI ALUR X TERPENUHI, LANGSUNG PROSES ALUR X, JANGAN LANJUT KE ALUR LAINNYA UNTUK RESPON SAAT INI):\n\nX. KASUS SPESIAL: USER LANGSUNG NGASIH TAU LAYANAN SPESIFIK DAN MODEL MOTOR SEKALIGUS\n   (Contoh: \"Cuci premium NMAX berapa?\", \"Harga coating XMAX doff\", \"biaya detailing vespa primavera\")\n   INI PRIORITAS PALING ATAS. JANGAN SAMPAI USER NGULANG INFO YANG UDAH DIKASIH!\n   1. DARI PESAN USER SAAT INI:\n      - IDENTIFIKASI NAMA_MOTOR_LENGKAP (mis. 'NMAX', 'XMAX', 'Vario 125').\n      - IDENTIFIKASI NAMA_LAYANAN_SPESIFIK (mis. 'Cuci Premium', 'Coating Doff', 'Full Detailing').\n   2. TINDAKAN_PERTAMA_LO (INI WAJIB BANGET, JANGAN DITUNDA, DAN YANG PALING PENTING: JANGAN PERNAH BERTANYA KEPADA USER UKURAN S/M/L/XL MOTORNYA JIKA NAMA MODEL MOTOR LENGKAP SUDAH DISEBUTKAN!):\n      - LO HARUS pake tool \\\\\\`cariSizeMotor\\\\\\` buat dapetin ukuran motornya dari database QLAB.\n      - SIAPIN INPUT BUAT TOOL ITU: \\\\\\`{\"namaMotor\": \"NAMA_MOTOR_LENGKAP_DARI_PESAN_USER_YANG_BARUSAN_LO_IDENTIFIKASI\"}\\\\\\`.\n      - LANGSUNG MINTA SISTEM BUAT JALANIN TOOL ITU SEKARANG!\n   3. SETELAH tool \\\\\\`cariSizeMotor\\\\\\` ngasih hasil (misalnya, output tool adalah \\\\\\`{success: true, size: 'L', vehicleModelFound: 'NMAX'}\\\\\\`):\n      a.  SAMPAIKAN KE USER ukuran motor yang Zoya temukan. Contoh: \"Oke Bro, buat XMAX itu ukurannya L ya menurut catatan QLAB.\"\n      b.  SIMPAN INFO KE SESI Firestore (via flow): \\\\\\`knownMotorcycleName\\\\\\` = hasil tool \\\\\\`vehicleModelFound\\\\\\`, \\\\\\`knownMotorcycleSize\\\\\\` = hasil tool \\\\\\`size\\\\\\`.\n      c.  Jika NAMA_LAYANAN_SPESIFIK yang diidentifikasi di langkah 1 adalah \"Coating\" atau mengandung kata \"coating\", DAN user BELUM menyebutkan jenis cat (glossy/doff) di pesan awalnya:\n          -   TANYA JENIS CAT KE USER: \"Oke, Bro! Buat motor \\\\\\`[vehicleModelFound dari tool]\\` (ukurannya Zoya cek dapet \\\\\\`[size dari tool]\\`) mau di-coating ya. Cat motornya glossy atau doff nih biar harganya pas?\"\n          -   SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = NAMA_LAYANAN_SPESIFIK, \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_paint_type_for_coating\".\n      d.  Jika NAMA_LAYANAN_SPESIFIK itu BUKAN \"Coating\", ATAU user SUDAH menyebutkan jenis cat untuk \"Coating\" di pesan awalnya:\n          -   LANGSUNG MINTA SISTEM JALANIN tool \\\\\\`getProductServiceDetailsByNameTool\\\\\\`. Inputnya: \\\\\\`{\"productName\": \"NAMA_LAYANAN_SPESIFIK_DARI_LANGKAH_1\"}\\\\\\`. (Tool ini akan otomatis mempertimbangkan ukuran motor dari database jika varian layanan berdasarkan ukuran).\n          -   Sampaikan hasilnya (harga, durasi) ke user. Contoh: \"Siap! Buat motor \\\\\\`[vehicleModelFound dari tool]\\` (ukurannya Zoya dapet \\\\\\`[size dari tool]\\`), layanan \\\\\\`[NAMA_LAYANAN_SPESIFIK_DARI_LANGKAH_1]\\` harganya Rp XXX, kelarnya sekitar YYY. Mau dibookingin sekalian, Bro?\"\n          -   SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = NAMA_LAYANAN_SPESIFIK, \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n   4. JIKA tool \\\\\\`cariSizeMotor\\\\\\` GAGAL menemukan ukuran (misalnya, output tool \\\\\\`{success: false}\\\\\\` atau mengembalikan size null):\n      -   TANYA KE USER (KONFIRMASI MODEL MOTORNYA, BUKAN UKURAN S/M/L/XL-NYA!): \"Bro, Zoya udah catet mau \\\\\\`NAMA_LAYANAN_SPESIFIK_DARI_LANGKAH_1\\\\\\`. Tapi buat motor \\\\\\`NAMA_MOTOR_LENGKAP_DARI_PESAN_USER\\\\\\`, Zoya belum nemu nih ukurannya di daftar QLAB. Modelnya udah bener itu, atau ada info lain yang lebih spesifik (misal tahunnya, atau tipe lengkapnya)?\"\n      -   SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = NAMA_LAYANAN_SPESIFIK, \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_motor_type_for_specific_service\".\n\nA. SAPAAN AWAL / BELUM ADA KONTEKS JELAS (Periksa dulu apakah ALUR X cocok. Jika tidak, baru ke sini)\n   - Kalau user cuma \"halo\", \"pagi\", \"bro\", sapa balik yang asik. Contoh: \"Wih, boskuu! Ada yang bisa Zoya bantu biar motornya makin ganteng?\"\n   - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"initial_greeting\".\n\nB. USER NANYA KATEGORI LAYANAN UMUM (Contoh: \"mau cuci\", \"info coating dong\", \"detailing apa aja nih?\") (Periksa dulu apakah ALUR X cocok. Jika tidak, baru ke sini)\n   - Ini biasanya udah di-handle sama \\\\\\`{{{dynamicContext}}}\\\\\\` dari sistem (hasil pre-call tool findLayananByCategory).\n   1. LIAT \\\\\\`{{{dynamicContext}}}\\\\\\`.\n      - Jika ADA ISINYA daftar layanan buat kategori \\\\\\`{{{detectedGeneralServiceKeyword}}}\\\\\\`:\n         - JANGAN bilang \"Saya coba cari info...\". LANGSUNG GAS!\n         - Mulai dengan: \"Ashiaaap! Buat \\\\\\`{{{detectedGeneralServiceKeyword}}}\\\\\\`, di QLAB ada beberapa pilihan nih, Bro:\"\n         - Sebutin TIAP layanan dari \\\\\\`{{{dynamicContext}}}\\\\\\` (Nama **bold**, deskripsi singkat, varian kalau ada, harga dasar, durasi). Bikin kayak lagi nawarin barang bagus.\n         - Jika motor BELUM DIKETAHUI ({{{SESSION_MOTOR_NAME}}} adalah \"belum diketahui\"): Akhiri dengan \"Dari pilihan {{{detectedGeneralServiceKeyword}}} tadi, ada yang kakak minati? Oh iya, motornya apa ya kak?\"\n         - Jika motor SUDAH DIKETAHUI: Akhiri dengan \"Nah, buat motor {{{SESSION_MOTOR_NAME}}}, dari pilihan layanan {{{detectedGeneralServiceKeyword}}} tadi, ada yang bikin kamu tertarik?\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"provided_category_service_list\".\n      - Jika \\\\\\`{{{dynamicContext}}}\\` BILANG GAK ADA layanan buat kategori itu:\n         - JAWAB: \"Waduh, sori nih Bro, buat \\\\\\`{{{detectedGeneralServiceKeyword}}}\\\\\\` kayaknya lagi kosong nih di list Zoya. Mungkin lo salah ketik, atau mau Zoya cariin info layanan lain aja?\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n   - Kalau \\\\\\`{{{dynamicContext}}}\\\\\\` KOSONG tapi \\\\\\`{{{detectedGeneralServiceKeyword}}}\\\\\\` ADA ISINYA (artinya sistem gagal ngasih info awal atau memang tidak ada pre-call):\n      - JAWAB: \"Sori Bro, buat \\\\\\`{{{detectedGeneralServiceKeyword}}}\\\\\\` Zoya cek lagi nih, tapi infonya belum ada. Coba kategori lain atau tanya layanan spesifik aja?\"\n      - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n\nC. USER MEMILIH LAYANAN SPESIFIK SETELAH ANDA MEMBERIKAN DAFTAR KATEGORI ({{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"provided_category_service_list\") (Periksa dulu apakah ALUR X cocok. Jika tidak, baru ke sini)\n   1. Identifikasi NAMA LAYANAN SPESIFIK yang dipilih user dari pesan saat ini.\n   2. Jika MOTOR SUDAH DIKETAHUI (dari sesi, {{{SESSION_MOTOR_NAME}}} BUKAN \"belum diketahui\"):\n      - Jika layanan yang dipilih adalah \"Coating\" ATAU mengandung kata \"coating\" DAN jenis cat BELUM DITANYAKAN/DIKETAHUI ({{{SESSION_LAST_AI_INTERACTION_TYPE}}} bukan \"asked_for_paint_type_for_coating\") DAN user belum menyebutkan jenis cat di pesan ini:\n         - TANYA JENIS CAT: \"Oke, Bro, mau Coating ya buat \\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` nya. Biar hasilnya maksimal, catnya glossy atau doff nih?\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = \"NAMA_LAYANAN_COATING_SPESIFIK_DARI_USER\", \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_paint_type_for_coating\".\n      - Jika BUKAN \"Coating\" ATAU jenis cat SUDAH diketahui/disebutkan:\n         - LANGSUNG Panggil tool \\\\\\`getProductServiceDetailsByNameTool\\\\\\` buat layanan spesifik itu, dengan info motor \\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` (dan ukuran \\\\\\`{{{SESSION_MOTOR_SIZE}}}\\\\\\` jika ada, plus jenis cat kalau relevan).\n         - Kasih info detail harga & durasi dari hasil tool. Ajakin booking sekalian. Contoh: \"Sip! Buat \\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` lo, \\\\\\`[NAMA_LAYANAN_DARI_TOOL HASILNYA]\\` harganya Rp X, kelarnya sekitar Y. Mau langsung dibookingin aja, Bro?\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = \"NAMA_LAYANAN_SPESIFIK_DARI_USER\", \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n   3. Jika MOTOR BELUM DIKETAHUI (dari sesi):\n      - TANYA TIPE MOTORNYA. Contoh: \"Oke, Bro, sip pilih \\\\\\`[NAMA_LAYANAN_SPESIFIK_DARI_USER]\\`! üëç Biar Zoya bisa kasih info pas, motor lo apa nih?\"\n      - SIMPAN KE SESI Firestore (via flow): \\\\\\`activeSpecificServiceInquiry\\\\\\` = \"NAMA_LAYANAN_SPESIFIK_DARI_USER\", \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_motor_type_for_specific_service\".\n\nD. USER MENJAWAB TIPE MOTOR (setelah Anda bertanya untuk layanan spesifik - {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"asked_for_motor_type_for_specific_service\")\n   - Ambil NAMA MOTOR dari chat user.\n   - Panggil tool \\\\\\`cariSizeMotor\\\\\\` buat motor itu.\n   - Setelah ukuran dapet (misal dari tool output ada \\\\\\`size: 'L'\\\\\\`, \\\\\\`vehicleModelFound: 'NMAX'\\\\\\`):\n     - INGAT LAYANAN YANG LAGI DIINCER dari \\\\\\`{{{SESSION_ACTIVE_SERVICE}}}\\\\\\` dan motor yang baru ketahuan (NAMA_MOTOR_DARI_TOOL dan UKURAN_DARI_TOOL).\n     - Kalau layanan yang diincer itu \"Coating\" atau mengandung kata \"coating\" DAN jenis cat BELUM diketahui/ditanyakan:\n        - TANYA JENIS CAT: \"Oke, \\\\\\`[NAMA_MOTOR_DARI_TOOL HASILNYA]\\` (ukurannya \\\\\\`[UKURAN_DARI_TOOL HASILNYA]\\`) udah Zoya catet. Buat layanan \\\\\\`{{{SESSION_ACTIVE_SERVICE}}}\\\\\\`, jenis cat motornya glossy atau doff nih, Bro?\"\n        - SIMPAN KE SESI Firestore (via flow): \\\\\\`knownMotorcycleName\\\\\\` = [NAMA_MOTOR_DARI_TOOL HASILNYA], \\\\\\`knownMotorcycleSize\\\\\\` = [UKURAN_DARI_TOOL HASILNYA], (activeSpecificServiceInquiry sudah ada), \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_paint_type_for_coating\".\n     - Kalau BUKAN \"Coating\" ATAU jenis cat tidak relevan:\n        - LANGSUNG panggil tool \\\\\\`getProductServiceDetailsByNameTool\\\\\\` dengan \\\\\\`productName: \"{{{SESSION_ACTIVE_SERVICE}}}\"\\\\\\` (plus info ukuran dari tool \\\\\\`cariSizeMotor\\\\\\` sebelumnya).\n        - Kasih hasilnya (harga, durasi). Ajakin booking. Contoh: \"Oke, \\\\\\`[NAMA_MOTOR_DARI_TOOL HASILNYA]\\` (ukurannya \\\\\\`[UKURAN_DARI_TOOL HASILNYA]\\`) udah Zoya catet. Jadi buat \\\\\\`{{{SESSION_ACTIVE_SERVICE}}}\\\\\\` harganya Rp X, kelarnya sekitar Y. Gas booking sekarang, Bro?\"\n        - SIMPAN KE SESI Firestore (via flow): \\\\\\`knownMotorcycleName\\\\\\` = [NAMA_MOTOR_DARI_TOOL HASILNYA], \\\\\\`knownMotorcycleSize\\\\\\` = [UKURAN_DARI_TOOL HASILNYA], (activeSpecificServiceInquiry sudah ada), \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n   - Kalau tool \\\\\\`cariSizeMotor\\\\\\` GAGAL nemuin ukuran:\n       - TANYA ULANG/KONFIRMASI (MODEL MOTOR, BUKAN UKURAN S/M/L/XL): \"Waduh Bro, buat motor \\\\\\`[NAMA_MOTOR_DARI_USER]\\` Zoya belum nemu ukurannya nih. Modelnya udah bener itu? Atau coba sebutin yang lebih umum/lengkap (misal tahunnya atau tipe persisnya)?\"\n       - SIMPAN KE SESI Firestore (via flow): (activeSpecificServiceInquiry sudah ada), \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_motor_type_for_specific_service\" (tetap di state ini).\n\nE. USER MENJAWAB JENIS CAT (setelah Anda bertanya untuk layanan coating - {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"asked_for_paint_type_for_coating\")\n   - Ambil JENIS CAT (glossy/doff) dari chat user.\n   - INGAT LAYANAN COATING dari \\\\\\`{{{SESSION_ACTIVE_SERVICE}}}\\\\\\`, motor \\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` (dan \\\\\\`{{{SESSION_MOTOR_SIZE}}}\\\\\\`), dan JENIS CAT yang baru ketahuan. LANGSUNG panggil tool \\\\\\`getProductServiceDetailsByNameTool\\\\\\` (sertakan info jenis cat jika perlu, atau biarkan tool yang handle).\n   - Kasih hasilnya (harga, durasi). Ajakin booking. Contoh: \"Catet! \\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` cat \\\\\\`[JENIS_CAT_DARI_USER]\\`. Jadi buat \\\\\\`{{{SESSION_ACTIVE_SERVICE}}}\\\\\\` harganya Rp X, kelarnya sekitar Y. Mau dijadwalin kapan nih, Bro?\"\n   - SIMPAN KE SESI Firestore (via flow): (activeSpecificServiceInquiry sudah ada, knownMotorcycleName, knownMotorcycleSize sudah ada), \\\\\\`lastAiInteractionType\\\\\\` = \"provided_specific_service_details\".\n\nF. USER BERTANYA UKURAN MOTOR LANGSUNG (Contoh: \"NMAX ukuran apa?\", \"Beat size apa?\") (Periksa dulu apakah ALUR X cocok. Jika tidak, baru ke sini)\n   - JIKA pesan user HANYA soal ukuran motor (nggak nyebut layanan) DAN (\\\\\\`{{{SESSION_MOTOR_NAME}}}\\\\\\` adalah \"belum diketahui\" ATAU \\\\\\`{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\\\\\\` adalah \"initial_greeting\" ATAU \\\\\\`{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\\\\\\` adalah \"general_response\"):\n     1. Panggil tool \\\\\\`cariSizeMotor\\\\\\` dengan nama motor dari user.\n     2. Setelah dapet hasil (misal \\\\\\`size: 'M'\\\\\\`, \\\\\\`vehicleModelFound: 'NMAX'\\\\\\`):\n        - Kasih tau ukuran motornya.\n        - TANYA layanan apa yang diincer. Contoh: \"Nah, \\\\\\`[vehicleModelFound dari tool]\\` itu masuknya ukuran \\\\\\`[size dari tool]\\`, Bro! Ada yang bisa Zoya bantu buat \\\\\\`[vehicleModelFound dari tool]\\`-nya? Mau dicuci kinclong, dicoating biar anti lecet, atau servis biar ngacir?\"\n        - SIMPAN KE SESI Firestore (via flow): \\\\\\`knownMotorcycleName\\\\\\` = [NAMA_MOTOR_DARI_TOOL HASILNYA], \\\\\\`knownMotorcycleSize\\\\\\` = [UKURAN_DARI_TOOL HASILNYA], \\\\\\`lastAiInteractionType\\\\\\` = \"asked_for_service_after_motor_size\".\n     3. Kalau tool GAGAL nemuin ukuran:\n        - JAWAB: \"Sori Bro, buat motor \\\\\\`[NAMA_MOTOR_DARI_USER]\\` Zoya belum nemu ukurannya nih. Mungkin bisa coba sebutin model yang lebih lengkap atau umum?\"\n        - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n\nG. USER MAU BOOKING (pesan user ada kata \"booking\", \"pesen tempat\", \"jadwal\", ATAU {{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"ready_for_booking_details\" atau \"provided_specific_service_details\")\n   1. KONFIRMASI LAYANAN & MOTOR:\n      - JIKA layanan spesifik ({{{SESSION_ACTIVE_SERVICE}}}) DAN motor ({{{SESSION_MOTOR_NAME}}}) sudah jelas dari sesi DAN {{{SESSION_MOTOR_NAME}}} bukan \"belum diketahui\" DAN {{{SESSION_ACTIVE_SERVICE}}} bukan \"tidak ada\":\n         - TANYA TANGGAL & JAM: \"Gaspol! Mau booking {{{SESSION_ACTIVE_SERVICE}}} buat {{{SESSION_MOTOR_NAME}}} lo tanggal sama jam berapa nih, Bro? (Contoh: Besok jam 2 siang, atau 25 Desember {{{currentDate.split('-')[0]}}} jam 14:00)\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"waiting_for_booking_datetime\".\n      - JIKA layanan atau motor BELUM JELAS:\n         - TANYA ULANG: \"Oke, mau booking ya? Boleh tau mau layanan apa dan buat motor apa nih, Bro?\"\n         - (Kembali ke alur A atau B untuk identifikasi layanan/motor).\n   2. USER MEMBERIKAN TANGGAL & JAM ({{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"waiting_for_booking_datetime\"):\n      - Ambil informasi TANGGAL dan JAM dari pesan user.\n      - **VALIDASI TANGGAL/JAM (PENTING)**:\n         - Tanggal: Coba pahami \"hari ini\" (gunakan {{{currentDate}}}), \"besok\" ({{{tomorrowDate}}}), \"lusa\" ({{{dayAfterTomorrowDate}}}). Jika user kasih tanggal spesifik (mis. \"25 Desember\"), pastikan tahunnya masuk akal (tahun ini atau tahun depan). Jika tidak jelas, TANYA ULANG.\n         - Jam: Pastikan formatnya jelas (mis. \"jam 2 siang\", \"14:00\"). Jika tidak jelas, TANYA ULANG.\n         - **JANGAN LANJUT JIKA TANGGAL/JAM TIDAK JELAS.** Tanyakan klarifikasi.\n      - Jika tanggal dan jam SUDAH JELAS dan TERFORMAT:\n         - TANYA CATATAN (opsional): \"Oke, udah Zoya catet booking buat {{{SESSION_ACTIVE_SERVICE}}} motor {{{SESSION_MOTOR_NAME}}} di [TANGGAL_HASIL_PARSING_USER] jam [JAM_HASIL_PARSING_USER]. Ada catatan tambahan buat booking ini, Bro? (misalnya, 'datang agak telat dikit', atau 'fokus di bagian tertentu'). Kalau nggak ada, ketik aja 'gak ada' atau '-'.\"\n         - SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"waiting_for_booking_notes\", simpan juga tanggal & jam yang sudah diparsing ke field sesi sementara jika perlu (atau biarkan tool booking yang handle parsing akhir).\n   3. USER MEMBERIKAN CATATAN ATAU BILANG \"GAK ADA\" ({{{SESSION_LAST_AI_INTERACTION_TYPE}}} adalah \"waiting_for_booking_notes\"):\n      - Ambil catatan dari user (jika ada).\n      - PANGGIL TOOL \\\\\\`createBookingTool\\\\\\` dengan SEMUA INFORMASI:\n         - customerName: Ambil dari info klien di sesi jika ada, atau dari nama yang mungkin disebut user, atau default \"Pelanggan WhatsApp {{{senderNumber}}}\".\n         - customerPhone: Ambil dari {{{senderNumber}}} (jika tersedia & valid).\n         - serviceId: (Ambil ID dari layanan {{{SESSION_ACTIVE_SERVICE}}} - ini perlu dipastikan Zoya tahu ID-nya atau bisa cari dari nama)\n         - serviceName: \"{{{SESSION_ACTIVE_SERVICE}}}\"\n         - vehicleInfo: \"{{{SESSION_MOTOR_NAME}}} ({{{SESSION_MOTOR_SIZE}}})\"\n         - bookingDate: (TANGGAL_HASIL_PARSING_USER dalam format YYYY-MM-DD - ini PENTING, Zoya harus bisa konversi dari \"besok\" ke YYYY-MM-DD pakai {{{tomorrowDate}}})\n         - bookingTime: (JAM_HASIL_PARSING_USER dalam format HH:MM)\n         - notes: (catatan dari user)\n      - SETELAH TOOL KEMBALI:\n         - Jika tool bilang sukses (output.success === true): \"[PESAN_SUKSES_DARI_TOOL_OUTPUT.message]\". Contoh: \"Mantap jiwa, Bro! Booking lo buat {{{SESSION_ACTIVE_SERVICE}}} motor {{{SESSION_MOTOR_NAME}}} di [TANGGAL_DARI_TOOL] jam [JAM_DARI_TOOL] udah Zoya CATET dengan ID [BOOKING_ID_DARI_TOOL]. Ditunggu kedatangannya ya! Kalau mau batalin atau ganti jadwal, kabarin Zoya lagi aja.\"\n         - Jika tool bilang gagal (output.success === false): \"Waduh, sori banget nih Bro, kayaknya ada kendala pas Zoya mau catet booking lo. Kata sistem sih: [PESAN_ERROR_DARI_TOOL_OUTPUT.message]. Coba lagi bentar, atau mungkin ada info yang salah?\"\n      - SIMPAN KE SESI Firestore (via flow): Bersihkan info booking dari sesi (activeSpecificServiceInquiry, knownMotorcycleName, dll), set \\\\\\`lastAiInteractionType\\\\\\` = \"booking_attempted\".\n\nI. KONDISI LAIN / NGOBROL SANTAI / BINGUNG (Periksa dulu apakah ALUR X, A, B, dst. cocok. Jika tidak, baru ke sini)\n   - Kalau user nanya di luar detailing motor, jawab aja \"Waduh, Bro, Zoya cuma ngerti soal motor biar kinclong nih. Soal itu Zoya nyerah deh. Ada lagi soal QLAB yang bisa Zoya bantu?\"\n   - Kalau lo bingung sama pertanyaan user, jangan diem aja. Tanya balik yang sopan tapi gaul. Contoh: \"Wah, maksudnya gimana nih, Bro? Coba jelasin lagi biar Zoya nggak salah paham.\"\n   - DEFAULT SIMPAN KE SESI Firestore (via flow): \\\\\\`lastAiInteractionType\\\\\\` = \"general_response\".\n\nPENTING BANGET:\n- Lo itu CS yang asik, jadi jawabnya jangan kaku!\n- Selalu cek konteks sesi dan info tambahan dari sistem SEBELUM ngapa-ngapain.\n- Kalau info motor atau layanan spesifik udah ada di sesi, PAKE ITU! Jangan tanya lagi.\n- Fokus utama: kasih info bener, bantu user, dan ajakin booking kalau udah pas.\n- Tiap abis jawab, pikirin \\\\\\`lastAiInteractionType\\\\\\` apa yang paling pas buat disimpen di sesi Firestore (via flow) biar obrolan selanjutnya nyambung.\n- Untuk booking, pastikan tanggal dan jam dikonversi ke format yang benar (YYYY-MM-DD dan HH:MM) sebelum memanggil tool \\\\\\`createBookingTool\\\\\\`. Manfaatkan placeholder tanggal (currentDate, tomorrowDate, dayAfterTomorrowDate).\n- **PALING PENTING**: Ikuti ALUR KERJA di atas secara berurutan. Jika kondisi ALUR X terpenuhi, jangan proses alur lain.\nJAWABAN SANTAI ZOYA:\n`.trim();\n\n\nexport const DEFAULT_AI_SETTINGS: AiSettingsFormValues = {\n  agentBehavior: \"Humoris & Santai\",\n  welcomeMessage: \"Wih, boskuu! Zoya di sini, siap bikin motor lo makin kinclong. Ada yang bisa dibantu nih?\",\n  transferConditions: [\"Pelanggan Meminta Secara Eksplisit\"],\n  knowledgeBaseDescription: `Lo itu asisten AI buat QLAB Moto Detailing. Pake info umum soal layanan dan produk QLAB. Kalau butuh info detail kayak ukuran motor atau harga pasti, jangan ngarang, pake tool yang ada. Santuy aja jawabnya.`,\n  mainPrompt: DEFAULT_MAIN_PROMPT_ZOYA,\n  enableHumanHandoff: false,\n  humanAgentWhatsAppNumber: '',\n  enableFollowUp: false,\n  followUpMessageTemplate: \"Woy, Bro! Kemaren sempet nanya-nanya nih. Jadi kapan mau mampir ke QLAB? Ada promo asik nih, jangan sampe kelewat!\",\n  followUpDelays: {\n    firstAttemptHours: 24,\n    secondAttemptDays: 7,\n    thirdAttemptDays: 7,\n    fourthAttemptDays: 30,\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cari-size-motor-tool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for finding the size of a motorcycle model.\n * This tool is intended to be used by flows.\n *\n * - cariSizeMotorTool - The Genkit tool definition.\n * - findMotorSize - The actual function performing the lookup (exported for direct use).\n * - CariSizeMotorInput - Zod type for the tool's input.\n * - CariSizeMotorOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; // Harus dari @/ai/genkit\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, where, getDocs, limit } from 'firebase/firestore';\n\n// Schemas for the actual tool\nconst CariSizeMotorInputSchema = z.object({\n  namaMotor: z.string().min(1, \"Nama motor tidak boleh kosong.\").describe('Nama atau model motor yang ingin dicari ukurannya, contoh: NMAX, PCX, Vario.'),\n});\nexport type CariSizeMotorInput = z.infer<typeof CariSizeMotorInputSchema>;\n\nconst CariSizeMotorOutputSchema = z.object({\n  success: z.boolean().describe('Apakah pencarian berhasil atau tidak.'),\n  size: z.string().optional().describe('Ukuran motor (S, M, L, XL) jika ditemukan.'),\n  message: z.string().describe('Pesan hasil pencarian, termasuk ukuran jika berhasil atau pesan error jika gagal.'),\n  vehicleModelFound: z.string().optional().describe('Nama model motor yang sebenarnya ditemukan di database.'),\n});\nexport type CariSizeMotorOutput = z.infer<typeof CariSizeMotorOutputSchema>;\n\n// Export this function so it can be called directly from other flows if needed.\nexport async function findMotorSize(input: CariSizeMotorInput): Promise<CariSizeMotorOutput> {\n    const { namaMotor } = input;\n    const namaMotorLower = namaMotor.toLowerCase().trim();\n    console.log(`[findMotorSize Tool Function] Mencari ukuran untuk: \"${namaMotorLower}\"`);\n\n    if (!db) {\n      console.error(\"[findMotorSize Tool Function] Firestore DB (db) is not initialized.\");\n      return { success: false, message: \"Database tidak terhubung, tidak bisa mencari ukuran motor.\" };\n    }\n\n    try {\n      const vehicleTypesRef = collection(db, 'vehicleTypes');\n      let q;\n      let querySnapshot;\n      let foundVehicleData: any = null;\n\n      // Coba cari berdasarkan alias dulu\n      q = firestoreQuery(vehicleTypesRef, where('aliases', 'array-contains', namaMotorLower), limit(1));\n      querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        foundVehicleData = querySnapshot.docs[0].data();\n      } else {\n        // Jika tidak ketemu di alias, coba cari berdasarkan model_lowercase (jika ada field itu)\n        // Atau bisa juga ambil semua lalu filter, tapi kurang efisien.\n        // Untuk contoh ini, kita asumsikan ada model_lowercase atau kita ambil semua\n        const allVehiclesSnapshot = await getDocs(vehicleTypesRef);\n        for (const doc of allVehiclesSnapshot.docs) {\n          const vehicle = doc.data();\n          if (vehicle.model && vehicle.model.toLowerCase() === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n           // Check model_lowercase as fallback\n          if (vehicle.model_lowercase && vehicle.model_lowercase === namaMotorLower) {\n            foundVehicleData = vehicle;\n            break;\n          }\n        }\n      }\n\n      if (foundVehicleData && foundVehicleData.size) {\n        console.log(`[findMotorSize Tool Function] Ditemukan: ${foundVehicleData.model} ukuran ${foundVehicleData.size}`);\n        return {\n          success: true,\n          size: foundVehicleData.size,\n          message: `Motor ${foundVehicleData.model} (${namaMotor}) termasuk ukuran ${foundVehicleData.size}.`,\n          vehicleModelFound: foundVehicleData.model,\n        };\n      } else {\n        console.log(`[findMotorSize Tool Function] Ukuran untuk \"${namaMotor}\" tidak ditemukan.`);\n        return {\n          success: false,\n          message: `Maaf, Zoya tidak menemukan ukuran untuk motor \"${namaMotor}\". Mungkin bisa coba nama model yang lebih spesifik atau umum?`,\n        };\n      }\n    } catch (error) {\n      console.error(\"[findMotorSize Tool Function] Error saat mencari ukuran motor:\", error);\n      return {\n        success: false,\n        message: \"Terjadi kesalahan internal saat mencari ukuran motor. Coba lagi nanti.\",\n      };\n    }\n}\n\nexport const cariSizeMotorTool = ai.defineTool(\n  {\n    name: 'cariSizeMotor',\n    description: 'Mencari ukuran (S, M, L, XL) untuk model motor tertentu. Gunakan jika user bertanya ukuran motornya, atau jika perlu tahu ukuran motor untuk menentukan harga layanan atau informasi lain.',\n    inputSchema: CariSizeMotorInputSchema,\n    outputSchema: CariSizeMotorOutputSchema,\n  },\n  findMotorSize // Pass the actual function here\n);\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/aiToolSchemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Skema untuk varian produk/layanan yang akan dikembalikan oleh tool\nconst ProductVariantInfoSchema = z.object({\n  name: z.string().describe(\"Nama varian.\"),\n  price: z.number().describe(\"Harga varian.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin yang diberikan untuk varian ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan varian ini (jika layanan).\"),\n});\nexport type ProductVariantInfo = z.infer<typeof ProductVariantInfoSchema>;\n\n// Skema untuk informasi produk/layanan yang akan dikembalikan oleh tool\nexport const ProductServiceInfoSchema = z.object({\n  id: z.string().describe(\"ID unik produk/layanan.\"),\n  name: z.string().describe(\"Nama produk atau layanan.\"),\n  type: z.enum(['Layanan', 'Produk']).describe(\"Jenis item, apakah 'Layanan' atau 'Produk'.\"),\n  category: z.string().describe(\"Kategori produk/layanan.\"),\n  price: z.number().describe(\"Harga dasar produk/layanan. Bisa 0 jika harga ditentukan oleh varian.\"),\n  description: z.string().optional().describe(\"Deskripsi singkat produk/layanan.\"),\n  pointsAwarded: z.number().optional().describe(\"Poin loyalitas yang diberikan untuk produk/layanan dasar ini.\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi pengerjaan (jika ini adalah layanan).\"),\n  variants: z.array(ProductVariantInfoSchema).optional().describe(\"Daftar varian yang tersedia untuk produk/layanan ini.\"),\n});\nexport type ProductServiceInfo = z.infer<typeof ProductServiceInfoSchema>;\n\n// Skema untuk informasi motor klien\nconst ClientMotorcycleInfoSchema = z.object({\n  name: z.string().describe(\"Nama atau model motor.\"),\n  licensePlate: z.string().describe(\"Plat nomor motor.\"),\n});\nexport type ClientMotorcycleInfo = z.infer<typeof ClientMotorcycleInfoSchema>;\n\n// Skema untuk informasi klien yang akan dikembalikan oleh tool\nexport const ClientInfoSchema = z.object({\n  id: z.string().describe(\"ID unik klien.\"),\n  name: z.string().describe(\"Nama lengkap klien.\"),\n  phone: z.string().describe(\"Nomor telepon klien.\"),\n  loyaltyPoints: z.number().describe(\"Jumlah poin loyalitas yang dimiliki klien.\"),\n  motorcycles: z.array(ClientMotorcycleInfoSchema).optional().describe(\"Daftar sepeda motor yang terdaftar atas nama klien ini.\"),\n  lastVisit: z.string().optional().describe(\"Tanggal kunjungan terakhir klien (format YYYY-MM-DD).\"),\n});\nexport type ClientInfo = z.infer<typeof ClientInfoSchema>;\n"],"names":[],"mappings":";;;;AACA;AAAA;;AAEA,qEAAqE;AACrE,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,MAAM,2BAA2B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,iLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ,CAAC;IAC7C,UAAU,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,UAAU,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,0BAA0B,QAAQ,GAAG,QAAQ,CAAC;AAClE;AAGA,oCAAoC;AACpC,MAAM,6BAA6B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAIO,MAAM,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,iLAAA,CAAA,IAAC,CAAC,KAAK,CAAC,4BAA4B,QAAQ,GAAG,QAAQ,CAAC;IACrE,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C","debugId":null}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/productLookupTool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for looking up product or service details from Firestore.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { collection, query as firestoreQuery, getDocs } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ProductServiceInfoSchema, type ProductServiceInfo, type ProductVariantInfo } from '@/types/aiToolSchemas';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define ServiceProduct type locally or import if it's broadly used\ninterface ServiceProductDbData {\n  id: string;\n  name: string;\n  type: 'Layanan' | 'Produk';\n  category: string;\n  price: number;\n  description?: string;\n  pointsAwarded?: number;\n  estimatedDuration?: string;\n  variants?: ServiceProductVariant[];\n  stockQuantity?: number;\n  costPrice?: number;\n  [key: string]: any; // Allow other fields that might exist in Firestore\n}\n\n\nconst ProductLookupInputSchema = z.object({\n  productName: z.string().describe(\"Nama produk atau layanan yang ingin dicari detailnya. Harus spesifik.\"),\n});\nexport type ProductLookupInput = z.infer<typeof ProductLookupInputSchema>;\n\n// Export this function so it can be called directly from other flows if needed.\nexport async function findProductServiceByName(input: ProductLookupInput): Promise<ProductServiceInfo | null> {\n    if (!input.productName || input.productName.trim() === '') {\n      console.log(\"ProductLookupTool Function: Nama produk kosong.\");\n      return null;\n    }\n    console.log(`ProductLookupTool Function: Mencari produk/layanan dengan nama: \"${input.productName}\"`);\n\n    if (!db) {\n      console.error(\"[ProductLookupTool Function] FATAL: Firestore DB (db) is not initialized. Cannot query.\");\n      return null;\n    }\n\n    try {\n      const servicesRef = collection(db, 'services');\n      const q = firestoreQuery(servicesRef); // Get all services/products\n      const querySnapshot = await getDocs(q);\n\n      let foundItem: ProductServiceInfo | null = null;\n      const searchTermLower = input.productName.toLowerCase().trim();\n\n      let bestMatchCandidate: (ProductServiceInfo & { originalItem?: ServiceProductDbData, isVariantMatch?: boolean, matchScore?: number }) | null = null;\n\n      for (const doc of querySnapshot.docs) {\n        const item = { id: doc.id, ...doc.data() } as ServiceProductDbData; \n\n        // Check base item name\n        if (item.name.toLowerCase().includes(searchTermLower)) {\n          let score = 0;\n          if (item.name.toLowerCase() === searchTermLower) score = 100; // Exact match\n          else if (item.name.toLowerCase().startsWith(searchTermLower)) score = 50; // Starts with\n          else score = 20; // Includes\n\n          if (!bestMatchCandidate || score > (bestMatchCandidate.matchScore || 0) || (score === bestMatchCandidate.matchScore && item.name.length < bestMatchCandidate.name.length)) {\n             bestMatchCandidate = { \n                ...item, // Spread all fields from item\n                // Ensure all required fields for ProductServiceInfo are present\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                category: item.category,\n                price: item.price,\n                // Optional fields:\n                description: item.description || undefined,\n                pointsAwarded: item.pointsAwarded || undefined,\n                estimatedDuration: item.estimatedDuration || undefined,\n                variants: item.variants?.map(v => ({...v, id: v.id || uuidv4()})) || undefined,\n                originalItem: item, \n                isVariantMatch: false, \n                matchScore: score \n            };\n          }\n        }\n\n        // Check variants\n        if (item.variants) {\n          for (const variant of item.variants) {\n            const fullVariantName = `${item.name} - ${variant.name}`;\n            if (fullVariantName.toLowerCase().includes(searchTermLower)) {\n              let score = 0;\n              if (fullVariantName.toLowerCase() === searchTermLower) score = 110; // Higher score for exact variant match\n              else if (fullVariantName.toLowerCase().startsWith(searchTermLower)) score = 60;\n              else score = 30;\n\n              if (!bestMatchCandidate || score > (bestMatchCandidate.matchScore || 0) || (score === bestMatchCandidate.matchScore && fullVariantName.length < bestMatchCandidate.name.length)) {\n                bestMatchCandidate = {\n                  id: item.id, \n                  name: fullVariantName, \n                  type: item.type,\n                  category: item.category,\n                  price: variant.price, \n                  description: item.description || undefined, \n                  pointsAwarded: variant.pointsAwarded ?? item.pointsAwarded,\n                  estimatedDuration: variant.estimatedDuration ?? item.estimatedDuration,\n                  variants: undefined, \n                  originalItem: item, \n                  isVariantMatch: true, \n                  matchScore: score\n                };\n              }\n            }\n          }\n        }\n      }\n      \n      if (bestMatchCandidate) {\n        console.log(`ProductLookupTool Function: Ditemukan kandidat terbaik: ${bestMatchCandidate.name} (Score: ${bestMatchCandidate.matchScore})`);\n        // Construct the final item to return, ensuring it matches ProductServiceInfoSchema\n        foundItem = {\n            id: bestMatchCandidate.id,\n            name: bestMatchCandidate.name,\n            type: bestMatchCandidate.type,\n            category: bestMatchCandidate.category,\n            price: bestMatchCandidate.price,\n            description: bestMatchCandidate.description || undefined,\n            pointsAwarded: bestMatchCandidate.pointsAwarded || undefined,\n            estimatedDuration: bestMatchCandidate.estimatedDuration || undefined,\n            variants: !bestMatchCandidate.isVariantMatch && bestMatchCandidate.originalItem?.variants \n                ? bestMatchCandidate.originalItem.variants.map((v: any) => ({ // Ensure v has id or generate one\n                    id: v.id || uuidv4(),\n                    name: v.name,\n                    price: v.price,\n                    pointsAwarded: v.pointsAwarded,\n                    estimatedDuration: v.estimatedDuration,\n                  })) \n                : undefined,\n        };\n\n        try {\n          ProductServiceInfoSchema.parse(foundItem);\n          return foundItem;\n        } catch (zodError: any) {\n          console.error(\"ProductLookupTool Function: Zod validation error for found item:\", JSON.stringify(zodError.format(), null, 2));\n          console.error(\"ProductLookupTool Function: Data that failed validation:\", JSON.stringify(foundItem, null, 2));\n          return null;\n        }\n      } else {\n        console.log(`ProductLookupTool Function: Tidak ada produk/layanan yang cocok dengan nama \"${input.productName}\".`);\n        return null;\n      }\n    } catch (error) {\n      console.error('ProductLookupTool Function: Error saat mengambil data dari Firestore:', error);\n      return null;\n    }\n}\n\nexport const getProductServiceDetailsByNameTool = ai.defineTool(\n  {\n    name: 'getProductServiceDetailsByNameTool',\n    description: 'Mencari dan mengembalikan detail spesifik dari sebuah produk atau layanan berdasarkan namanya. Berguna untuk menjawab pertanyaan pelanggan tentang harga, durasi, ketersediaan, atau deskripsi item tertentu.',\n    inputSchema: ProductLookupInputSchema,\n    outputSchema: z.union([ProductServiceInfoSchema, z.null()]).describe(\"Objek berisi detail produk/layanan, atau null jika tidak ditemukan.\"),\n  },\n  findProductServiceByName // Pass the actual function here\n);\n\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 880, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/cariInfoLayananTool.ts"],"sourcesContent":["\n/**\n * @fileOverview Genkit tool for searching services by category.\n * This tool is intended to be used by sub-flows or specialized flows.\n *\n * - cariInfoLayananTool - The Genkit tool definition.\n * - findLayananByCategory - The actual function performing the lookup (exported for direct use).\n * - CariInfoLayananInput - Zod type for the tool's input.\n * - CariInfoLayananOutput - Zod type for the tool's output.\n */\n\nimport { ai } from '@/ai/genkit'; \nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, query as firestoreQuery, getDocs, where } from 'firebase/firestore';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\nimport { ProductServiceInfoSchema } from '@/types/aiToolSchemas';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst CariInfoLayananInputSchema = z.object({\n  keyword: z.string().min(1, \"Kata kunci kategori pencarian tidak boleh kosong.\").describe('Nama KATEGORI layanan yang ingin dicari, mis. \"cuci\", \"coating\", \"detailing\". Akan dicocokkan (case-insensitive) dengan field \"category\" pada data layanan.'),\n});\nexport type CariInfoLayananInput = z.infer<typeof CariInfoLayananInputSchema>;\n\nconst CariInfoLayananOutputSchema = z.array(ProductServiceInfoSchema).describe(\"Daftar layanan yang cocok dengan KATEGORI yang dicari, bisa kosong.\");\nexport type CariInfoLayananOutput = z.infer<typeof CariInfoLayananOutputSchema>;\n\nexport async function findLayananByCategory(input: CariInfoLayananInput): Promise<CariInfoLayananOutput> {\n  const { keyword } = input;\n  const categoryKeywordLower = keyword.toLowerCase().trim();\n  console.log(`[findLayananByCategory Tool Function] Attempting to find services for CATEGORY: \"${categoryKeywordLower}\"`);\n\n  if (!db) {\n    console.error(\"[findLayananByCategory Tool Function] FATAL: Firestore DB (db) is not initialized. Cannot query.\");\n    return [];\n  }\n  \n  const matchingServices: ProductServiceInfo[] = [];\n  try {\n    const servicesCollectionRef = collection(db, 'services');\n    console.log(`[findLayananByCategory Tool Function] Querying collection 'services' WHERE \"category\" == \"${categoryKeywordLower}\"`);\n    \n    const q = firestoreQuery(servicesCollectionRef, where(\"category\", \"==\", categoryKeywordLower));\n    const querySnapshot = await getDocs(q);\n\n    console.log(`[findLayananByCategory Tool Function] Query successful. Found ${querySnapshot.size} documents matching category \"${categoryKeywordLower}\".`);\n\n    querySnapshot.forEach((docSnap) => {\n      const serviceData = docSnap.data();\n      let itemTypeFormatted: 'Layanan' | 'Produk' | undefined = undefined;\n      if (typeof serviceData.type === 'string') {\n        if (serviceData.type.toLowerCase() === 'layanan') {\n          itemTypeFormatted = 'Layanan';\n        } else if (serviceData.type.toLowerCase() === 'produk') {\n          itemTypeFormatted = 'Produk';\n        }\n      }\n\n      const serviceItem = {\n        id: docSnap.id,\n        name: serviceData.name,\n        type: itemTypeFormatted,\n        category: serviceData.category,\n        price: typeof serviceData.price === 'number' ? serviceData.price : 0,\n        description: serviceData.description || undefined,\n        pointsAwarded: serviceData.pointsAwarded || undefined,\n        estimatedDuration: serviceData.estimatedDuration || undefined,\n        variants: serviceData.variants?.map((v: any) => ({\n          id: v.id || uuidv4(), \n          name: v.name,\n          price: v.price,\n          pointsAwarded: v.pointsAwarded || undefined,\n          estimatedDuration: v.estimatedDuration || undefined,\n        })) || undefined,\n      };\n      \n      const validationResult = ProductServiceInfoSchema.safeParse(serviceItem);\n      if (validationResult.success) {\n        matchingServices.push(validationResult.data);\n      } else {\n        console.warn(`[findLayananByCategory Tool Function] Data layanan ${docSnap.id} (Nama: ${serviceData.name || 'N/A'}) tidak valid:`, JSON.stringify(validationResult.error.format(), null, 2));\n        console.warn(`[findLayananByCategory Tool Function] Data yang gagal validasi:`, JSON.stringify(serviceItem, null, 2));\n      }\n    });\n\n    console.log(`[findLayananByCategory Tool Function] Successfully validated and pushed ${matchingServices.length} services for CATEGORY \"${categoryKeywordLower}\".`);\n    if (matchingServices.length === 0 && querySnapshot.size > 0) {\n        console.warn(`[findLayananByCategory Tool Function] WARNING: Found ${querySnapshot.size} documents for category \"${categoryKeywordLower}\", but ALL FAILED Zod validation.`);\n    } else if (matchingServices.length === 0 && querySnapshot.size === 0) {\n        console.log(`[findLayananByCategory Tool Function] INFO: No documents found for category \"${categoryKeywordLower}\" in Firestore, or the field 'category' does not exactly match \"${categoryKeywordLower}\".`);\n    }\n    return matchingServices;\n  } catch (error) {\n    console.error(\"[findLayananByCategory Tool Function] Error saat mencari layanan berdasarkan KATEGORI:\", error);\n    return []; \n  }\n}\n\n// Define the Genkit tool, using the function above as its implementation\nexport const cariInfoLayananTool = ai.defineTool( // Ganti nama tool agar sesuai dengan pemanggilan di prompt\n  {\n    name: 'findLayananByCategory', // Ubah nama tool menjadi 'findLayananByCategory'\n    description: 'Mencari daftar layanan atau produk yang tersedia berdasarkan NAMA KATEGORI layanan yang spesifik. Input adalah nama kategori (mis. \"Cuci Motor\", \"Coating\"), output adalah daftar layanan dalam kategori tersebut.',\n    inputSchema: CariInfoLayananInputSchema,\n    outputSchema: CariInfoLayananOutputSchema,\n  },\n  findLayananByCategory \n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 984, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/booking.ts"],"sourcesContent":["\nimport type { Timestamp } from 'firebase/firestore';\nimport { z } from 'zod'; // Impor z dari genkit atau zod langsung\n\nexport type BookingStatus = 'Pending' | 'Confirmed' | 'In Queue' | 'Completed' | 'Cancelled' | 'Rescheduled';\n\nexport interface BookingEntry {\n  id?: string; // Firestore document ID\n  customerName: string;\n  customerPhone?: string;\n  clientId?: string;\n  serviceId: string; // ID dari katalog 'services'\n  serviceName: string; // Nama layanan (bisa termasuk varian)\n  vehicleInfo: string;\n  bookingDateTime: Timestamp; // Tanggal dan waktu booking\n  estimatedDuration?: string;\n  status: BookingStatus;\n  notes?: string;\n  queueItemId?: string; // ID item di antrian jika sudah masuk\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  source?: 'WhatsApp' | 'Manual' | 'Online';\n}\n\n// Schema untuk input CreateBookingTool\nexport const CreateBookingToolInputSchema = z.object({\n  customerName: z.string().describe(\"Nama lengkap pelanggan.\"),\n  customerPhone: z.string().optional().describe(\"Nomor telepon pelanggan (jika ada, format internasional mis. 628xxxx).\"),\n  clientId: z.string().optional().describe(\"ID klien terdaftar (jika ada).\"),\n  serviceId: z.string().describe(\"ID layanan/produk yang dibooking dari katalog.\"),\n  serviceName: z.string().describe(\"Nama layanan/produk yang dibooking (termasuk varian jika ada).\"),\n  vehicleInfo: z.string().describe(\"Informasi kendaraan (mis. 'Honda Vario (B 1234 XYZ)').\"),\n  bookingDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Tanggal booking dalam format YYYY-MM-DD.\").describe(\"Tanggal booking (YYYY-MM-DD).\"),\n  bookingTime: z.string().regex(/^([01]\\d|2[0-3]):([0-5]\\d)$/, \"Waktu booking dalam format HH:MM (24 jam).\").describe(\"Waktu booking (HH:MM, 24 jam).\"),\n  estimatedDuration: z.string().optional().describe(\"Estimasi durasi layanan.\"),\n  notes: z.string().optional().describe(\"Catatan tambahan untuk booking.\"),\n});\nexport type CreateBookingToolInput = z.infer<typeof CreateBookingToolInputSchema>;\n\n// Schema untuk output CreateBookingTool\nexport const CreateBookingToolOutputSchema = z.object({\n  success: z.boolean().describe(\"Apakah pembuatan booking berhasil atau tidak.\"),\n  bookingId: z.string().optional().describe(\"ID booking yang baru dibuat jika berhasil.\"),\n  queueItemId: z.string().optional().describe(\"ID item antrian jika booking untuk hari ini dan berhasil ditambahkan ke antrian.\"),\n  message: z.string().describe(\"Pesan hasil proses booking (mis. konfirmasi atau error).\"),\n  status: z.string().optional().describe(\"Status booking setelah dibuat.\"),\n});\nexport type CreateBookingToolOutput = z.infer<typeof CreateBookingToolOutputSchema>;\n\n// Referensi dari /bookings/page.tsx (untuk form manual di UI, bukan tool AI)\nexport interface ManualBookingFormData {\n  customerName: string;\n  clientId?: string;\n  vehicleInfo: string;\n  serviceId: string;\n  variantId?: string;\n  bookingDate: Date;\n  bookingTime: string; // HH:MM\n  notes?: string;\n  source: 'Manual' | 'WhatsApp' | 'Online';\n}\n"],"names":[],"mappings":";;;;AAEA,kSAAyB,wCAAwC;AAAjE;;AAuBO,MAAM,+BAA+B,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,eAAe,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,UAAU,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACzC,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,uBAAuB,4CAA4C,QAAQ,CAAC;IAC1G,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,+BAA+B,8CAA8C,QAAQ,CAAC;IACpH,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,OAAO,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACxC;AAIO,MAAM,gCAAgC,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,SAAS,iLAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC1C,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,SAAS,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,QAAQ,iLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACzC","debugId":null}},
    {"offset": {"line": 1016, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/createBookingTool.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit tool for creating new bookings.\n */\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase';\nimport { collection, addDoc, serverTimestamp, Timestamp, updateDoc, doc } from 'firebase/firestore';\nimport { CreateBookingToolInputSchema, CreateBookingToolOutputSchema, type CreateBookingToolInput, type CreateBookingToolOutput } from '@/types/booking';\nimport { type ServiceProduct } from '@/app/(app)/services/page';\nimport { isSameDay, setHours, setMinutes, parse } from 'date-fns';\n\nasync function createBookingImplementation(input: CreateBookingToolInput): Promise<CreateBookingToolOutput> {\n  console.log(\"[createBookingTool] Input received:\", JSON.stringify(input, null, 2));\n\n  try {\n    // 1. Validasi input (sudah dilakukan oleh Zod, tapi bisa tambah validasi kustom di sini)\n    const parsedDate = parse(input.bookingDate, 'yyyy-MM-dd', new Date());\n    if (isNaN(parsedDate.getTime())) {\n      return { success: false, message: \"Format tanggal booking tidak valid.\" };\n    }\n    const [hour, minute] = input.bookingTime.split(':').map(Number);\n    const bookingDateTime = setMinutes(setHours(parsedDate, hour), minute);\n    const bookingTimestamp = Timestamp.fromDate(bookingDateTime);\n\n    // 2. Ambil detail layanan untuk estimasi durasi (jika belum ada)\n    let estimatedDuration = input.estimatedDuration;\n    if (!estimatedDuration && input.serviceId) {\n      try {\n        const serviceDocRef = doc(db, 'services', input.serviceId);\n        const serviceSnap = await serviceDocRef.get();\n        if (serviceSnap.exists()) {\n          const serviceData = serviceSnap.data() as ServiceProduct;\n          estimatedDuration = serviceData.estimatedDuration || 'N/A';\n          // Jika ada varian, idealnya sudah ditangani di input.serviceName dan input.estimatedDuration\n        }\n      } catch (e) {\n        console.warn(\"[createBookingTool] Gagal mengambil durasi dari serviceId, akan menggunakan N/A jika tidak ada di input.\", e);\n      }\n    }\n\n    // 3. Siapkan data untuk Firestore\n    const bookingDataPayload: Omit<import('@/types/booking').BookingEntry, 'id' | 'createdAt' | 'updatedAt' | 'queueItemId'> = {\n      customerName: input.customerName,\n      clientId: input.clientId,\n      customerPhone: input.customerPhone,\n      vehicleInfo: input.vehicleInfo,\n      serviceId: input.serviceId,\n      serviceName: input.serviceName,\n      bookingDateTime: bookingTimestamp,\n      status: 'Confirmed', // Atau 'Pending' jika perlu konfirmasi manual\n      notes: input.notes,\n      source: 'WhatsApp', // Asumsi dari AI\n      estimatedDuration: estimatedDuration || 'N/A',\n    };\n\n    // 4. Simpan ke koleksi 'bookings'\n    const bookingDocRef = await addDoc(collection(db, \"bookings\"), {\n      ...bookingDataPayload,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n    });\n    console.log(`[createBookingTool] Booking berhasil dibuat dengan ID: ${bookingDocRef.id}`);\n\n    let queueItemId: string | undefined = undefined;\n    let queueMessage: string = \"\";\n\n    // 5. Jika booking untuk hari ini, tambahkan ke 'queueItems'\n    if (isSameDay(bookingDateTime, new Date())) {\n      const queueItemData = {\n        customerName: input.customerName,\n        clientId: input.clientId,\n        vehicleInfo: input.vehicleInfo,\n        service: input.serviceName,\n        serviceId: input.serviceId,\n        // variantId: (jika ada dan disimpan di input, perlu ditambahkan ke schema input tool)\n        status: 'Menunggu' as 'Menunggu',\n        estimatedTime: estimatedDuration || 'N/A',\n        bookingId: bookingDocRef.id,\n        createdAt: bookingTimestamp, // Waktu booking jadi createdAt antrian\n      };\n      const queueDocRef = await addDoc(collection(db, 'queueItems'), queueItemData);\n      queueItemId = queueDocRef.id;\n      await updateDoc(bookingDocRef, { queueItemId: queueDocRef.id, status: 'In Queue' });\n      console.log(`[createBookingTool] Booking untuk hari ini, ditambahkan ke antrian dengan ID: ${queueItemId}`);\n      queueMessage = \" dan sudah masuk antrian hari ini.\";\n    }\n\n    return {\n      success: true,\n      bookingId: bookingDocRef.id,\n      queueItemId: queueItemId,\n      message: `Booking untuk ${input.customerName} pada ${input.bookingDate} jam ${input.bookingTime} untuk layanan \"${input.serviceName}\" berhasil dibuat${queueMessage}`,\n      status: queueItemId ? 'In Queue' : 'Confirmed',\n    };\n\n  } catch (error: any) {\n    console.error('[createBookingTool] Error:', error);\n    return {\n      success: false,\n      message: `Gagal membuat booking: ${error.message || 'Kesalahan internal server.'}`,\n    };\n  }\n}\n\nexport const createBookingTool = ai.defineTool(\n  {\n    name: 'createBookingTool',\n    description: 'Membuat jadwal booking baru untuk pelanggan di sistem. Gunakan setelah semua detail (nama, layanan, motor, tanggal, jam) dikonfirmasi.',\n    inputSchema: CreateBookingToolInputSchema,\n    outputSchema: CreateBookingToolOutputSchema,\n  },\n  createBookingImplementation\n);\n"],"names":[],"mappings":";;;;;AAEA;;CAEC,GACD;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;AAEA,eAAe,4BAA4B,KAA6B;IACtE,QAAQ,GAAG,CAAC,uCAAuC,KAAK,SAAS,CAAC,OAAO,MAAM;IAE/E,IAAI;QACF,yFAAyF;QACzF,MAAM,aAAa,CAAA,GAAA,qJAAA,CAAA,QAAK,AAAD,EAAE,MAAM,WAAW,EAAE,cAAc,IAAI;QAC9D,IAAI,MAAM,WAAW,OAAO,KAAK;YAC/B,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAsC;QAC1E;QACA,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC;QACxD,MAAM,kBAAkB,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE,YAAY,OAAO;QAC/D,MAAM,mBAAmB,iKAAA,CAAA,YAAS,CAAC,QAAQ,CAAC;QAE5C,iEAAiE;QACjE,IAAI,oBAAoB,MAAM,iBAAiB;QAC/C,IAAI,CAAC,qBAAqB,MAAM,SAAS,EAAE;YACzC,IAAI;gBACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,KAAE,EAAE,YAAY,MAAM,SAAS;gBACzD,MAAM,cAAc,MAAM,cAAc,GAAG;gBAC3C,IAAI,YAAY,MAAM,IAAI;oBACxB,MAAM,cAAc,YAAY,IAAI;oBACpC,oBAAoB,YAAY,iBAAiB,IAAI;gBACrD,6FAA6F;gBAC/F;YACF,EAAE,OAAO,GAAG;gBACV,QAAQ,IAAI,CAAC,4GAA4G;YAC3H;QACF;QAEA,kCAAkC;QAClC,MAAM,qBAAqH;YACzH,cAAc,MAAM,YAAY;YAChC,UAAU,MAAM,QAAQ;YACxB,eAAe,MAAM,aAAa;YAClC,aAAa,MAAM,WAAW;YAC9B,WAAW,MAAM,SAAS;YAC1B,aAAa,MAAM,WAAW;YAC9B,iBAAiB;YACjB,QAAQ;YACR,OAAO,MAAM,KAAK;YAClB,QAAQ;YACR,mBAAmB,qBAAqB;QAC1C;QAEA,kCAAkC;QAClC,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,KAAE,EAAE,aAAa;YAC7D,GAAG,kBAAkB;YACrB,WAAW,CAAA,GAAA,iKAAA,CAAA,kBAAe,AAAD;YACzB,WAAW,CAAA,GAAA,iKAAA,CAAA,kBAAe,AAAD;QAC3B;QACA,QAAQ,GAAG,CAAC,CAAC,uDAAuD,EAAE,cAAc,EAAE,EAAE;QAExF,IAAI,cAAkC;QACtC,IAAI,eAAuB;QAE3B,4DAA4D;QAC5D,IAAI,CAAA,GAAA,yIAAA,CAAA,YAAS,AAAD,EAAE,iBAAiB,IAAI,SAAS;YAC1C,MAAM,gBAAgB;gBACpB,cAAc,MAAM,YAAY;gBAChC,UAAU,MAAM,QAAQ;gBACxB,aAAa,MAAM,WAAW;gBAC9B,SAAS,MAAM,WAAW;gBAC1B,WAAW,MAAM,SAAS;gBAC1B,sFAAsF;gBACtF,QAAQ;gBACR,eAAe,qBAAqB;gBACpC,WAAW,cAAc,EAAE;gBAC3B,WAAW;YACb;YACA,MAAM,cAAc,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,KAAE,EAAE,eAAe;YAC/D,cAAc,YAAY,EAAE;YAC5B,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,eAAe;gBAAE,aAAa,YAAY,EAAE;gBAAE,QAAQ;YAAW;YACjF,QAAQ,GAAG,CAAC,CAAC,8EAA8E,EAAE,aAAa;YAC1G,eAAe;QACjB;QAEA,OAAO;YACL,SAAS;YACT,WAAW,cAAc,EAAE;YAC3B,aAAa;YACb,SAAS,CAAC,cAAc,EAAE,MAAM,YAAY,CAAC,MAAM,EAAE,MAAM,WAAW,CAAC,KAAK,EAAE,MAAM,WAAW,CAAC,gBAAgB,EAAE,MAAM,WAAW,CAAC,iBAAiB,EAAE,cAAc;YACrK,QAAQ,cAAc,aAAa;QACrC;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YACL,SAAS;YACT,SAAS,CAAC,uBAAuB,EAAE,MAAM,OAAO,IAAI,8BAA8B;QACpF;IACF;AACF;AAEO,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,aAAa,uHAAA,CAAA,+BAA4B;IACzC,cAAc,uHAAA,CAAA,gCAA6B;AAC7C,GACA;;;IAPW;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1147, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Flow AI utama untuk WhatsApp Customer Service QLAB.\n * Sekarang menangani semua logika layanan dan menyimpan konteks percakapan di Firestore.\n */\nimport { ai } from '@/ai/genkit';\nimport * as z from 'zod';\nimport { db } from '@/lib/firebase';\nimport { doc, getDoc as getFirestoreDoc, setDoc as setFirestoreDoc, serverTimestamp, type Timestamp } from 'firebase/firestore';\nimport { DEFAULT_MAIN_PROMPT_ZOYA } from '@/types/aiSettings';\nimport { format, addDays } from 'date-fns'; // Import date-fns\n\nimport { cariSizeMotorTool, type CariSizeMotorInput, findMotorSize } from '@/ai/tools/cari-size-motor-tool';\nimport { getProductServiceDetailsByNameTool, type ProductLookupInput, findProductServiceByName } from '@/ai/tools/productLookupTool';\n// Mengimpor tool object 'cariInfoLayananTool' DAN fungsi 'findLayananByCategory'\nimport { cariInfoLayananTool, findLayananByCategory, type CariInfoLayananInput, type CariInfoLayananOutput } from '@/ai/tools/cariInfoLayananTool';\nimport { createBookingTool, type CreateBookingToolInput } from '@/ai/tools/createBookingTool';\nimport type { ProductServiceInfo } from '@/types/aiToolSchemas';\n\n// Skema internal untuk validasi input chat history di flow\nconst ChatMessageSchemaInternal = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchemaInternal>;\n\n// --- User Session Structure (in Firestore: userAiSessions/{senderNumber}) ---\ninterface UserAiSession {\n  userId: string;\n  activeSpecificServiceInquiry?: string; // Nama layanan yang sedang aktif ditanyakan/dibahas\n  activeSpecificServiceId?: string;    // ID layanan yang sedang aktif\n  knownMotorcycleName?: string;\n  knownMotorcycleSize?: string;\n  // Untuk booking\n  pendingBookingDate?: string; // YYYY-MM-DD\n  pendingBookingTime?: string; // HH:MM\n  lastAiInteractionType?:\n    | 'asked_for_motor_type_for_specific_service'\n    | 'provided_specific_service_details'\n    | 'provided_category_service_list'\n    | 'asked_for_service_after_motor_size'\n    | 'general_response'\n    | 'initial_greeting'\n    | 'asked_for_paint_type_for_coating'\n    | 'ready_for_booking_details' // User mengindikasikan mau booking\n    | 'waiting_for_booking_datetime' // AI sudah tanya tanggal & jam\n    | 'waiting_for_booking_notes' // AI sudah tanya catatan\n    | 'booking_attempted'; // AI sudah panggil tool createBookingTool\n  lastUpdatedAt: Timestamp;\n}\n\n// Skema input utama untuk ZoyaChatFlow (digunakan oleh UI)\nconst ZoyaChatInputSchema = z.object({\n  messages: z.array(ChatMessageSchemaInternal).optional().describe(\"Riwayat percakapan lengkap, jika ada.\"),\n  customerMessage: z.string().min(1, \"Pesan pelanggan tidak boleh kosong.\").describe(\"Pesan terbaru dari customer.\"),\n  senderNumber: z.string().optional().describe(\"Nomor WhatsApp pengirim (WAJIB untuk session jika mau persisten).\"),\n  mainPromptString: z.string().optional().describe(\"String prompt utama yang mungkin dikirim dari UI atau diambil dari Firestore.\"),\n  // Tanggal-tanggal ini akan diisi oleh wrapper function\n  currentDate: z.string().optional(),\n  currentTime: z.string().optional(),\n  tomorrowDate: z.string().optional(),\n  dayAfterTomorrowDate: z.string().optional(),\n  // Input dari UI untuk override/seed sesi. Sesi Firestore akan jadi sumber utama jika ada.\n  knownMotorcycleInfo: z.object({\n    name: z.string(),\n    size: z.string().optional(),\n  }).optional().describe(\"Informasi motor pelanggan jika sudah diketahui dari interaksi sebelumnya atau database.\"),\n  activeSpecificServiceInquiry: z.string().optional().describe(\"Layanan spesifik yang sedang aktif ditanyakan jika Zoya sebelumnya bertanya tipe motor untuk layanan ini.\"),\n});\nexport type ZoyaChatInput = z.infer<typeof ZoyaChatInputSchema>;\n\n// Schema output untuk wrapper function (digunakan oleh UI)\nconst WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n  sessionActiveSpecificServiceInquiry: z.string().optional(),\n  sessionDetectedMotorcycleInfo: z.object({ name: z.string(), size: z.string().optional() }).optional(),\n  sessionLastAiInteractionType: z.string().optional(),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>;\n\n\n// Flow utama\nconst zoyaChatFlow = ai.defineFlow(\n  {\n    name: 'zoyaChatFlow',\n    inputSchema: ZoyaChatInputSchema,\n    outputSchema: WhatsAppReplyOutputSchema,\n  },\n  async (input: ZoyaChatInput): Promise<WhatsAppReplyOutput> => {\n    console.log(\"[MAIN-FLOW] zoyaChatFlow input:\", JSON.stringify(input, null, 2));\n\n    let customerMessageToProcess = input.customerMessage;\n    let suggestedReply = \"Maaf, Zoya lagi bingung nih.\";\n    let sessionDataToSave: Partial<UserAiSession> = {};\n    let dynamicContextFromPreToolCall = \"\";\n\n    if (!customerMessageToProcess || customerMessageToProcess.trim() === '') {\n      return { suggestedReply: \"Maaf, Zoya tidak menerima pesan yang jelas.\" };\n    }\n    if (!input.senderNumber) {\n        console.warn(\"[MAIN-FLOW] WARNING: senderNumber tidak ada di input. Sesi Firestore tidak akan digunakan/disimpan. Konteks hanya dari input.\");\n    }\n\n    const userId = input.senderNumber || 'anonymous_user';\n    const sessionDocRef = input.senderNumber ? doc(db, 'userAiSessions', userId) : null;\n    let currentSession: Partial<UserAiSession> = {};\n\n    if (sessionDocRef) {\n        try {\n            const sessionSnap = await getFirestoreDoc(sessionDocRef);\n            if (sessionSnap.exists()) {\n                currentSession = sessionSnap.data() as UserAiSession;\n                console.log(`[MAIN-FLOW] Sesi ditemukan untuk ${userId}:`, JSON.stringify(currentSession, null, 2));\n            }\n        } catch (e) {\n            console.error(`[MAIN-FLOW] Gagal memuat sesi untuk ${userId}:`, e);\n        }\n    }\n\n    let knownMotorcycleName = input.knownMotorcycleInfo?.name || currentSession.knownMotorcycleName || \"belum diketahui\";\n    let knownMotorcycleSize = input.knownMotorcycleInfo?.size || currentSession.knownMotorcycleSize || \"belum diketahui\";\n    let activeSpecificServiceInquiry = input.activeSpecificServiceInquiry || currentSession.activeSpecificServiceInquiry || \"tidak ada\";\n    let activeSpecificServiceId = currentSession.activeSpecificServiceId; // Ambil dari sesi\n    let lastAiInteractionType = currentSession.lastAiInteractionType || \"initial_greeting\";\n    let pendingBookingDate = currentSession.pendingBookingDate;\n    let pendingBookingTime = currentSession.pendingBookingTime;\n\n\n    const lowerCaseCustomerMessage = customerMessageToProcess.toLowerCase();\n    const generalServiceKeywords = [\"cuci\", \"coating\", \"poles\", \"detailing\", \"repaint\", \"servis\", \"layanan\", \"produk\", \"jual\", \"harga\", \"info\", \"katalog\", \"booking\", \"pesan tempat\", \"jadwal\"];\n    let detectedGeneralServiceKeyword: string | null = null;\n    for (const keyword of generalServiceKeywords) {\n        if (lowerCaseCustomerMessage.includes(keyword)) {\n            detectedGeneralServiceKeyword = keyword;\n            if ((keyword === \"cuci\" && (lowerCaseCustomerMessage.includes(\"cuci motor\") || lowerCaseCustomerMessage.includes(\"nyuci\"))) ) detectedGeneralServiceKeyword = \"cuci\";\n            else if (keyword === \"coating\" && (lowerCaseCustomerMessage.includes(\"coating motor\") || lowerCaseCustomerMessage.includes(\"laminating\"))) detectedGeneralServiceKeyword = \"coating\";\n            else if (keyword === \"poles\" && (lowerCaseCustomerMessage.includes(\"poles motor\") || lowerCaseCustomerMessage.includes(\"poles bodi\"))) detectedGeneralServiceKeyword = \"poles\";\n            else if (keyword === \"detailing\" && lowerCaseCustomerMessage.includes(\"detailing motor\")) detectedGeneralServiceKeyword = \"detailing\";\n            else if (keyword === \"repaint\" && (lowerCaseCustomerMessage.includes(\"repaint motor\") || lowerCaseCustomerMessage.includes(\"cat motor\"))) detectedGeneralServiceKeyword = \"repaint\";\n            else if (keyword === \"booking\" || keyword === \"pesan tempat\" || keyword === \"jadwal\") detectedGeneralServiceKeyword = \"booking\";\n            break;\n        }\n    }\n    console.log(\"[MAIN-FLOW] Detected general service keyword from user message:\", detectedGeneralServiceKeyword);\n\n    if (detectedGeneralServiceKeyword && lastAiInteractionType !== 'asked_for_motor_type_for_specific_service' && lastAiInteractionType !== 'asked_for_paint_type_for_coating' && !lowerCaseCustomerMessage.includes(\"booking\") && !lowerCaseCustomerMessage.includes(\"pesan tempat\") && !lowerCaseCustomerMessage.includes(\"jadwal\")) {\n        console.log(`[MAIN-FLOW] Melakukan pre-call findLayananByCategory (fungsi) untuk keyword: \"${detectedGeneralServiceKeyword}\"`);\n        const layananByCategoryResult: CariInfoLayananOutput = await findLayananByCategory({ keyword: detectedGeneralServiceKeyword });\n        if (layananByCategoryResult && layananByCategoryResult.length > 0) {\n            dynamicContextFromPreToolCall = `Informasi layanan untuk kategori '${detectedGeneralServiceKeyword}' dari sistem:\\n`;\n            layananByCategoryResult.forEach(item => {\n                dynamicContextFromPreToolCall += `- ${item.name}: ${item.description || 'Tidak ada deskripsi.'} (Harga dasar: Rp ${item.price.toLocaleString('id-ID')}, Estimasi: ${item.estimatedDuration || 'N/A'})\\n`;\n                if (item.variants && item.variants.length > 0) {\n                    dynamicContextFromPreToolCall += `  Varian: ${item.variants.map(v => `${v.name} (Rp ${v.price.toLocaleString('id-ID')})`).join(', ')}\\n`;\n                }\n            });\n            console.log(\"[MAIN-FLOW] Pre-call findLayananByCategory berhasil, data dimasukkan ke dynamicContext.\");\n        } else {\n            dynamicContextFromPreToolCall = `Informasi layanan untuk kategori '${detectedGeneralServiceKeyword}' dari sistem: Tidak ditemukan.`;\n            console.log(\"[MAIN-FLOW] Pre-call findLayananByCategory tidak menemukan data.\");\n        }\n    }\n\n\n    const mainPromptFromSettings = input.mainPromptString || DEFAULT_MAIN_PROMPT_ZOYA;\n\n    const finalSystemPrompt = mainPromptFromSettings\n                                .replace(\"{{{SESSION_MOTOR_NAME}}}\", knownMotorcycleName)\n                                .replace(\"{{{SESSION_MOTOR_SIZE}}}\", knownMotorcycleSize)\n                                .replace(\"{{{SESSION_ACTIVE_SERVICE}}}\", activeSpecificServiceInquiry)\n                                .replace(\"{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\", lastAiInteractionType)\n                                .replace(\"{{{detectedGeneralServiceKeyword}}}\", detectedGeneralServiceKeyword || \"tidak ada\")\n                                .replace(\"{{{dynamicContext}}}\", dynamicContextFromPreToolCall || `INFO_UMUM_BENGKEL: QLAB Moto Detailing, Jl. Sukasenang V No.1A, Cikutra, Bandung. Buka 09:00 - 21:00 WIB. Full Detailing hanya untuk cat glossy. Coating beda harga untuk doff & glossy.`)\n                                .replace(\"{{{currentDate}}}\", input.currentDate || \"tidak diketahui\")\n                                .replace(\"{{{tomorrowDate}}}\", input.tomorrowDate || \"tidak diketahui\")\n                                .replace(\"{{{dayAfterTomorrowDate}}}\", input.dayAfterTomorrowDate || \"tidak diketahui\")\n                                .replace(\"{{{senderNumber}}}\", userId) // Untuk tool booking\n                                ;\n\n\n    const historyForAI = (input.messages || [])\n      .filter(msg => msg.content && msg.content.trim() !== '')\n      .map((msg) => ({\n        role: msg.role,\n        content: [{ text: msg.content }],\n    }));\n\n    const messagesForAI = [\n      ...historyForAI,\n      { role: 'user' as const, content: [{ text: customerMessageToProcess }] }\n    ];\n\n    console.log(`[MAIN-FLOW] Calling MAIN ai.generate. History Length: ${historyForAI.length}. Prompt snippet: ${finalSystemPrompt.substring(0, 300)}...`);\n    // Default interaction type\n    sessionDataToSave.lastAiInteractionType = 'general_response';\n\n    try {\n      const result = await ai.generate({\n        model: 'googleai/gemini-1.5-flash-latest',\n        prompt: finalSystemPrompt,\n        messages: messagesForAI,\n        tools: [cariSizeMotorTool, getProductServiceDetailsByNameTool, cariInfoLayananTool, createBookingTool], // Menggunakan cariInfoLayananTool (objek tool)\n        toolChoice: 'auto',\n        config: {\n            temperature: 0.6,\n            topP: 0.9,\n        },\n      });\n\n      console.log(\"[MAIN-FLOW] Raw MAIN AI generate result:\", JSON.stringify(result, null, 2));\n      suggestedReply = result.text || \"\";\n      const toolRequest = result.toolRequest;\n\n      let interactionTypeAfterTool: UserAiSession['lastAiInteractionType'] = sessionDataToSave.lastAiInteractionType as UserAiSession['lastAiInteractionType'];\n      let activeServiceAfterTool = activeSpecificServiceInquiry;\n      let activeServiceIdAfterTool = activeSpecificServiceId;\n\n      if (toolRequest) {\n        console.log(\"[MAIN-FLOW] MAIN AI requested a tool call:\", JSON.stringify(toolRequest, null, 2));\n        let toolOutputToRelay: any = \"Error: Tool output tidak diset.\";\n\n        if (toolRequest.name === 'cariSizeMotor' && toolRequest.input) {\n          toolOutputToRelay = await findMotorSize(toolRequest.input as CariSizeMotorInput);\n          if (toolOutputToRelay.success && toolOutputToRelay.size && toolOutputToRelay.vehicleModelFound) {\n              knownMotorcycleName = toolOutputToRelay.vehicleModelFound;\n              knownMotorcycleSize = toolOutputToRelay.size;\n              sessionDataToSave.knownMotorcycleName = knownMotorcycleName;\n              sessionDataToSave.knownMotorcycleSize = knownMotorcycleSize;\n              if (lastAiInteractionType === 'asked_for_motor_type_for_specific_service') {\n                  interactionTypeAfterTool = 'provided_specific_service_details';\n              } else {\n                  interactionTypeAfterTool = 'asked_for_service_after_motor_size';\n              }\n          } else {\n              interactionTypeAfterTool = 'asked_for_motor_type_for_specific_service'; // Gagal, tetap tanya motor\n          }\n        } else if (toolRequest.name === 'getProductServiceDetailsByNameTool' && toolRequest.input) {\n          toolOutputToRelay = await findProductServiceByName(toolRequest.input as ProductLookupInput);\n          if (toolOutputToRelay?.name) {\n            activeServiceAfterTool = toolOutputToRelay.name;\n            activeServiceIdAfterTool = toolOutputToRelay.id; // Simpan ID layanan\n            interactionTypeAfterTool = 'provided_specific_service_details';\n            sessionDataToSave.activeSpecificServiceId = activeServiceIdAfterTool;\n          }\n        } else if (toolRequest.name === 'findLayananByCategory' && toolRequest.input) { // Note: findLayananByCategory is the tool's Genkit name\n          toolOutputToRelay = await findLayananByCategory(toolRequest.input as CariInfoLayananInput); // Memanggil fungsi implementasi tool\n           if (Array.isArray(toolOutputToRelay) && toolOutputToRelay.length > 0) {\n             interactionTypeAfterTool = 'provided_category_service_list';\n           }\n        } else if (toolRequest.name === 'createBookingTool' && toolRequest.input) {\n            const bookingInput = toolRequest.input as CreateBookingToolInput;\n            if (!bookingInput.serviceId && activeServiceIdAfterTool) {\n                bookingInput.serviceId = activeServiceIdAfterTool;\n                bookingInput.serviceName = activeServiceAfterTool;\n            }\n            toolOutputToRelay = await createBookingTool.fn!(bookingInput);\n            interactionTypeAfterTool = 'booking_attempted';\n            if ((toolOutputToRelay as any).success) {\n                sessionDataToSave.activeSpecificServiceInquiry = undefined;\n                sessionDataToSave.activeSpecificServiceId = undefined;\n                sessionDataToSave.pendingBookingDate = undefined;\n                sessionDataToSave.pendingBookingTime = undefined;\n            }\n        }\n\n        sessionDataToSave.lastAiInteractionType = interactionTypeAfterTool;\n        sessionDataToSave.activeSpecificServiceInquiry = activeServiceAfterTool;\n\n        if (toolOutputToRelay !== \"Error: Tool output tidak diset.\") {\n            console.log(`[MAIN-FLOW] Output from tool '${toolRequest.name}':`, JSON.stringify(toolOutputToRelay, null, 2));\n            const messagesAfterTool = [\n                ...messagesForAI,\n                result.message,\n                { role: 'tool' as const, content: [{ toolResponse: { name: toolRequest.name, output: toolOutputToRelay }}]}\n            ];\n\n            const promptForSecondCall = mainPromptFromSettings\n                .replace(\"{{{SESSION_MOTOR_NAME}}}\", knownMotorcycleName)\n                .replace(\"{{{SESSION_MOTOR_SIZE}}}\", knownMotorcycleSize)\n                .replace(\"{{{SESSION_ACTIVE_SERVICE}}}\", activeServiceAfterTool)\n                .replace(\"{{{SESSION_LAST_AI_INTERACTION_TYPE}}}\", interactionTypeAfterTool)\n                .replace(\"{{{dynamicContext}}}\", dynamicContextFromPreToolCall || \"Tidak ada info tambahan dari sistem.\")\n                .replace(\"{{{currentDate}}}\", input.currentDate || \"tidak diketahui\")\n                .replace(\"{{{tomorrowDate}}}\", input.tomorrowDate || \"tidak diketahui\")\n                .replace(\"{{{dayAfterTomorrowDate}}}\", input.dayAfterTomorrowDate || \"tidak diketahui\")\n                .replace(\"{{{senderNumber}}}\", userId);\n\n            const modelResponseAfterTool = await ai.generate({\n                model: 'googleai/gemini-1.5-flash-latest',\n                prompt: promptForSecondCall,\n                messages: messagesAfterTool,\n                config: {\n                    temperature: 0.6,\n                    topP: 0.9,\n                },\n                 tools: [cariSizeMotorTool, getProductServiceDetailsByNameTool, cariInfoLayananTool, createBookingTool], // Menggunakan cariInfoLayananTool (objek tool)\n                 toolChoice: 'auto',\n            });\n            suggestedReply = modelResponseAfterTool.text || `Zoya dapet info dari alat ${toolRequest.name}, tapi bingung mau ngomong apa.`;\n             if (modelResponseAfterTool.toolRequest) {\n                console.warn(\"[MAIN-FLOW] AI requested another tool after a tool response. This is not deeply handled yet. Returning current text.\");\n             }\n             const lowerFinalReply = suggestedReply.toLowerCase();\n              if (lowerFinalReply.includes(\"tanggal\") && lowerFinalReply.includes(\"jam\") && (interactionTypeAfterTool === 'provided_specific_service_details' || interactionTypeAfterTool === 'ready_for_booking_details')) {\n                sessionDataToSave.lastAiInteractionType = 'waiting_for_booking_datetime';\n              } else if (lowerFinalReply.includes(\"catatan tambahan\") && interactionTypeAfterTool === 'waiting_for_booking_datetime') {\n                sessionDataToSave.lastAiInteractionType = 'waiting_for_booking_notes';\n              }\n        }\n      } else if (suggestedReply) {\n        const finishReason = result.finishReason;\n        console.log(`[MAIN-FLOW] MAIN AI Finish Reason (no tool): ${finishReason}`);\n        if (!suggestedReply && finishReason !== \"stop\") {\n            console.error(`[MAIN-FLOW] ‚ùå MAIN AI generation failed or no text output. Finish Reason: ${finishReason}.`);\n            suggestedReply = \"Maaf, Zoya lagi agak bingung nih boskuu. Coba tanya lagi dengan cara lain ya.\";\n        } else {\n            const lowerReply = suggestedReply.toLowerCase();\n            if (lowerReply.includes(\"tipe motornya apa\") || lowerReply.includes(\"motornya apa\") || lowerReply.includes(\"jenis motornya\")) {\n                sessionDataToSave.lastAiInteractionType = 'asked_for_motor_type_for_specific_service';\n                const serviceMentionedInUser = await extractServiceNameFromUserMessage(customerMessageToProcess, await getAllServiceNamesAndIds());\n                if (serviceMentionedInUser && activeSpecificServiceInquiry === \"tidak ada\") {\n                    sessionDataToSave.activeSpecificServiceInquiry = serviceMentionedInUser.name;\n                    sessionDataToSave.activeSpecificServiceId = serviceMentionedInUser.id;\n                    activeSpecificServiceInquiry = serviceMentionedInUser.name;\n                    activeSpecificServiceId = serviceMentionedInUser.id;\n                }\n            } else if (lowerReply.includes(\"catnya glossy atau doff\") && activeSpecificServiceInquiry.toLowerCase().includes(\"coating\")) {\n                sessionDataToSave.lastAiInteractionType = 'asked_for_paint_type_for_coating';\n            } else if ((lowerReply.includes(\"mau dibookingin\") || lowerReply.includes(\"mau dijadwalin\")) && activeSpecificServiceInquiry !== \"tidak ada\") {\n                sessionDataToSave.lastAiInteractionType = 'ready_for_booking_details';\n            } else if (lowerReply.includes(\"tanggal\") && lowerReply.includes(\"jam\") && (lastAiInteractionType === 'ready_for_booking_details' || lastAiInteractionType === 'provided_specific_service_details')) {\n                sessionDataToSave.lastAiInteractionType = 'waiting_for_booking_datetime';\n            } else if (lowerReply.includes(\"catatan tambahan\") && lastAiInteractionType === 'waiting_for_booking_datetime') {\n                sessionDataToSave.lastAiInteractionType = 'waiting_for_booking_notes';\n            } else if (lowerReply.includes(\"booking lo udah zoya catet\") || lowerReply.includes(\"booking berhasil\")) {\n                 sessionDataToSave.lastAiInteractionType = 'booking_attempted';\n                 sessionDataToSave.activeSpecificServiceInquiry = undefined;\n                 sessionDataToSave.activeSpecificServiceId = undefined;\n                 sessionDataToSave.pendingBookingDate = undefined;\n                 sessionDataToSave.pendingBookingTime = undefined;\n            } else if (lowerReply.includes(\"pilihan layanan\") || lowerReply.includes(\"daftar layanan\")) {\n                sessionDataToSave.lastAiInteractionType = 'provided_category_service_list';\n            } else if (lowerReply.includes(\"harga\") && (knownMotorcycleName !== \"belum diketahui\")) {\n                sessionDataToSave.lastAiInteractionType = 'provided_specific_service_details';\n            } else if (lowerReply.includes(\"halo\") || lowerReply.includes(\"ada yang bisa dibantu\")) {\n                 sessionDataToSave.lastAiInteractionType = 'initial_greeting';\n            }\n        }\n      } else {\n        console.error(`[MAIN-FLOW] ‚ùå No tool request and no text output from MAIN AI. Result: ${JSON.stringify(result, null, 2)}`);\n        suggestedReply = \"Waduh, Zoya lagi nggak bisa jawab nih. Coba lagi ya.\";\n      }\n\n      if (sessionDocRef) {\n          const finalSessionDataToSave: Partial<UserAiSession> = {\n              userId: userId,\n              knownMotorcycleName: (knownMotorcycleName !== \"belum diketahui\") ? knownMotorcycleName : currentSession.knownMotorcycleName,\n              knownMotorcycleSize: (knownMotorcycleSize !== \"belum diketahui\") ? knownMotorcycleSize : currentSession.knownMotorcycleSize,\n              activeSpecificServiceInquiry: sessionDataToSave.activeSpecificServiceInquiry !== undefined ? sessionDataToSave.activeSpecificServiceInquiry : activeSpecificServiceInquiry,\n              activeSpecificServiceId: sessionDataToSave.activeSpecificServiceId !== undefined ? sessionDataToSave.activeSpecificServiceId : activeSpecificServiceId,\n              pendingBookingDate: sessionDataToSave.pendingBookingDate !== undefined ? sessionDataToSave.pendingBookingDate : pendingBookingDate,\n              pendingBookingTime: sessionDataToSave.pendingBookingTime !== undefined ? sessionDataToSave.pendingBookingTime : pendingBookingTime,\n              lastAiInteractionType: sessionDataToSave.lastAiInteractionType || lastAiInteractionType,\n              lastUpdatedAt: serverTimestamp() as Timestamp,\n          };\n          Object.keys(finalSessionDataToSave).forEach(keyStr => {\n            const key = keyStr as keyof Partial<UserAiSession>;\n            if (finalSessionDataToSave[key] === undefined) {\n              delete finalSessionDataToSave[key];\n            }\n          });\n\n          console.log(`[MAIN-FLOW] Menyimpan sesi untuk ${userId}:`, JSON.stringify(finalSessionDataToSave, null, 2));\n          await setFirestoreDoc(sessionDocRef, finalSessionDataToSave, { merge: true });\n      }\n\n      return {\n        suggestedReply,\n        sessionActiveSpecificServiceInquiry: sessionDataToSave.activeSpecificServiceInquiry !== undefined ? sessionDataToSave.activeSpecificServiceInquiry : activeSpecificServiceInquiry,\n        sessionDetectedMotorcycleInfo: (knownMotorcycleName !== \"belum diketahui\") ? { name: knownMotorcycleName, size: (knownMotorcycleSize !== \"belum diketahui\") ? knownMotorcycleSize : undefined } : undefined,\n        sessionLastAiInteractionType: sessionDataToSave.lastAiInteractionType || lastAiInteractionType,\n      };\n\n    } catch (flowError: any) {\n        console.error(\"[MAIN-FLOW] ‚ùå Critical error dalam MAIN zoyaChatFlow:\", flowError);\n        if (flowError.cause) console.error(\"[MAIN-FLOW] Error Cause:\", JSON.stringify(flowError.cause, null, 2));\n        return { suggestedReply: `Waduh, Zoya lagi error nih, boskuu. Coba tanya lagi nanti ya. (Error: ${flowError.message || 'Kesalahan internal'})` };\n    }\n  }\n);\n\n// Helper Functions\nasync function getAllServiceNamesAndIds(): Promise<{id: string, name: string}[]> {\n    try {\n      const items = await findLayananByCategory({ keyword: \"\" });\n      if (Array.isArray(items)) {\n        return items.map(i => ({id: i.id, name: i.name })).filter(i => i.id && i.name);\n      }\n      return [];\n    } catch (e) {\n      console.error(\"Error in getAllServiceNamesAndIds:\", e);\n      return [];\n    }\n}\n\nasync function extractServiceNameFromUserMessage(userMessage: string, services: {id: string, name: string}[]): Promise<{id: string, name: string} | undefined> {\n    const lowerUserMessage = userMessage.toLowerCase();\n    const sortedServices = [...services].sort((a,b) => b.name.length - a.name.length);\n    for (const service of sortedServices) {\n        if (service.name && lowerUserMessage.includes(service.name.toLowerCase())) {\n            return service;\n        }\n    }\n    return undefined;\n}\n\n// Wrapper function yang akan dipanggil oleh UI atau API route\nexport async function generateWhatsAppReply(input: ZoyaChatInput): Promise<WhatsAppReplyOutput> {\n  console.log(\"[MAIN-FLOW Wrapper] generateWhatsAppReply input:\", JSON.stringify(input, null, 2));\n\n  let mainPromptToUse = input.mainPromptString;\n\n  if (!mainPromptToUse && db && input.senderNumber) {\n    try {\n        const settingsDocRef = doc(db, 'appSettings', 'aiAgentConfig');\n        const docSnap = await getFirestoreDoc(settingsDocRef);\n        if (docSnap.exists() && docSnap.data()?.mainPrompt) {\n          mainPromptToUse = docSnap.data().mainPrompt;\n          console.log(\"[MAIN-FLOW Wrapper]: Using mainPromptString from Firestore.\");\n        } else {\n          mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n          console.log(\"[MAIN-FLOW Wrapper]: Using DEFAULT_MAIN_PROMPT_ZOYA (Firestore doc not found or no mainPrompt).\");\n        }\n    } catch (error) {\n      console.error(\"[MAIN-FLOW Wrapper]: Error fetching mainPrompt from Firestore. Using default.\", error);\n      mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n    }\n  } else if (!mainPromptToUse) {\n     mainPromptToUse = DEFAULT_MAIN_PROMPT_ZOYA;\n     console.log(\"[MAIN-FLOW Wrapper]: Using DEFAULT_MAIN_PROMPT_ZOYA (db or senderNumber not available for Firestore fetch, or prompt already provided).\");\n  } else {\n     console.log(\"[MAIN-FLOW Wrapper]: Using mainPromptString directly from input.\");\n  }\n\n  const today = new Date();\n  const flowInput: ZoyaChatInput = {\n    ...input,\n    messages: input.messages || [],\n    mainPromptString: mainPromptToUse,\n    currentDate: format(today, 'yyyy-MM-dd'),\n    currentTime: format(today, 'HH:mm'),\n    tomorrowDate: format(addDays(today, 1), 'yyyy-MM-dd'),\n    dayAfterTomorrowDate: format(addDays(today, 2), 'yyyy-MM-dd'),\n  };\n\n  try {\n    const result = await zoyaChatFlow(flowInput);\n    return result;\n  } catch (error: any) {\n    console.error(\"[MAIN-FLOW Wrapper] Error running zoyaChatFlow:\", error);\n    return { suggestedReply: `Maaf, Zoya sedang ada kendala teknis. (${error.message || 'Tidak diketahui'})` };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4053660f6447b38038e1d20965a3df3cd57a2a7b51'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1682, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1696, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1710, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}