{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport { getFirestore, type Firestore } from \"firebase/firestore\";\n\n// Minimal logging\nconsole.log(\"[firebase.ts] Initializing Firebase...\");\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nif (!firebaseConfig.projectId || !firebaseConfig.apiKey) {\n  console.error(\"[firebase.ts] FATAL ERROR: Firebase projectId or apiKey is MISSING in environment variables.\");\n}\n\nlet app: FirebaseApp;\nlet db: Firestore;\n\nif (getApps().length === 0) {\n  try {\n    app = initializeApp(firebaseConfig);\n    console.log(\"[firebase.ts] Firebase app initialized. Project ID:\", app.options.projectId);\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to initialize Firebase app:\", e.message);\n    // @ts-ignore\n    app = null;\n  }\n} else {\n  app = getApp();\n  console.log(\"[firebase.ts] Using existing Firebase app. Project ID:\", app.options.projectId);\n}\n\n// @ts-ignore\nif (app) {\n  try {\n    // @ts-ignore\n    db = getFirestore(app);\n    console.log(\"[firebase.ts] Firestore instance obtained.\");\n  } catch (e: any) {\n    console.error(\"[firebase.ts] FAILED to get Firestore instance:\", e?.message);\n  }\n} else {\n    console.error(\"[firebase.ts] Firebase app not properly initialized, cannot get Firestore.\");\n}\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,IAAI,CAAC,eAAe,SAAS,IAAI,CAAC,eAAe,MAAM,EAAE;IACvD,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,IAAI;QACF,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACpB,QAAQ,GAAG,CAAC,uDAAuD,IAAI,OAAO,CAAC,SAAS;IAC1F,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,oDAAoD,EAAE,OAAO;QAC3E,aAAa;QACb,MAAM;IACR;AACF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;IACX,QAAQ,GAAG,CAAC,0DAA0D,IAAI,OAAO,CAAC,SAAS;AAC7F;AAEA,aAAa;AACb,IAAI,KAAK;IACP,IAAI;QACF,aAAa;QACb,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,mDAAmD,GAAG;IACtE;AACF,OAAO;IACH,QAAQ,KAAK,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["\nimport '@/lib/firebase'; // Ensure Firebase is initialized early\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai'; // Impor plugin Google AI\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Gunakan plugin Google AI\n  ],\n  model: 'googleai/gemini-1.5-flash-latest', // Mengubah ke model yang lebih stabil\n  // Opsi telemetry tidak lagi dikonfigurasi di sini untuk Genkit v1.x\n  // Jika butuh logging, konfigurasi dilakukan secara berbeda atau via environment.\n});\n"],"names":[],"mappings":";;;AACA,8MAAyB,uCAAuC;AAChE;AAAA;AACA,8TAA8C,yBAAyB;AAAvE;;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;IACD,OAAO;AAGT","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase-admin.ts"],"sourcesContent":["\nimport * as admin from 'firebase-admin';\n\n// Minimal logging\nconsole.log(\"[firebase-admin.ts] Initializing Firebase Admin SDK...\");\n\nif (!admin.apps.length) {\n  try {\n    // When deployed to App Hosting or running with emulators (e.g., via `firebase emulators:start`),\n    // the SDK should auto-configure based on the environment.\n    // For local development outside emulators, you might need to set\n    // GOOGLE_APPLICATION_CREDENTIALS environment variable pointing to your service account key JSON file.\n    admin.initializeApp();\n    console.log('[firebase-admin.ts] Firebase Admin SDK initialized successfully.');\n    if (admin.instanceId()) { // Check if instanceId is available\n      console.log('[firebase-admin.ts] Firebase Admin App Name:', admin.app().name);\n    }\n  } catch (e:any) {\n    console.error('[firebase-admin.ts] Firebase Admin SDK initialization failed. Details:', e.message);\n    console.error('[firebase-admin.ts] Ensure your environment is configured correctly for Firebase Admin (e.g., GOOGLE_APPLICATION_CREDENTIALS for local dev, or running within a Firebase/GCP environment).');\n    // Depending on your error handling strategy, you might want to re-throw or handle this.\n    // For now, we'll let it proceed, but db/auth might be undefined.\n  }\n} else {\n  console.log('[firebase-admin.ts] Firebase Admin SDK already initialized. Using existing app.');\n}\n\nlet adminDb: admin.firestore.Firestore;\nlet adminAuth: admin.auth.Auth;\n\ntry {\n  adminDb = admin.firestore();\n  console.log('[firebase-admin.ts] Firestore Admin instance obtained.');\n} catch (e:any) {\n  console.error('[firebase-admin.ts] FAILED to get Firestore Admin instance:', e?.message);\n  // @ts-ignore\n  adminDb = undefined; \n}\n\ntry {\n  adminAuth = admin.auth();\n  console.log('[firebase-admin.ts] Auth Admin instance obtained.');\n} catch (e:any) {\n  console.error('[firebase-admin.ts] FAILED to get Auth Admin instance:', e?.message);\n  // @ts-ignore\n  adminAuth = undefined;\n}\n\n\nexport { adminDb, adminAuth };\n"],"names":[],"mappings":";;;;AACA;;AAEA,kBAAkB;AAClB,QAAQ,GAAG,CAAC;AAEZ,IAAI,CAAC,2HAAA,CAAA,OAAU,CAAC,MAAM,EAAE;IACtB,IAAI;QACF,iGAAiG;QACjG,0DAA0D;QAC1D,iEAAiE;QACjE,sGAAsG;QACtG,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD;QAClB,QAAQ,GAAG,CAAC;QACZ,IAAI,CAAA,GAAA,2HAAA,CAAA,aAAgB,AAAD,KAAK;YACtB,QAAQ,GAAG,CAAC,gDAAgD,CAAA,GAAA,2HAAA,CAAA,MAAS,AAAD,IAAI,IAAI;QAC9E;IACF,EAAE,OAAO,GAAO;QACd,QAAQ,KAAK,CAAC,0EAA0E,EAAE,OAAO;QACjG,QAAQ,KAAK,CAAC;IACd,wFAAwF;IACxF,iEAAiE;IACnE;AACF,OAAO;IACL,QAAQ,GAAG,CAAC;AACd;AAEA,IAAI;AACJ,IAAI;AAEJ,IAAI;IACF,UAAU,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD;IACxB,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,GAAO;IACd,QAAQ,KAAK,CAAC,+DAA+D,GAAG;IAChF,aAAa;IACb,UAAU;AACZ;AAEA,IAAI;IACF,YAAY,CAAA,GAAA,2HAAA,CAAA,OAAU,AAAD;IACrB,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,GAAO;IACd,QAAQ,KAAK,CAAC,0DAA0D,GAAG;IAC3E,aAAa;IACb,YAAY;AACd","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/extractMotorInfoTool.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit tool for extracting motorcycle information from text.\n * - extractMotorInfoTool - The Genkit tool definition.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { adminDb } from '@/lib/firebase-admin'; // Pastikan file ini ada dan terkonfigurasi\n\n// Skema input untuk tool\nconst ExtractMotorInfoInputSchema = z.object({\n  text: z.string().describe('Teks dari pengguna yang mungkin berisi nama atau deskripsi motor.'),\n});\nexport type ExtractMotorInfoInput = z.infer<typeof ExtractMotorInfoInputSchema>;\n\n// Skema output untuk tool\nconst ExtractMotorInfoOutputSchema = z.object({\n  brand: z.string().describe('Merek motor yang terdeteksi.'),\n  model: z.string().describe('Model motor yang terdeteksi.'),\n  size: z.enum(['S', 'M', 'L', 'XL']).describe('Ukuran motor yang terdeteksi (S, M, L, XL).'),\n});\nexport type ExtractMotorInfoOutput = z.infer<typeof ExtractMotorInfoOutputSchema>;\n\n// Definisi tool Genkit\nexport const extractMotorInfoTool = ai.defineTool(\n  {\n    name: 'extractMotorInfoTool', // Nama tool di Genkit, bisa beda dari nama variabel\n    description: 'Mendeteksi merek, model, dan ukuran motor dari teks deskriptif pengguna dengan mencocokkan ke database tipe kendaraan.',\n    inputSchema: ExtractMotorInfoInputSchema,\n    outputSchema: ExtractMotorInfoOutputSchema,\n  },\n  async (input: ExtractMotorInfoInput): Promise<ExtractMotorInfoOutput> => {\n    const cleanText = input.text.toLowerCase().trim();\n    console.log(`[extractMotorInfoTool] Input text: \"${input.text}\", Cleaned text: \"${cleanText}\"`);\n\n    if (!cleanText) {\n      console.log('[extractMotorInfoTool] Input text is empty. Throwing error.');\n      throw new Error('Teks input kosong, tidak bisa mendeteksi motor.');\n    }\n\n    try {\n      const vehicleTypesSnapshot = await adminDb.collection('vehicleTypes').get();\n      console.log(`[extractMotorInfoTool] Raw snapshot size from 'vehicleTypes': ${vehicleTypesSnapshot.size}`);\n\n      if (vehicleTypesSnapshot.empty) {\n        console.log('[extractMotorInfoTool] Collection \"vehicleTypes\" is empty or does not exist in Firestore.');\n        throw new Error('Database tipe kendaraan kosong atau tidak ditemukan.');\n      }\n\n      const mappedVehicleTypes = vehicleTypesSnapshot.docs.map(doc => {\n        const data = doc.data();\n        const validationErrorMessages: string[] = [];\n\n        if (!data.brand || typeof data.brand !== 'string') {\n            validationErrorMessages.push('field \"brand\" is missing or not a string');\n        }\n        if (!data.model || typeof data.model !== 'string') {\n            validationErrorMessages.push('field \"model\" is missing or not a string');\n        }\n        if (!data.size || typeof data.size !== 'string' || !['S', 'M', 'L', 'XL'].includes(data.size)) {\n            validationErrorMessages.push('field \"size\" is missing, not a string, or not S/M/L/XL');\n        }\n        if (!data.aliases || !Array.isArray(data.aliases)) {\n            validationErrorMessages.push('field \"aliases\" is missing or not an array');\n        } else if (!data.aliases.every((a: any) => typeof a === 'string')) {\n            validationErrorMessages.push('field \"aliases\" contains non-string elements');\n        }\n\n        if (validationErrorMessages.length > 0) {\n            console.warn(`[extractMotorInfoTool] Dokumen ${doc.id} di 'vehicleTypes' GAGAL VALIDASI. Alasan: ${validationErrorMessages.join('; ')}. Data mentah: ${JSON.stringify(data)}. Dokumen ini akan dilewati.`);\n            return null; \n        }\n        \n        return {\n          id: doc.id,\n          brand: data.brand as string,\n          model: data.model as string,\n          size: data.size as 'S' | 'M' | 'L' | 'XL',\n          aliases: (data.aliases as string[]).map(alias => alias.toLowerCase()),\n        };\n      });\n      \n      console.log(`[extractMotorInfoTool] Mapped vehicle types (before filtering nulls): ${mappedVehicleTypes.length}`);\n      const allVehicleTypes = mappedVehicleTypes.filter(item => item !== null) as { id: string; brand: string; model: string; size: 'S' | 'M' | 'L' | 'XL'; aliases: string[]; }[];\n      \n      console.log(`[extractMotorInfoTool] Total valid vehicle types after filtering: ${allVehicleTypes.length}.`);\n\n      if (allVehicleTypes.length === 0) {\n        console.log('[extractMotorInfoTool] No valid vehicle types found after filtering. Check Firestore data format and console warnings above for details on invalid documents.');\n        throw new Error('Tidak ada data tipe kendaraan yang valid di database. Periksa format data di Firestore dan log peringatan di konsol.');\n      }\n\n      for (const vehicleType of allVehicleTypes) {\n        // console.log(`[extractMotorInfoTool] Checking vehicle: ${vehicleType.brand} ${vehicleType.model}, Aliases: ${vehicleType.aliases.join(', ')}`);\n        for (const alias of vehicleType.aliases) {\n          if (cleanText.includes(alias)) {\n            console.log(`[extractMotorInfoTool] !!! MATCH FOUND !!! Alias \"${alias}\" (from vehicle: ${vehicleType.brand} ${vehicleType.model}) found in cleaned text: \"${cleanText}\"`);\n            return {\n              brand: vehicleType.brand,\n              model: vehicleType.model,\n              size: vehicleType.size,\n            };\n          }\n        }\n      }\n\n      console.log('[extractMotorInfoTool] No match found for the input text after checking all vehicle types and aliases.');\n      throw new Error('Motor tidak dikenali dari teks yang diberikan. Pastikan alias di database mencakup variasi nama motor tersebut.');\n\n    } catch (error: any) {\n      console.error('[extractMotorInfoTool] Error during execution:', error);\n      if (error instanceof Error) {\n        throw new Error(`Kesalahan pada tool extractMotorInfo: ${error.message}`);\n      }\n      throw new Error(`Terjadi kesalahan internal pada tool extractMotorInfo: ${String(error)}`);\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/types/ai/cs-whatsapp-reply.ts"],"sourcesContent":["\nimport { z } from 'genkit';\n\nexport const ChatMessageSchema = z.object({\n  role: z.enum(['user', 'model']), // 'user' for customer/CS agent, 'model' for AI's previous replies\n  content: z.string(),\n});\nexport type ChatMessage = z.infer<typeof ChatMessageSchema>;\n\nexport const WhatsAppReplyInputSchema = z.object({\n  customerMessage: z.string().describe('Pesan yang diterima dari pelanggan melalui WhatsApp, atau pertanyaan dari staf CS.'),\n  senderNumber: z.string().optional().describe('Nomor WhatsApp pengirim pesan (pelanggan).'),\n  chatHistory: z.array(ChatMessageSchema).optional().describe('Riwayat percakapan sebelumnya antara pelanggan dan AI/staf CS.'),\n  agentBehavior: z.string().optional().describe('Perilaku agen AI yang diinginkan, mis. \"Ramah & Membantu\".'),\n  knowledgeBase: z.string().optional().describe('Panduan tingkat tinggi untuk AI. Detail pengetahuan spesifik akan diambil melalui tools.'),\n  currentDate: z.string().optional().describe('Tanggal saat ini dalam format YYYY-MM-DD. Berguna untuk konteks booking.'),\n  currentTime: z.string().optional().describe('Waktu saat ini dalam format HH:MM (24 jam). Berguna untuk konteks booking.'),\n  tomorrowDate: z.string().optional().describe('Tanggal besok dalam format YYYY-MM-DD. Berguna untuk konteks booking.'),\n  dayAfterTomorrowDate: z.string().optional().describe('Tanggal lusa (besoknya besok) dalam format YYYY-MM-DD. Berguna untuk konteks booking.'),\n});\nexport type WhatsAppReplyInput = z.infer<typeof WhatsAppReplyInputSchema>;\n\nexport const WhatsAppReplyOutputSchema = z.object({\n  suggestedReply: z.string().describe('Saran balasan yang dihasilkan AI untuk dikirim ke pelanggan.'),\n});\nexport type WhatsAppReplyOutput = z.infer<typeof WhatsAppReplyOutputSchema>;\n    \n"],"names":[],"mappings":";;;;;AACA;AAAA;;AAEO,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAGO,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,mBAAmB,QAAQ,GAAG,QAAQ,CAAC;IAC5D,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACvD;AAGO,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cs-whatsapp-reply-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI flow for WhatsApp customer service replies.\n * - whatsAppReplyFlowSimplified - Main flow for generating WhatsApp replies.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit'; // Menggunakan z dari genkit\nimport { extractMotorInfoTool } from '@/ai/tools/extractMotorInfoTool';\nimport type { WhatsAppReplyInput, WhatsAppReplyOutput, ChatMessage } from '@/types/ai/cs-whatsapp-reply'; // Pastikan path ini benar\nimport { WhatsAppReplyInputSchema, WhatsAppReplyOutputSchema } from '@/types/ai/cs-whatsapp-reply'; // Pastikan path ini benar\n\n// Prompt Zoya yang baru (tidak diekspor)\nconst promptZoya = `\nKamu adalah Zoya, Customer Service AI dari QLAB Moto Detailing.\n\nGaya bahasa:\n- Santai dan akrab, pakai sapaan seperti \"bro\", \"kak\", \"mas\".\n- Tetap informatif dan jelas.\n\nTugas kamu:\n1. Jawab pertanyaan seputar layanan (cuci, coating, detailing, repaint).\n2. Jika pelanggan menyebutkan ingin coating tapi tidak menyebut jenis motornya, jawab dengan semangat dan tanya balik: \"Motornya apa nih? Doff atau glossy?\".\n3. Jika pelanggan menyebutkan jenis motor seperti “nmax connected”, gunakan tool 'extractMotorInfo' untuk deteksi.\n4. Kalau pelanggan menyebutkan motor seperti \"nmax connected\", panggil tool 'extractMotorInfoTool' dengan input: {\"text\": \"nmax connected\"}\n5. Gunakan hasil dari tool untuk menentukan ukuran motor (S/M/L/XL) lalu sesuaikan dengan layanan dan harga.\n6. Kalau berhasil deteksi motor, jelaskan layanan yang cocok dan tawarkan booking.\n7. Kalau pelanggan mau booking, minta data berikut:\n   - Nama\n   - No HP\n   - Tanggal\n   - Jam\n   - Jenis Motor (gunakan dari hasil extract)\n8. Booking belum diproses AI sepenuhnya, jadi cukup kumpulkan datanya lalu katakan bahwa staf kami akan hubungi untuk konfirmasi final.\n\nJika tidak yakin, arahkan pelanggan ke CS manusia.\n\nFormat output HARUS berupa:\n{ \"suggestedReply\": \"Teks balasan disini\" }\n\nContoh:\n{ \"suggestedReply\": \"Oke, untuk coating motor doff ukuran M itu 400rb bro. Mau sekalian booking?\" }\n\nChat customer terbaru:\nuser: {{{customerMessage}}}\n\nRiwayat sebelumnya:\n{{#if chatHistory.length}}\n{{#each chatHistory}}\n{{this.role}}: {{this.content}}\n{{/each}}\n{{/if}}\n\nTanggal hari ini: {{{currentDate}}}, waktu: {{{currentTime}}}\nBesok: {{{tomorrowDate}}}, Lusa: {{{dayAfterTomorrowDate}}}\n`;\n\n/**\n * Define prompt untuk Zoya dengan tool extractMotorInfoTool\n */\nconst replyPromptSimplified = ai.definePrompt({\n  name: 'whatsAppReplyPromptSimplified',\n  input: { schema: WhatsAppReplyInputSchema },\n  output: { schema: WhatsAppReplyOutputSchema },\n  tools: [extractMotorInfoTool], // Tool penting: deteksi motor dari teks user\n  prompt: promptZoya, // Menggunakan prompt yang sudah didefinisikan di atas\n});\n\n/**\n * Flow utama untuk digunakan di API/function/genkit handler\n */\nexport const whatsAppReplyFlowSimplified = ai.defineFlow(\n  {\n    name: 'whatsAppReplyFlowSimplified',\n    inputSchema: WhatsAppReplyInputSchema,\n    outputSchema: WhatsAppReplyOutputSchema,\n  },\n  async (input: WhatsAppReplyInput): Promise<WhatsAppReplyOutput> => {\n    console.log(\"[CS-FLOW] whatsAppReplyFlowSimplified input:\", JSON.stringify(input, null, 2));\n    try {\n      const { output } = await replyPromptSimplified(input);\n      if (!output) { \n        console.error('[CS-FLOW] ❌ Gagal mendapatkan balasan dari AI (output is null/undefined dari prompt). Mengembalikan default.');\n        return { suggestedReply: \"Maaf, Zoya lagi bingung nih. Bisa diulang pertanyaannya atau coba beberapa saat lagi?\" };\n      }\n      // Output should already be validated by definePrompt's outputSchema.\n      console.log(\"[CS-FLOW] whatsAppReplyFlowSimplified output dari prompt:\", output);\n      return output;\n    } catch (e: any) {\n      // This catches errors during the execution of `replyPromptSimplified` itself (e.g., API errors from LLM provider)\n      console.error('[CS-FLOW] ❌ Error saat menjalankan prompt AI atau memproses outputnya:', e);\n      return { suggestedReply: \"Duh, Zoya lagi pusing tujuh keliling. Tanya lagi nanti ya, bro!\" };\n    }\n  }\n);\n\n// Wrapper function to match the expected export by API if still needed.\n// Jika API kamu (misalnya di /api/whatsapp/receive) masih memanggil generateWhatsAppReply,\n// kita buatkan wrapper yang kompatibel.\nexport async function generateWhatsAppReply(input: WhatsAppReplyInput): Promise<WhatsAppReplyOutput> {\n  // Untuk saat ini, kita asumsikan input ke flow sama dengan input ke fungsi ini.\n  // Parameter seperti agentBehavior, knowledgeBase, dll. dari firestore settings\n  // tidak di-passing ke flow baru ini untuk sementara.\n  // Kita bisa tambahkan kembali jika diperlukan.\n  \n  const flowInput: WhatsAppReplyInput = {\n    customerMessage: input.customerMessage,\n    senderNumber: input.senderNumber,\n    chatHistory: input.chatHistory || [],\n    currentDate: input.currentDate,\n    currentTime: input.currentTime,\n    tomorrowDate: input.tomorrowDate,\n    dayAfterTomorrowDate: input.dayAfterTomorrowDate,\n    // `agentBehavior` dan `knowledgeBase` dari input tidak langsung digunakan di prompt Zoya baru\n    // Tapi kita bisa pass jika promptnya diupdate untuk menggunakan itu\n  };\n\n  // Flow whatsAppReplyFlowSimplified sekarang dijamin mengembalikan Promise<WhatsAppReplyOutput>\n  return whatsAppReplyFlowSimplified(flowInput);\n}\n"],"names":[],"mappings":";;;;;;AACA;;;CAGC,GAED;AAEA;AAEA,mPAAoG,0BAA0B;;;;;;;AAE9H,yCAAyC;AACzC,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CpB,CAAC;AAED;;CAEC,GACD,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAE,QAAQ,6IAAA,CAAA,2BAAwB;IAAC;IAC1C,QAAQ;QAAE,QAAQ,6IAAA,CAAA,4BAAyB;IAAC;IAC5C,OAAO;QAAC,0IAAA,CAAA,uBAAoB;KAAC;IAC7B,QAAQ;AACV;AAKO,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtD;IACE,MAAM;IACN,aAAa,6IAAA,CAAA,2BAAwB;IACrC,cAAc,6IAAA,CAAA,4BAAyB;AACzC,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,gDAAgD,KAAK,SAAS,CAAC,OAAO,MAAM;IACxF,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,sBAAsB;QAC/C,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,OAAO;gBAAE,gBAAgB;YAAwF;QACnH;QACA,qEAAqE;QACrE,QAAQ,GAAG,CAAC,6DAA6D;QACzE,OAAO;IACT,EAAE,OAAO,GAAQ;QACf,kHAAkH;QAClH,QAAQ,KAAK,CAAC,0EAA0E;QACxF,OAAO;YAAE,gBAAgB;QAAkE;IAC7F;AACF;AAMK,eAAe,sBAAsB,KAAyB;IACnE,gFAAgF;IAChF,+EAA+E;IAC/E,qDAAqD;IACrD,+CAA+C;IAE/C,MAAM,YAAgC;QACpC,iBAAiB,MAAM,eAAe;QACtC,cAAc,MAAM,YAAY;QAChC,aAAa,MAAM,WAAW,IAAI,EAAE;QACpC,aAAa,MAAM,WAAW;QAC9B,aAAa,MAAM,WAAW;QAC9B,cAAc,MAAM,YAAY;QAChC,sBAAsB,MAAM,oBAAoB;IAGlD;IAEA,+FAA+F;IAC/F,OAAO,4BAA4B;AACrC;;;IAhDa;IA4BS;;AA5BT,+OAAA;AA4BS,+OAAA","debugId":null}},
    {"offset": {"line": 642, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/ai-cs-assistant/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWhatsAppReply as '4053660f6447b38038e1d20965a3df3cd57a2a7b51'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 720, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/ai-cs-assistant/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/ai-cs-assistant/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/ai-cs-assistant/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 734, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}